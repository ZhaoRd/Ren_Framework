<?xml version="1.0" encoding="utf-8"?>
<topics>
  <topic id="N:Zhaord" />
  <topic id="T:Zhaord.ComparableObject" />
  <topic id="Methods.T:Zhaord.ComparableObject" />
  <topic id="Fields.T:Zhaord.ComparableObject" />
  <topic id="Overload:Zhaord.ComparableObject.RegisterSignatureProperty" />
  <topic id="M:Zhaord.ComparableObject.#ctor" />
  <topic id="M:Zhaord.ComparableObject.Equals(System.Object)" />
  <topic id="M:Zhaord.ComparableObject.GetHashCode" />
  <topic id="M:Zhaord.ComparableObject.GetSignatureProperties" />
  <topic id="M:Zhaord.ComparableObject.GetSignaturePropertiesCore" />
  <topic id="M:Zhaord.ComparableObject.GetTypeUnproxied" />
  <topic id="F:Zhaord.ComparableObject.HashMultiplier" />
  <topic id="M:Zhaord.ComparableObject.HasSameSignatureAs(Zhaord.ComparableObject)" />
  <topic id="M:Zhaord.ComparableObject.RegisterSignatureProperty(System.Reflection.PropertyInfo)" />
  <topic id="M:Zhaord.ComparableObject.RegisterSignatureProperty(System.String)" />
  <topic id="T:Zhaord.ComparableObject`1" />
  <topic id="Methods.T:Zhaord.ComparableObject`1" />
  <topic id="Overload:Zhaord.ComparableObject`1.Equals" />
  <topic id="Overload:Zhaord.ComparableObject`1.RegisterSignatureProperty" />
  <topic id="M:Zhaord.ComparableObject`1.#ctor" />
  <topic id="M:Zhaord.ComparableObject`1.Equals(`0)" />
  <topic id="M:Zhaord.ComparableObject`1.RegisterSignatureProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" />
  <topic id="T:Zhaord.DisposableObject" />
  <topic id="Methods.T:Zhaord.DisposableObject" />
  <topic id="Properties.T:Zhaord.DisposableObject" />
  <topic id="Overload:Zhaord.DisposableObject.CheckDisposed" />
  <topic id="Overload:Zhaord.DisposableObject.Dispose" />
  <topic id="Overload:Zhaord.DisposableObject.DisposeDictionary" />
  <topic id="M:Zhaord.DisposableObject.#ctor" />
  <topic id="M:Zhaord.DisposableObject.CheckDisposed" />
  <topic id="M:Zhaord.DisposableObject.CheckDisposed(System.String)" />
  <topic id="M:Zhaord.DisposableObject.Dispose" />
  <topic id="M:Zhaord.DisposableObject.Dispose(System.Boolean)" />
  <topic id="M:Zhaord.DisposableObject.DisposeDictionary``2(System.Collections.Generic.IDictionary{``0,``1})" />
  <topic id="M:Zhaord.DisposableObject.DisposeDictionary(System.Collections.IDictionary)" />
  <topic id="M:Zhaord.DisposableObject.DisposeEnumerable(System.Collections.IEnumerable)" />
  <topic id="M:Zhaord.DisposableObject.DisposeMember(System.Object)" />
  <topic id="M:Zhaord.DisposableObject.Finalize" />
  <topic id="P:Zhaord.DisposableObject.IsDisposed" />
  <topic id="M:Zhaord.DisposableObject.OnDispose(System.Boolean)" />
  <topic id="T:Zhaord.Error" />
  <topic id="Methods.T:Zhaord.Error" />
  <topic id="Overload:Zhaord.Error.Application" />
  <topic id="Overload:Zhaord.Error.Argument" />
  <topic id="Overload:Zhaord.Error.ArgumentNull" />
  <topic id="Overload:Zhaord.Error.ArgumentOutOfRange" />
  <topic id="Overload:Zhaord.Error.InvalidCast" />
  <topic id="Overload:Zhaord.Error.InvalidOperation" />
  <topic id="Overload:Zhaord.Error.ObjectDisposed" />
  <topic id="M:Zhaord.Error.Application(System.Exception,System.String,System.Object[])" />
  <topic id="M:Zhaord.Error.Application(System.String,System.Object[])" />
  <topic id="M:Zhaord.Error.Argument``1(System.Func{``0},System.String,System.Object[])" />
  <topic id="M:Zhaord.Error.Argument(System.String,System.String,System.Object[])" />
  <topic id="M:Zhaord.Error.ArgumentNull``1(System.Func{``0})" />
  <topic id="M:Zhaord.Error.ArgumentNull(System.String)" />
  <topic id="M:Zhaord.Error.ArgumentNullOrEmpty(System.Func{System.String})" />
  <topic id="M:Zhaord.Error.ArgumentOutOfRange``1(System.Func{``0})" />
  <topic id="M:Zhaord.Error.ArgumentOutOfRange(System.String)" />
  <topic id="M:Zhaord.Error.ArgumentOutOfRange(System.String,System.String,System.Object[])" />
  <topic id="M:Zhaord.Error.InvalidCast(System.Type,System.Type)" />
  <topic id="M:Zhaord.Error.InvalidCast(System.Type,System.Type,System.Exception)" />
  <topic id="M:Zhaord.Error.InvalidOperation``1(System.String,System.Exception,System.Func{``0})" />
  <topic id="M:Zhaord.Error.InvalidOperation(System.String,System.Exception,System.Object[])" />
  <topic id="M:Zhaord.Error.InvalidOperation``1(System.String,System.Func{``0})" />
  <topic id="M:Zhaord.Error.InvalidOperation(System.String,System.Object[])" />
  <topic id="M:Zhaord.Error.MoreThanOneElement" />
  <topic id="M:Zhaord.Error.NoElements" />
  <topic id="M:Zhaord.Error.NotImplemented" />
  <topic id="M:Zhaord.Error.NotSupported" />
  <topic id="M:Zhaord.Error.ObjectDisposed(System.String)" />
  <topic id="M:Zhaord.Error.ObjectDisposed(System.String,System.String,System.Object[])" />
  <topic id="T:Zhaord.Guard" />
  <topic id="Methods.T:Zhaord.Guard" />
  <topic id="Overload:Zhaord.Guard.Against" />
  <topic id="Overload:Zhaord.Guard.ArgumentIsEnumType" />
  <topic id="Overload:Zhaord.Guard.ArgumentNotEmpty" />
  <topic id="Overload:Zhaord.Guard.ArgumentNotNull" />
  <topic id="Overload:Zhaord.Guard.Arguments" />
  <topic id="Overload:Zhaord.Guard.HasDefaultConstructor" />
  <topic id="Overload:Zhaord.Guard.InheritsFrom" />
  <topic id="Overload:Zhaord.Guard.IsTypeOf" />
  <topic id="M:Zhaord.Guard.Against``1(System.Boolean,System.String)" />
  <topic id="M:Zhaord.Guard.Against``1(System.Func{System.Boolean},System.String)" />
  <topic id="M:Zhaord.Guard.ArgumentInRange``1(``0,``0,``0,System.String)" />
  <topic id="M:Zhaord.Guard.ArgumentIsEnumType(System.Type,System.Object,System.String)" />
  <topic id="M:Zhaord.Guard.ArgumentIsEnumType(System.Type,System.String)" />
  <topic id="M:Zhaord.Guard.ArgumentIsPositive``1(``0,System.String,System.String)" />
  <topic id="M:Zhaord.Guard.ArgumentIsTrue(System.Boolean,System.String,System.String)" />
  <topic id="M:Zhaord.Guard.ArgumentNotDisposed(Zhaord.DisposableObject,System.String)" />
  <topic id="M:Zhaord.Guard.ArgumentNotEmpty``1(System.Collections.Generic.ICollection{``0},System.String)" />
  <topic id="M:Zhaord.Guard.ArgumentNotEmpty(System.Func{System.Guid})" />
  <topic id="M:Zhaord.Guard.ArgumentNotEmpty(System.Func{System.String})" />
  <topic id="M:Zhaord.Guard.ArgumentNotEmpty(System.Guid,System.String)" />
  <topic id="M:Zhaord.Guard.ArgumentNotEmpty(System.String,System.String)" />
  <topic id="M:Zhaord.Guard.ArgumentNotNegative``1(``0,System.String,System.String)" />
  <topic id="M:Zhaord.Guard.ArgumentNotNull``1(System.Func{``0})" />
  <topic id="M:Zhaord.Guard.ArgumentNotNull(System.Object,System.String)" />
  <topic id="M:Zhaord.Guard.ArgumentNotOutOfLength(System.String,System.Int32,System.String)" />
  <topic id="M:Zhaord.Guard.ArgumentNotZero``1(``0,System.String)" />
  <topic id="M:Zhaord.Guard.Arguments``2(System.Func{``0},System.Func{``1})" />
  <topic id="M:Zhaord.Guard.Arguments``3(System.Func{``0},System.Func{``1},System.Func{``2})" />
  <topic id="M:Zhaord.Guard.Arguments``4(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3})" />
  <topic id="M:Zhaord.Guard.Arguments``5(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3},System.Func{``4})" />
  <topic id="M:Zhaord.Guard.HasDefaultConstructor``1" />
  <topic id="M:Zhaord.Guard.HasDefaultConstructor(System.Type)" />
  <topic id="M:Zhaord.Guard.Implements``1(System.Type,System.String)" />
  <topic id="M:Zhaord.Guard.InheritsFrom``1(System.Type)" />
  <topic id="M:Zhaord.Guard.InheritsFrom``1(System.Type,System.String)" />
  <topic id="M:Zhaord.Guard.IsEqual``1(System.Object,System.Object,System.String)" />
  <topic id="M:Zhaord.Guard.IsSubclassOf``1(System.Type)" />
  <topic id="M:Zhaord.Guard.IsTypeOf``1(System.Object)" />
  <topic id="M:Zhaord.Guard.IsTypeOf``1(System.Object,System.String)" />
  <topic id="M:Zhaord.Guard.NotNull``1(System.Func{``0})" />
  <topic id="M:Zhaord.Guard.PagingArgsValid(System.Int32,System.Int32,System.String,System.String)" />
  <topic id="T:Zhaord.IApplicationServiceContract" />
  <topic id="T:Zhaord.ICloneable`1" />
  <topic id="Methods.T:Zhaord.ICloneable`1" />
  <topic id="M:Zhaord.ICloneable`1.Clone" />
  <topic id="T:Zhaord.IMergedData" />
  <topic id="Methods.T:Zhaord.IMergedData" />
  <topic id="Properties.T:Zhaord.IMergedData" />
  <topic id="P:Zhaord.IMergedData.MergedDataIgnore" />
  <topic id="P:Zhaord.IMergedData.MergedDataValues" />
  <topic id="T:Zhaord.IOrdered" />
  <topic id="Properties.T:Zhaord.IOrdered" />
  <topic id="P:Zhaord.IOrdered.Ordinal" />
  <topic id="T:Zhaord.IStartupTask" />
  <topic id="Methods.T:Zhaord.IStartupTask" />
  <topic id="Properties.T:Zhaord.IStartupTask" />
  <topic id="M:Zhaord.IStartupTask.Execute" />
  <topic id="P:Zhaord.IStartupTask.Order" />
  <topic id="T:Zhaord.IWorkContext" />
  <topic id="Methods.T:Zhaord.IWorkContext" />
  <topic id="Properties.T:Zhaord.IWorkContext" />
  <topic id="P:Zhaord.IWorkContext.CurrentCustomerId" />
  <topic id="M:Zhaord.IWorkContext.GetDefaultLanguageSeoCode(System.Int32)" />
  <topic id="P:Zhaord.IWorkContext.IsAdmin" />
  <topic id="M:Zhaord.IWorkContext.IsPublishedLanguage(System.String,System.Int32)" />
  <topic id="P:Zhaord.IWorkContext.OriginalCustomerIdIfImpersonated" />
  <topic id="P:Zhaord.IWorkContext.WorkingLanguageId" />
  <topic id="T:Zhaord.OperationResult" />
  <topic id="Methods.T:Zhaord.OperationResult" />
  <topic id="Properties.T:Zhaord.OperationResult" />
  <topic id="Overload:Zhaord.OperationResult.#ctor" />
  <topic id="M:Zhaord.OperationResult.#ctor(Zhaord.OperationResultType)" />
  <topic id="M:Zhaord.OperationResult.#ctor(Zhaord.OperationResultType,System.String)" />
  <topic id="M:Zhaord.OperationResult.#ctor(Zhaord.OperationResultType,System.String,System.Object)" />
  <topic id="M:Zhaord.OperationResult.#ctor(Zhaord.OperationResultType,System.String,System.String)" />
  <topic id="M:Zhaord.OperationResult.#ctor(Zhaord.OperationResultType,System.String,System.String,System.Object)" />
  <topic id="P:Zhaord.OperationResult.AppendData" />
  <topic id="P:Zhaord.OperationResult.LogMessage" />
  <topic id="P:Zhaord.OperationResult.Message" />
  <topic id="P:Zhaord.OperationResult.ResultType" />
  <topic id="T:Zhaord.OperationResultType" />
  <topic id="T:Zhaord.ZhaordException" />
  <topic id="Methods.T:Zhaord.ZhaordException" />
  <topic id="Properties.T:Zhaord.ZhaordException" />
  <topic id="Events.T:Zhaord.ZhaordException" />
  <topic id="Overload:Zhaord.ZhaordException.#ctor" />
  <topic id="M:Zhaord.ZhaordException.#ctor" />
  <topic id="M:Zhaord.ZhaordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
  <topic id="M:Zhaord.ZhaordException.#ctor(System.String)" />
  <topic id="M:Zhaord.ZhaordException.#ctor(System.String,System.Exception)" />
  <topic id="M:Zhaord.ZhaordException.#ctor(System.String,System.Object[])" />
  <topic id="T:Zhaord.ZhaordValidationException" />
  <topic id="Methods.T:Zhaord.ZhaordValidationException" />
  <topic id="Properties.T:Zhaord.ZhaordValidationException" />
  <topic id="Events.T:Zhaord.ZhaordValidationException" />
  <topic id="Overload:Zhaord.ZhaordValidationException.#ctor" />
  <topic id="M:Zhaord.ZhaordValidationException.#ctor" />
  <topic id="M:Zhaord.ZhaordValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
  <topic id="M:Zhaord.ZhaordValidationException.#ctor(System.String)" />
  <topic id="M:Zhaord.ZhaordValidationException.#ctor(System.String,System.Collections.Generic.List{System.ComponentModel.DataAnnotations.ValidationResult})" />
  <topic id="M:Zhaord.ZhaordValidationException.#ctor(System.String,System.Exception)" />
  <topic id="P:Zhaord.ZhaordValidationException.ValidationErrors" />
  <topic id="N:Zhaord.Attributes" />
  <topic id="T:Zhaord.Attributes.EnumDescriptionAttribute" />
  <topic id="Methods.T:Zhaord.Attributes.EnumDescriptionAttribute" />
  <topic id="Properties.T:Zhaord.Attributes.EnumDescriptionAttribute" />
  <topic id="M:Zhaord.Attributes.EnumDescriptionAttribute.#ctor(System.String)" />
  <topic id="P:Zhaord.Attributes.EnumDescriptionAttribute.Description" />
  <topic id="T:Zhaord.Attributes.EnumFriendlyNameAttribute" />
  <topic id="Methods.T:Zhaord.Attributes.EnumFriendlyNameAttribute" />
  <topic id="Properties.T:Zhaord.Attributes.EnumFriendlyNameAttribute" />
  <topic id="M:Zhaord.Attributes.EnumFriendlyNameAttribute.#ctor(System.String)" />
  <topic id="P:Zhaord.Attributes.EnumFriendlyNameAttribute.FriendlyName" />
  <topic id="T:Zhaord.Attributes.ObjectSignatureAttribute" />
  <topic id="Methods.T:Zhaord.Attributes.ObjectSignatureAttribute" />
  <topic id="Properties.T:Zhaord.Attributes.ObjectSignatureAttribute" />
  <topic id="M:Zhaord.Attributes.ObjectSignatureAttribute.#ctor" />
  <topic id="N:Zhaord.Caching" />
  <topic id="T:Zhaord.Caching.AspNetCache" />
  <topic id="Methods.T:Zhaord.Caching.AspNetCache" />
  <topic id="Properties.T:Zhaord.Caching.AspNetCache" />
  <topic id="M:Zhaord.Caching.AspNetCache.#ctor" />
  <topic id="M:Zhaord.Caching.AspNetCache.BuildKey(System.String)" />
  <topic id="M:Zhaord.Caching.AspNetCache.Contains(System.String)" />
  <topic id="P:Zhaord.Caching.AspNetCache.Entries" />
  <topic id="M:Zhaord.Caching.AspNetCache.Get(System.String)" />
  <topic id="P:Zhaord.Caching.AspNetCache.IsSingleton" />
  <topic id="M:Zhaord.Caching.AspNetCache.Remove(System.String)" />
  <topic id="M:Zhaord.Caching.AspNetCache.Set(System.String,System.Object,System.Nullable{System.Int32})" />
  <topic id="T:Zhaord.Caching.CacheManager`1" />
  <topic id="Methods.T:Zhaord.Caching.CacheManager`1" />
  <topic id="M:Zhaord.Caching.CacheManager`1.#ctor(System.Func{System.Type,Zhaord.Caching.ICache})" />
  <topic id="M:Zhaord.Caching.CacheManager`1.Clear" />
  <topic id="M:Zhaord.Caching.CacheManager`1.Contains(System.String)" />
  <topic id="M:Zhaord.Caching.CacheManager`1.EnterWriteLock" />
  <topic id="M:Zhaord.Caching.CacheManager`1.Get``1(System.String,System.Func{``0},System.Nullable{System.Int32})" />
  <topic id="M:Zhaord.Caching.CacheManager`1.Remove(System.String)" />
  <topic id="M:Zhaord.Caching.CacheManager`1.RemoveByPattern(System.String)" />
  <topic id="M:Zhaord.Caching.CacheManager`1.Set(System.String,System.Object,System.Nullable{System.Int32})" />
  <topic id="T:Zhaord.Caching.CacheManagerExtensions" />
  <topic id="Methods.T:Zhaord.Caching.CacheManagerExtensions" />
  <topic id="M:Zhaord.Caching.CacheManagerExtensions.Get``1(Zhaord.Caching.ICacheManager,System.String)" />
  <topic id="T:Zhaord.Caching.ICache" />
  <topic id="Methods.T:Zhaord.Caching.ICache" />
  <topic id="Properties.T:Zhaord.Caching.ICache" />
  <topic id="M:Zhaord.Caching.ICache.Contains(System.String)" />
  <topic id="P:Zhaord.Caching.ICache.Entries" />
  <topic id="M:Zhaord.Caching.ICache.Get(System.String)" />
  <topic id="P:Zhaord.Caching.ICache.IsSingleton" />
  <topic id="M:Zhaord.Caching.ICache.Remove(System.String)" />
  <topic id="M:Zhaord.Caching.ICache.Set(System.String,System.Object,System.Nullable{System.Int32})" />
  <topic id="T:Zhaord.Caching.ICacheManager" />
  <topic id="Methods.T:Zhaord.Caching.ICacheManager" />
  <topic id="M:Zhaord.Caching.ICacheManager.Clear" />
  <topic id="M:Zhaord.Caching.ICacheManager.Contains(System.String)" />
  <topic id="M:Zhaord.Caching.ICacheManager.EnterWriteLock" />
  <topic id="M:Zhaord.Caching.ICacheManager.Get``1(System.String,System.Func{``0},System.Nullable{System.Int32})" />
  <topic id="M:Zhaord.Caching.ICacheManager.Remove(System.String)" />
  <topic id="M:Zhaord.Caching.ICacheManager.RemoveByPattern(System.String)" />
  <topic id="M:Zhaord.Caching.ICacheManager.Set(System.String,System.Object,System.Nullable{System.Int32})" />
  <topic id="T:Zhaord.Caching.NullCache" />
  <topic id="Methods.T:Zhaord.Caching.NullCache" />
  <topic id="Properties.T:Zhaord.Caching.NullCache" />
  <topic id="M:Zhaord.Caching.NullCache.#ctor" />
  <topic id="M:Zhaord.Caching.NullCache.Clear" />
  <topic id="M:Zhaord.Caching.NullCache.Contains(System.String)" />
  <topic id="M:Zhaord.Caching.NullCache.EnterWriteLock" />
  <topic id="M:Zhaord.Caching.NullCache.Get``1(System.String,System.Func{``0},System.Nullable{System.Int32})" />
  <topic id="P:Zhaord.Caching.NullCache.Instance" />
  <topic id="M:Zhaord.Caching.NullCache.Remove(System.String)" />
  <topic id="M:Zhaord.Caching.NullCache.RemoveByPattern(System.String)" />
  <topic id="M:Zhaord.Caching.NullCache.Set(System.String,System.Object,System.Nullable{System.Int32})" />
  <topic id="T:Zhaord.Caching.RequestCache" />
  <topic id="Methods.T:Zhaord.Caching.RequestCache" />
  <topic id="Properties.T:Zhaord.Caching.RequestCache" />
  <topic id="M:Zhaord.Caching.RequestCache.#ctor(System.Web.HttpContextBase)" />
  <topic id="M:Zhaord.Caching.RequestCache.Contains(System.String)" />
  <topic id="P:Zhaord.Caching.RequestCache.Entries" />
  <topic id="M:Zhaord.Caching.RequestCache.Get(System.String)" />
  <topic id="M:Zhaord.Caching.RequestCache.GetItems" />
  <topic id="P:Zhaord.Caching.RequestCache.IsSingleton" />
  <topic id="M:Zhaord.Caching.RequestCache.Remove(System.String)" />
  <topic id="M:Zhaord.Caching.RequestCache.Set(System.String,System.Object,System.Nullable{System.Int32})" />
  <topic id="T:Zhaord.Caching.StaticCache" />
  <topic id="Methods.T:Zhaord.Caching.StaticCache" />
  <topic id="Properties.T:Zhaord.Caching.StaticCache" />
  <topic id="M:Zhaord.Caching.StaticCache.#ctor" />
  <topic id="P:Zhaord.Caching.StaticCache.Cache" />
  <topic id="M:Zhaord.Caching.StaticCache.Contains(System.String)" />
  <topic id="P:Zhaord.Caching.StaticCache.Entries" />
  <topic id="M:Zhaord.Caching.StaticCache.Get(System.String)" />
  <topic id="P:Zhaord.Caching.StaticCache.IsSingleton" />
  <topic id="M:Zhaord.Caching.StaticCache.Remove(System.String)" />
  <topic id="M:Zhaord.Caching.StaticCache.Set(System.String,System.Object,System.Nullable{System.Int32})" />
  <topic id="N:Zhaord.Collections" />
  <topic id="T:Zhaord.Collections.CyclicDependencyException" />
  <topic id="Methods.T:Zhaord.Collections.CyclicDependencyException" />
  <topic id="Properties.T:Zhaord.Collections.CyclicDependencyException" />
  <topic id="Events.T:Zhaord.Collections.CyclicDependencyException" />
  <topic id="Overload:Zhaord.Collections.CyclicDependencyException.#ctor" />
  <topic id="M:Zhaord.Collections.CyclicDependencyException.#ctor" />
  <topic id="M:Zhaord.Collections.CyclicDependencyException.#ctor(System.String)" />
  <topic id="T:Zhaord.Collections.ITopologicSortable`1" />
  <topic id="Properties.T:Zhaord.Collections.ITopologicSortable`1" />
  <topic id="P:Zhaord.Collections.ITopologicSortable`1.DependsOn" />
  <topic id="P:Zhaord.Collections.ITopologicSortable`1.Key" />
  <topic id="T:Zhaord.Collections.Multimap`2" />
  <topic id="Methods.T:Zhaord.Collections.Multimap`2" />
  <topic id="Properties.T:Zhaord.Collections.Multimap`2" />
  <topic id="Overload:Zhaord.Collections.Multimap`2.#ctor" />
  <topic id="M:Zhaord.Collections.Multimap`2.#ctor" />
  <topic id="M:Zhaord.Collections.Multimap`2.#ctor(System.Collections.Generic.IDictionary{`0,System.Collections.Generic.ICollection{`1}},System.Boolean)" />
  <topic id="M:Zhaord.Collections.Multimap`2.#ctor(System.Func{System.Collections.Generic.ICollection{`1}})" />
  <topic id="M:Zhaord.Collections.Multimap`2.Add(`0,`1)" />
  <topic id="M:Zhaord.Collections.Multimap`2.AddRange(`0,System.Collections.Generic.IEnumerable{`1})" />
  <topic id="M:Zhaord.Collections.Multimap`2.Clear" />
  <topic id="M:Zhaord.Collections.Multimap`2.ContainsKey(`0)" />
  <topic id="M:Zhaord.Collections.Multimap`2.ContainsValue(`0,`1)" />
  <topic id="P:Zhaord.Collections.Multimap`2.Count" />
  <topic id="M:Zhaord.Collections.Multimap`2.CreateFromLookup(System.Linq.ILookup{`0,`1})" />
  <topic id="M:Zhaord.Collections.Multimap`2.Find(`0,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})" />
  <topic id="M:Zhaord.Collections.Multimap`2.GetEnumerator" />
  <topic id="P:Zhaord.Collections.Multimap`2.Item(`0)" />
  <topic id="P:Zhaord.Collections.Multimap`2.Keys" />
  <topic id="M:Zhaord.Collections.Multimap`2.Remove(`0,`1)" />
  <topic id="M:Zhaord.Collections.Multimap`2.RemoveAll(`0)" />
  <topic id="M:Zhaord.Collections.Multimap`2.ThreadSafe" />
  <topic id="P:Zhaord.Collections.Multimap`2.TotalValueCount" />
  <topic id="P:Zhaord.Collections.Multimap`2.Values" />
  <topic id="T:Zhaord.Collections.QueryString" />
  <topic id="Methods.T:Zhaord.Collections.QueryString" />
  <topic id="Properties.T:Zhaord.Collections.QueryString" />
  <topic id="Overload:Zhaord.Collections.QueryString.Add" />
  <topic id="Overload:Zhaord.Collections.QueryString.#ctor" />
  <topic id="Overload:Zhaord.Collections.QueryString.Item" />
  <topic id="M:Zhaord.Collections.QueryString.#ctor" />
  <topic id="M:Zhaord.Collections.QueryString.#ctor(System.String)" />
  <topic id="M:Zhaord.Collections.QueryString.Add(System.String,System.String)" />
  <topic id="M:Zhaord.Collections.QueryString.Add(System.String,System.String,System.Boolean)" />
  <topic id="M:Zhaord.Collections.QueryString.Contains(System.String)" />
  <topic id="P:Zhaord.Collections.QueryString.Current" />
  <topic id="M:Zhaord.Collections.QueryString.ExtractQuerystring(System.String)" />
  <topic id="M:Zhaord.Collections.QueryString.FillFromString(System.String)" />
  <topic id="M:Zhaord.Collections.QueryString.FromCurrent" />
  <topic id="P:Zhaord.Collections.QueryString.Item(System.Int32)" />
  <topic id="P:Zhaord.Collections.QueryString.Item(System.String)" />
  <topic id="M:Zhaord.Collections.QueryString.Remove(System.String)" />
  <topic id="M:Zhaord.Collections.QueryString.Reset" />
  <topic id="M:Zhaord.Collections.QueryString.ToString" />
  <topic id="T:Zhaord.Collections.TopologicalSortExtensions" />
  <topic id="Methods.T:Zhaord.Collections.TopologicalSortExtensions" />
  <topic id="Overload:Zhaord.Collections.TopologicalSortExtensions.SortIndexesTopological" />
  <topic id="Overload:Zhaord.Collections.TopologicalSortExtensions.SortTopological" />
  <topic id="M:Zhaord.Collections.TopologicalSortExtensions.SortIndexesTopological``1(Zhaord.Collections.ITopologicSortable{``0}[])" />
  <topic id="M:Zhaord.Collections.TopologicalSortExtensions.SortIndexesTopological``1(Zhaord.Collections.ITopologicSortable{``0}[],System.Collections.Generic.IEqualityComparer{``0})" />
  <topic id="M:Zhaord.Collections.TopologicalSortExtensions.SortTopological``1(Zhaord.Collections.ITopologicSortable{``0}[])" />
  <topic id="M:Zhaord.Collections.TopologicalSortExtensions.SortTopological``1(Zhaord.Collections.ITopologicSortable{``0}[],System.Collections.Generic.IEqualityComparer{``0})" />
  <topic id="T:Zhaord.Collections.TreeNode`1" />
  <topic id="Methods.T:Zhaord.Collections.TreeNode`1" />
  <topic id="Properties.T:Zhaord.Collections.TreeNode`1" />
  <topic id="Overload:Zhaord.Collections.TreeNode`1.Append" />
  <topic id="Overload:Zhaord.Collections.TreeNode`1.AppendMany" />
  <topic id="Overload:Zhaord.Collections.TreeNode`1.Clone" />
  <topic id="Overload:Zhaord.Collections.TreeNode`1.Flatten" />
  <topic id="M:Zhaord.Collections.TreeNode`1.#ctor(`0)" />
  <topic id="M:Zhaord.Collections.TreeNode`1.Append(`0)" />
  <topic id="M:Zhaord.Collections.TreeNode`1.Append(Zhaord.Collections.TreeNode{`0},System.Boolean)" />
  <topic id="M:Zhaord.Collections.TreeNode`1.AppendChildrenOf(Zhaord.Collections.TreeNode{`0})" />
  <topic id="M:Zhaord.Collections.TreeNode`1.AppendMany(System.Collections.Generic.IEnumerable{`0})" />
  <topic id="M:Zhaord.Collections.TreeNode`1.AppendMany(System.Collections.Generic.IEnumerable{Zhaord.Collections.TreeNode{`0}})" />
  <topic id="M:Zhaord.Collections.TreeNode`1.AppendMany(`0[])" />
  <topic id="P:Zhaord.Collections.TreeNode`1.Children" />
  <topic id="M:Zhaord.Collections.TreeNode`1.Clear" />
  <topic id="M:Zhaord.Collections.TreeNode`1.Clone" />
  <topic id="M:Zhaord.Collections.TreeNode`1.Clone(System.Boolean)" />
  <topic id="P:Zhaord.Collections.TreeNode`1.Depth" />
  <topic id="M:Zhaord.Collections.TreeNode`1.Find(`0)" />
  <topic id="P:Zhaord.Collections.TreeNode`1.FirstChild" />
  <topic id="M:Zhaord.Collections.TreeNode`1.Flatten(System.Boolean)" />
  <topic id="M:Zhaord.Collections.TreeNode`1.Flatten(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)" />
  <topic id="P:Zhaord.Collections.TreeNode`1.HasChildren" />
  <topic id="M:Zhaord.Collections.TreeNode`1.InsertAfter(Zhaord.Collections.TreeNode{`0})" />
  <topic id="M:Zhaord.Collections.TreeNode`1.InsertBefore(Zhaord.Collections.TreeNode{`0})" />
  <topic id="P:Zhaord.Collections.TreeNode`1.IsLeaf" />
  <topic id="P:Zhaord.Collections.TreeNode`1.IsRoot" />
  <topic id="P:Zhaord.Collections.TreeNode`1.Item(System.Int32)" />
  <topic id="P:Zhaord.Collections.TreeNode`1.LastChild" />
  <topic id="P:Zhaord.Collections.TreeNode`1.LeafNodes" />
  <topic id="P:Zhaord.Collections.TreeNode`1.Next" />
  <topic id="P:Zhaord.Collections.TreeNode`1.NonLeafNodes" />
  <topic id="P:Zhaord.Collections.TreeNode`1.Parent" />
  <topic id="M:Zhaord.Collections.TreeNode`1.Prepend(`0)" />
  <topic id="P:Zhaord.Collections.TreeNode`1.Previous" />
  <topic id="M:Zhaord.Collections.TreeNode`1.RemoveNode(Zhaord.Collections.TreeNode{`0})" />
  <topic id="P:Zhaord.Collections.TreeNode`1.Root" />
  <topic id="M:Zhaord.Collections.TreeNode`1.SelectNode(System.Linq.Expressions.Expression{System.Func{Zhaord.Collections.TreeNode{`0},System.Boolean}})" />
  <topic id="M:Zhaord.Collections.TreeNode`1.SelectNodes(System.Linq.Expressions.Expression{System.Func{Zhaord.Collections.TreeNode{`0},System.Boolean}})" />
  <topic id="M:Zhaord.Collections.TreeNode`1.Traverse(System.Action{`0})" />
  <topic id="M:Zhaord.Collections.TreeNode`1.TraverseTree(System.Action{Zhaord.Collections.TreeNode{`0}})" />
  <topic id="P:Zhaord.Collections.TreeNode`1.Value" />
  <topic id="N:Zhaord.Configuration" />
  <topic id="T:Zhaord.Configuration.ISettings" />
  <topic id="T:Zhaord.Configuration.JsonPersistAttribute" />
  <topic id="Methods.T:Zhaord.Configuration.JsonPersistAttribute" />
  <topic id="Properties.T:Zhaord.Configuration.JsonPersistAttribute" />
  <topic id="M:Zhaord.Configuration.JsonPersistAttribute.#ctor" />
  <topic id="N:Zhaord.Data" />
  <topic id="T:Zhaord.Data.DataSettings" />
  <topic id="Methods.T:Zhaord.Data.DataSettings" />
  <topic id="Properties.T:Zhaord.Data.DataSettings" />
  <topic id="Fields.T:Zhaord.Data.DataSettings" />
  <topic id="P:Zhaord.Data.DataSettings.AppVersion" />
  <topic id="P:Zhaord.Data.DataSettings.Current" />
  <topic id="M:Zhaord.Data.DataSettings.DatabaseIsInstalled" />
  <topic id="P:Zhaord.Data.DataSettings.DataConnectionString" />
  <topic id="P:Zhaord.Data.DataSettings.DataProvider" />
  <topic id="M:Zhaord.Data.DataSettings.Delete" />
  <topic id="F:Zhaord.Data.DataSettings.FileName" />
  <topic id="P:Zhaord.Data.DataSettings.IsSqlServer" />
  <topic id="M:Zhaord.Data.DataSettings.IsValid" />
  <topic id="M:Zhaord.Data.DataSettings.Load" />
  <topic id="M:Zhaord.Data.DataSettings.ParseSettings(System.String)" />
  <topic id="P:Zhaord.Data.DataSettings.ProviderFriendlyName" />
  <topic id="P:Zhaord.Data.DataSettings.ProviderInvariantName" />
  <topic id="P:Zhaord.Data.DataSettings.RawDataSettings" />
  <topic id="M:Zhaord.Data.DataSettings.Reload" />
  <topic id="M:Zhaord.Data.DataSettings.Reset" />
  <topic id="M:Zhaord.Data.DataSettings.Save" />
  <topic id="F:Zhaord.Data.DataSettings.Separator" />
  <topic id="M:Zhaord.Data.DataSettings.SerializeSettings" />
  <topic id="M:Zhaord.Data.DataSettings.SetDefaultFactory(System.Func{Zhaord.Data.DataSettings})" />
  <topic id="T:Zhaord.Data.IActivatable" />
  <topic id="Properties.T:Zhaord.Data.IActivatable" />
  <topic id="P:Zhaord.Data.IActivatable.IsActive" />
  <topic id="T:Zhaord.Data.ISoftDeletable" />
  <topic id="Properties.T:Zhaord.Data.ISoftDeletable" />
  <topic id="P:Zhaord.Data.ISoftDeletable.Deleted" />
  <topic id="N:Zhaord.Data.Notifies" />
  <topic id="T:Zhaord.Data.Notifies.INotifier" />
  <topic id="Methods.T:Zhaord.Data.Notifies.INotifier" />
  <topic id="Properties.T:Zhaord.Data.Notifies.INotifier" />
  <topic id="M:Zhaord.Data.Notifies.INotifier.Add(Zhaord.Data.Notifies.NotifyType,Zhaord.Localization.LocalizedString,System.Boolean)" />
  <topic id="P:Zhaord.Data.Notifies.INotifier.Entries" />
  <topic id="T:Zhaord.Data.Notifies.Notifier" />
  <topic id="Methods.T:Zhaord.Data.Notifies.Notifier" />
  <topic id="Properties.T:Zhaord.Data.Notifies.Notifier" />
  <topic id="M:Zhaord.Data.Notifies.Notifier.#ctor" />
  <topic id="M:Zhaord.Data.Notifies.Notifier.Add(Zhaord.Data.Notifies.NotifyType,Zhaord.Localization.LocalizedString,System.Boolean)" />
  <topic id="P:Zhaord.Data.Notifies.Notifier.Entries" />
  <topic id="T:Zhaord.Data.Notifies.NotifierExtension" />
  <topic id="Methods.T:Zhaord.Data.Notifies.NotifierExtension" />
  <topic id="M:Zhaord.Data.Notifies.NotifierExtension.Error(Zhaord.Data.Notifies.INotifier,Zhaord.Localization.LocalizedString,System.Boolean)" />
  <topic id="M:Zhaord.Data.Notifies.NotifierExtension.Information(Zhaord.Data.Notifies.INotifier,Zhaord.Localization.LocalizedString,System.Boolean)" />
  <topic id="M:Zhaord.Data.Notifies.NotifierExtension.Success(Zhaord.Data.Notifies.INotifier,Zhaord.Localization.LocalizedString,System.Boolean)" />
  <topic id="M:Zhaord.Data.Notifies.NotifierExtension.Warning(Zhaord.Data.Notifies.INotifier,Zhaord.Localization.LocalizedString,System.Boolean)" />
  <topic id="T:Zhaord.Data.Notifies.NotifyEntry" />
  <topic id="Methods.T:Zhaord.Data.Notifies.NotifyEntry" />
  <topic id="Properties.T:Zhaord.Data.Notifies.NotifyEntry" />
  <topic id="M:Zhaord.Data.Notifies.NotifyEntry.#ctor" />
  <topic id="P:Zhaord.Data.Notifies.NotifyEntry.Durable" />
  <topic id="P:Zhaord.Data.Notifies.NotifyEntry.Message" />
  <topic id="P:Zhaord.Data.Notifies.NotifyEntry.Type" />
  <topic id="T:Zhaord.Data.Notifies.NotifyType" />
  <topic id="N:Zhaord.DependencyManagement" />
  <topic id="T:Zhaord.DependencyManagement.ContainerManager" />
  <topic id="Methods.T:Zhaord.DependencyManagement.ContainerManager" />
  <topic id="Properties.T:Zhaord.DependencyManagement.ContainerManager" />
  <topic id="Overload:Zhaord.DependencyManagement.ContainerManager.Resolve" />
  <topic id="Overload:Zhaord.DependencyManagement.ContainerManager.ResolveNamed" />
  <topic id="Overload:Zhaord.DependencyManagement.ContainerManager.ResolveUnregistered" />
  <topic id="Overload:Zhaord.DependencyManagement.ContainerManager.TryResolve" />
  <topic id="M:Zhaord.DependencyManagement.ContainerManager.#ctor(Autofac.IContainer)" />
  <topic id="P:Zhaord.DependencyManagement.ContainerManager.Container" />
  <topic id="M:Zhaord.DependencyManagement.ContainerManager.InjectProperties``1(``0,Autofac.ILifetimeScope)" />
  <topic id="M:Zhaord.DependencyManagement.ContainerManager.InjectUnsetProperties``1(``0,Autofac.ILifetimeScope)" />
  <topic id="M:Zhaord.DependencyManagement.ContainerManager.IsRegistered(System.Type,Autofac.ILifetimeScope)" />
  <topic id="M:Zhaord.DependencyManagement.ContainerManager.Resolve``1(System.String,Autofac.ILifetimeScope)" />
  <topic id="M:Zhaord.DependencyManagement.ContainerManager.Resolve(System.Type,Autofac.ILifetimeScope)" />
  <topic id="M:Zhaord.DependencyManagement.ContainerManager.ResolveAll``1(System.String,Autofac.ILifetimeScope)" />
  <topic id="M:Zhaord.DependencyManagement.ContainerManager.ResolveNamed``1(System.String,Autofac.ILifetimeScope)" />
  <topic id="M:Zhaord.DependencyManagement.ContainerManager.ResolveNamed(System.String,System.Type,Autofac.ILifetimeScope)" />
  <topic id="M:Zhaord.DependencyManagement.ContainerManager.ResolveOptional(System.Type,Autofac.ILifetimeScope)" />
  <topic id="M:Zhaord.DependencyManagement.ContainerManager.ResolveUnregistered``1(Autofac.ILifetimeScope)" />
  <topic id="M:Zhaord.DependencyManagement.ContainerManager.ResolveUnregistered(System.Type,Autofac.ILifetimeScope)" />
  <topic id="M:Zhaord.DependencyManagement.ContainerManager.Scope" />
  <topic id="M:Zhaord.DependencyManagement.ContainerManager.TryResolve``1(Autofac.ILifetimeScope,``0@)" />
  <topic id="M:Zhaord.DependencyManagement.ContainerManager.TryResolve(System.Type,Autofac.ILifetimeScope,System.Object@)" />
  <topic id="T:Zhaord.DependencyManagement.ContainerManagerExtensions" />
  <topic id="Methods.T:Zhaord.DependencyManagement.ContainerManagerExtensions" />
  <topic id="M:Zhaord.DependencyManagement.ContainerManagerExtensions.WithAspNetCache``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})" />
  <topic id="M:Zhaord.DependencyManagement.ContainerManagerExtensions.WithNullCache``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})" />
  <topic id="M:Zhaord.DependencyManagement.ContainerManagerExtensions.WithStaticCache``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})" />
  <topic id="T:Zhaord.DependencyManagement.IDependencyRegistrar" />
  <topic id="Methods.T:Zhaord.DependencyManagement.IDependencyRegistrar" />
  <topic id="Properties.T:Zhaord.DependencyManagement.IDependencyRegistrar" />
  <topic id="P:Zhaord.DependencyManagement.IDependencyRegistrar.Order" />
  <topic id="M:Zhaord.DependencyManagement.IDependencyRegistrar.Register(Autofac.ContainerBuilder,Zhaord.TypeFinders.ITypeFinder,System.Boolean)" />
  <topic id="N:Zhaord.Engines" />
  <topic id="T:Zhaord.Engines.Engine" />
  <topic id="Methods.T:Zhaord.Engines.Engine" />
  <topic id="Properties.T:Zhaord.Engines.Engine" />
  <topic id="Overload:Zhaord.Engines.Engine.Resolve" />
  <topic id="M:Zhaord.Engines.Engine.#ctor" />
  <topic id="P:Zhaord.Engines.Engine.Container" />
  <topic id="P:Zhaord.Engines.Engine.ContainerManager" />
  <topic id="M:Zhaord.Engines.Engine.CreateDependencyResolver(Autofac.IContainer)" />
  <topic id="M:Zhaord.Engines.Engine.CreateTypeFinder" />
  <topic id="M:Zhaord.Engines.Engine.Initialize" />
  <topic id="M:Zhaord.Engines.Engine.RegisterDependencies" />
  <topic id="M:Zhaord.Engines.Engine.Resolve``1(System.String)" />
  <topic id="M:Zhaord.Engines.Engine.Resolve(System.Type,System.String)" />
  <topic id="M:Zhaord.Engines.Engine.ResolveAll``1" />
  <topic id="M:Zhaord.Engines.Engine.RunStartupTasks" />
  <topic id="T:Zhaord.Engines.EngineContext" />
  <topic id="Methods.T:Zhaord.Engines.EngineContext" />
  <topic id="Properties.T:Zhaord.Engines.EngineContext" />
  <topic id="M:Zhaord.Engines.EngineContext.#ctor" />
  <topic id="M:Zhaord.Engines.EngineContext.CreateEngineInstance" />
  <topic id="P:Zhaord.Engines.EngineContext.Current" />
  <topic id="M:Zhaord.Engines.EngineContext.Initialize(System.Boolean,Zhaord.Engines.IEngine)" />
  <topic id="M:Zhaord.Engines.EngineContext.Replace(Zhaord.Engines.IEngine)" />
  <topic id="T:Zhaord.Engines.IEngine" />
  <topic id="Methods.T:Zhaord.Engines.IEngine" />
  <topic id="Properties.T:Zhaord.Engines.IEngine" />
  <topic id="Overload:Zhaord.Engines.IEngine.Resolve" />
  <topic id="P:Zhaord.Engines.IEngine.ContainerManager" />
  <topic id="M:Zhaord.Engines.IEngine.Initialize" />
  <topic id="M:Zhaord.Engines.IEngine.Resolve``1(System.String)" />
  <topic id="M:Zhaord.Engines.IEngine.Resolve(System.Type,System.String)" />
  <topic id="M:Zhaord.Engines.IEngine.ResolveAll``1" />
  <topic id="N:Zhaord.Expressions" />
  <topic id="T:Zhaord.Expressions.RegularExpressions" />
  <topic id="Fields.T:Zhaord.Expressions.RegularExpressions" />
  <topic id="F:Zhaord.Expressions.RegularExpressions.IsAlpha" />
  <topic id="F:Zhaord.Expressions.RegularExpressions.IsAlphaNumeric" />
  <topic id="F:Zhaord.Expressions.RegularExpressions.IsBase64Guid" />
  <topic id="F:Zhaord.Expressions.RegularExpressions.IsBic" />
  <topic id="F:Zhaord.Expressions.RegularExpressions.IsCultureCode" />
  <topic id="F:Zhaord.Expressions.RegularExpressions.IsEmail" />
  <topic id="F:Zhaord.Expressions.RegularExpressions.IsGuid" />
  <topic id="F:Zhaord.Expressions.RegularExpressions.IsIban" />
  <topic id="F:Zhaord.Expressions.RegularExpressions.IsNotNumber" />
  <topic id="F:Zhaord.Expressions.RegularExpressions.IsNumeric" />
  <topic id="F:Zhaord.Expressions.RegularExpressions.IsPositiveInteger" />
  <topic id="F:Zhaord.Expressions.RegularExpressions.IsWebUrl" />
  <topic id="F:Zhaord.Expressions.RegularExpressions.IsYearRange" />
  <topic id="F:Zhaord.Expressions.RegularExpressions.RemoveHtml" />
  <topic id="N:Zhaord.Extensions" />
  <topic id="T:Zhaord.Extensions.CollectionExtensions" />
  <topic id="Methods.T:Zhaord.Extensions.CollectionExtensions" />
  <topic id="M:Zhaord.Extensions.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})" />
  <topic id="M:Zhaord.Extensions.CollectionExtensions.EqualsAll``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})" />
  <topic id="M:Zhaord.Extensions.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})" />
  <topic id="T:Zhaord.Extensions.ConversionExtensions" />
  <topic id="Methods.T:Zhaord.Extensions.ConversionExtensions" />
  <topic id="Overload:Zhaord.Extensions.ConversionExtensions.AsString" />
  <topic id="Overload:Zhaord.Extensions.ConversionExtensions.Convert" />
  <topic id="Overload:Zhaord.Extensions.ConversionExtensions.ToArray" />
  <topic id="Overload:Zhaord.Extensions.ConversionExtensions.ToByteArray" />
  <topic id="Overload:Zhaord.Extensions.ConversionExtensions.ToDateTime" />
  <topic id="Overload:Zhaord.Extensions.ConversionExtensions.ToDays" />
  <topic id="Overload:Zhaord.Extensions.ConversionExtensions.ToHours" />
  <topic id="Overload:Zhaord.Extensions.ConversionExtensions.ToMilliseconds" />
  <topic id="Overload:Zhaord.Extensions.ConversionExtensions.ToMinutes" />
  <topic id="Overload:Zhaord.Extensions.ConversionExtensions.ToObject" />
  <topic id="Overload:Zhaord.Extensions.ConversionExtensions.ToSeconds" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.AsString(System.Byte[])" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.AsString(System.IO.Stream)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.Convert``1(System.Object)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.Convert``1(System.Object,System.Globalization.CultureInfo)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.Convert(System.Object,System.Type)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.Convert(System.Object,System.Type,System.Globalization.CultureInfo)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.Hash(System.Byte[],System.Boolean)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToArray(System.String)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToArray(System.String,System.Char[])" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToBool(System.String,System.Boolean)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToByteArray(System.IO.Stream)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToByteArray(System.String)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToDateTime(System.String,System.Nullable{System.DateTime})" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToDateTime(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.Nullable{System.DateTime})" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToDateTime(System.String,System.String[],System.Nullable{System.DateTime})" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToDays(System.Double)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToDays(System.Int32)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToEnum``1(System.String,``0)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToFloat(System.String,System.Single)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToGuid(System.String)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToHex(System.Int32)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToHours(System.Double)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToHours(System.Int32)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToInt(System.String,System.Int32)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToKb(System.Int32)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToMb(System.Int32)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToMilliseconds(System.Double)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToMilliseconds(System.Int32)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToMinutes(System.Double)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToMinutes(System.Int32)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToObject(System.Byte[])" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToObject``1(System.Collections.Generic.IDictionary{System.String,System.Object})" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToObject(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToSeconds(System.Double)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToSeconds(System.Int32)" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToStream(System.Byte[])" />
  <topic id="M:Zhaord.Extensions.ConversionExtensions.ToVersion(System.String,System.Version)" />
  <topic id="T:Zhaord.Extensions.DateTimeExtensions" />
  <topic id="Methods.T:Zhaord.Extensions.DateTimeExtensions" />
  <topic id="Fields.T:Zhaord.Extensions.DateTimeExtensions" />
  <topic id="Overload:Zhaord.Extensions.DateTimeExtensions.AssumeUniversalTime" />
  <topic id="Overload:Zhaord.Extensions.DateTimeExtensions.ToEndOfTheDay" />
  <topic id="Overload:Zhaord.Extensions.DateTimeExtensions.ToStartOfTheDay" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.AssumeUniversalTime(System.DateTime)" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.AssumeUniversalTime(System.Nullable{System.DateTime})" />
  <topic id="F:Zhaord.Extensions.DateTimeExtensions.BeginOfEpoch" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.FromUnixTime(System.Int64)" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.GetEvenHourDate(System.Nullable{System.DateTime})" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.GetEvenMinuteDate(System.Nullable{System.DateTime})" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.GetEvenMinuteDateBefore(System.Nullable{System.DateTime})" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.GetEvenSecondDate(System.Nullable{System.DateTime})" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.GetEvenSecondDateBefore(System.Nullable{System.DateTime})" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.GetFirstDayOfMonth(System.DateTime)" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.GetLastDayOfMonth(System.DateTime)" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.GetLocalOffset(System.DateTime)" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.GetNextGivenMinuteDate(System.Nullable{System.DateTime},System.Int32)" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.GetNextGivenSecondDate(System.Nullable{System.DateTime},System.Int32)" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.GetOffset(System.DateTime,System.TimeZoneInfo)" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.IsValid(System.DateTime)" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.ToEndOfTheDay(System.DateTime)" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.ToEndOfTheDay(System.Nullable{System.DateTime})" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.ToJavaScriptTicks(System.DateTime)" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.ToLocalTime(System.Nullable{System.DateTime})" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.ToSerializationMode(System.DateTimeKind)" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.ToStartOfTheDay(System.DateTime)" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.ToStartOfTheDay(System.Nullable{System.DateTime})" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.ToUniversalTime(System.Nullable{System.DateTime})" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.ToUnixTime(System.DateTime)" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.TranslateTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)" />
  <topic id="M:Zhaord.Extensions.DateTimeExtensions.UseDaylightTime(System.TimeZoneInfo)" />
  <topic id="T:Zhaord.Extensions.DecimalExtensions" />
  <topic id="Methods.T:Zhaord.Extensions.DecimalExtensions" />
  <topic id="M:Zhaord.Extensions.DecimalExtensions.FormatInvariant(System.Decimal,System.Int32)" />
  <topic id="M:Zhaord.Extensions.DecimalExtensions.ToSmallestCurrencyUnit(System.Decimal,System.MidpointRounding)" />
  <topic id="M:Zhaord.Extensions.DecimalExtensions.ToTaxPercentage(System.Decimal,System.Decimal,System.Nullable{System.Int32})" />
  <topic id="T:Zhaord.Extensions.DictionaryExtensions" />
  <topic id="Methods.T:Zhaord.Extensions.DictionaryExtensions" />
  <topic id="Overload:Zhaord.Extensions.DictionaryExtensions.Merge" />
  <topic id="M:Zhaord.Extensions.DictionaryExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})" />
  <topic id="M:Zhaord.Extensions.DictionaryExtensions.AppendInValue(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.Object)" />
  <topic id="M:Zhaord.Extensions.DictionaryExtensions.GetValue``2(System.Collections.Generic.IDictionary{``0,System.Object},``0)" />
  <topic id="M:Zhaord.Extensions.DictionaryExtensions.Merge(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Object,System.Boolean)" />
  <topic id="M:Zhaord.Extensions.DictionaryExtensions.Merge``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1},System.Boolean)" />
  <topic id="M:Zhaord.Extensions.DictionaryExtensions.PrependInValue(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.Object)" />
  <topic id="M:Zhaord.Extensions.DictionaryExtensions.ToExpandoObject(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)" />
  <topic id="T:Zhaord.Extensions.EnumerableExtensions" />
  <topic id="Methods.T:Zhaord.Extensions.EnumerableExtensions" />
  <topic id="Overload:Zhaord.Extensions.EnumerableExtensions.Each" />
  <topic id="Overload:Zhaord.Extensions.EnumerableExtensions.OrderByOrdinal" />
  <topic id="M:Zhaord.Extensions.EnumerableExtensions.AddRange(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)" />
  <topic id="M:Zhaord.Extensions.EnumerableExtensions.AsReadOnly``1(System.Collections.Generic.IEnumerable{``0})" />
  <topic id="M:Zhaord.Extensions.EnumerableExtensions.AsSerializable``1(System.Collections.Generic.IEnumerable{``0})" />
  <topic id="M:Zhaord.Extensions.EnumerableExtensions.CastValid``1(System.Collections.IEnumerable)" />
  <topic id="M:Zhaord.Extensions.EnumerableExtensions.Chunk``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
  <topic id="M:Zhaord.Extensions.EnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})" />
  <topic id="M:Zhaord.Extensions.EnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})" />
  <topic id="M:Zhaord.Extensions.EnumerableExtensions.OrderByOrdinal``1(System.Collections.Generic.IEnumerable{``0})" />
  <topic id="M:Zhaord.Extensions.EnumerableExtensions.OrderByOrdinal``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)" />
  <topic id="M:Zhaord.Extensions.EnumerableExtensions.ToMultimap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
  <topic id="T:Zhaord.Extensions.EnumExtensions" />
  <topic id="Methods.T:Zhaord.Extensions.EnumExtensions" />
  <topic id="M:Zhaord.Extensions.EnumExtensions.GetDescription(System.Enum)" />
  <topic id="M:Zhaord.Extensions.EnumExtensions.GetFriendlyName(System.Enum)" />
  <topic id="M:Zhaord.Extensions.EnumExtensions.IsSet``1(``0,``0)" />
  <topic id="T:Zhaord.Extensions.IoExtensions" />
  <topic id="Methods.T:Zhaord.Extensions.IoExtensions" />
  <topic id="M:Zhaord.Extensions.IoExtensions.IsFileLocked(System.IO.FileInfo)" />
  <topic id="T:Zhaord.Extensions.LinqExtensions" />
  <topic id="Methods.T:Zhaord.Extensions.LinqExtensions" />
  <topic id="M:Zhaord.Extensions.LinqExtensions.ExtractFieldInfo(System.Linq.Expressions.LambdaExpression)" />
  <topic id="M:Zhaord.Extensions.LinqExtensions.ExtractMemberInfo(System.Linq.Expressions.LambdaExpression)" />
  <topic id="M:Zhaord.Extensions.LinqExtensions.ExtractPropertyInfo(System.Linq.Expressions.LambdaExpression)" />
  <topic id="T:Zhaord.Extensions.ListExtensions" />
  <topic id="Methods.T:Zhaord.Extensions.ListExtensions" />
  <topic id="Overload:Zhaord.Extensions.ListExtensions.Slice" />
  <topic id="Overload:Zhaord.Extensions.ListExtensions.ToSeparatedString" />
  <topic id="M:Zhaord.Extensions.ListExtensions.Slice``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Nullable{System.Int32})" />
  <topic id="M:Zhaord.Extensions.ListExtensions.Slice``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})" />
  <topic id="M:Zhaord.Extensions.ListExtensions.ToSeparatedString``1(System.Collections.Generic.IList{``0})" />
  <topic id="M:Zhaord.Extensions.ListExtensions.ToSeparatedString``1(System.Collections.Generic.IList{``0},System.String)" />
  <topic id="T:Zhaord.Extensions.MiscExtensions" />
  <topic id="Methods.T:Zhaord.Extensions.MiscExtensions" />
  <topic id="M:Zhaord.Extensions.MiscExtensions.CountExecute(System.Data.OleDb.OleDbConnection,System.String)" />
  <topic id="M:Zhaord.Extensions.MiscExtensions.Dump(System.Exception)" />
  <topic id="M:Zhaord.Extensions.MiscExtensions.GetDataType(System.Data.DataTable,System.String)" />
  <topic id="M:Zhaord.Extensions.MiscExtensions.GetMergedDataValue``1(Zhaord.IMergedData,System.String,``0)" />
  <topic id="M:Zhaord.Extensions.MiscExtensions.Grow(System.Text.StringBuilder,System.String,System.String)" />
  <topic id="M:Zhaord.Extensions.MiscExtensions.HasColumn(System.Data.DataView,System.String)" />
  <topic id="M:Zhaord.Extensions.MiscExtensions.IsEqual(System.ComponentModel.TypeConverter,System.String,System.Object)" />
  <topic id="M:Zhaord.Extensions.MiscExtensions.IsNullOrDefault``1(System.Nullable{``0})" />
  <topic id="M:Zhaord.Extensions.MiscExtensions.SafeConvert(System.ComponentModel.TypeConverter,System.String)" />
  <topic id="M:Zhaord.Extensions.MiscExtensions.SafeGet(System.String[],System.Int32)" />
  <topic id="M:Zhaord.Extensions.MiscExtensions.ToAllMessages(System.Exception)" />
  <topic id="M:Zhaord.Extensions.MiscExtensions.ToElapsedMinutes(System.Diagnostics.Stopwatch)" />
  <topic id="M:Zhaord.Extensions.MiscExtensions.ToElapsedSeconds(System.Diagnostics.Stopwatch)" />
  <topic id="M:Zhaord.Extensions.MiscExtensions.ToHexString(System.Byte[],System.Int32)" />
  <topic id="T:Zhaord.Extensions.StreamExtensions" />
  <topic id="Methods.T:Zhaord.Extensions.StreamExtensions" />
  <topic id="M:Zhaord.Extensions.StreamExtensions.ContentsEqual(System.IO.Stream,System.IO.Stream)" />
  <topic id="M:Zhaord.Extensions.StreamExtensions.ToFile(System.IO.Stream,System.String)" />
  <topic id="T:Zhaord.Extensions.StringExtensions" />
  <topic id="Methods.T:Zhaord.Extensions.StringExtensions" />
  <topic id="Fields.T:Zhaord.Extensions.StringExtensions" />
  <topic id="Overload:Zhaord.Extensions.StringExtensions.EncodeJsString" />
  <topic id="Overload:Zhaord.Extensions.StringExtensions.FormatWith" />
  <topic id="Overload:Zhaord.Extensions.StringExtensions.Indent" />
  <topic id="Overload:Zhaord.Extensions.StringExtensions.IsEnclosedIn" />
  <topic id="Overload:Zhaord.Extensions.StringExtensions.IsMatch" />
  <topic id="Overload:Zhaord.Extensions.StringExtensions.RemoveEncloser" />
  <topic id="Overload:Zhaord.Extensions.StringExtensions.RemoveHtml" />
  <topic id="M:Zhaord.Extensions.StringExtensions.AttributeEncode(System.String)" />
  <topic id="F:Zhaord.Extensions.StringExtensions.CarriageReturn" />
  <topic id="F:Zhaord.Extensions.StringExtensions.CarriageReturnLineFeed" />
  <topic id="M:Zhaord.Extensions.StringExtensions.ContainsWhiteSpace(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.Dump(System.String,System.Boolean)" />
  <topic id="F:Zhaord.Extensions.StringExtensions.Empty" />
  <topic id="M:Zhaord.Extensions.StringExtensions.EmptyNull(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.EncodeJsString(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.EncodeJsString(System.String,System.Char,System.Boolean)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.EnsureEndsWith(System.String,System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.EnsureNumericOnly(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.EnsureStartsWith(System.String,System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.FormatCurrent(System.String,System.Object[])" />
  <topic id="M:Zhaord.Extensions.StringExtensions.FormatCurrentUI(System.String,System.Object[])" />
  <topic id="M:Zhaord.Extensions.StringExtensions.FormatInvariant(System.String,System.Object[])" />
  <topic id="M:Zhaord.Extensions.StringExtensions.FormatWith(System.String,System.IFormatProvider,System.Object[])" />
  <topic id="M:Zhaord.Extensions.StringExtensions.FormatWith(System.String,System.Object[])" />
  <topic id="M:Zhaord.Extensions.StringExtensions.GetLength(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.Grow(System.String,System.String,System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.Hash(System.String,System.Text.Encoding,System.Boolean)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.HasValue(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.HtmlDecode(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.HtmlEncode(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.Indent(System.String,System.Int32)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.Indent(System.String,System.Int32,System.Char)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.IsAlpha(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.IsAlphaNumeric(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.IsCaseInsensitiveEqual(System.String,System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.IsCaseSensitiveEqual(System.String,System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.IsEmail(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.IsEmpty(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.IsEnclosedIn(System.String,System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.IsEnclosedIn(System.String,System.String,System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.IsEnclosedIn(System.String,System.String,System.String,System.StringComparison)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.IsEnclosedIn(System.String,System.String,System.StringComparison)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.IsMatch(System.String,System.String,System.Text.RegularExpressions.Match@,System.Text.RegularExpressions.RegexOptions)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.IsNumeric(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.IsWebUrl(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.IsWhiteSpace(System.String)" />
  <topic id="F:Zhaord.Extensions.StringExtensions.LineFeed" />
  <topic id="M:Zhaord.Extensions.StringExtensions.Mask(System.String,System.Int32)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.NaIfEmpty(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.NullEmpty(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.NumberLines(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.Prettify(System.String,System.Boolean,System.Char[])" />
  <topic id="M:Zhaord.Extensions.StringExtensions.RegexRemove(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.RegexReplace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.RemoveEncloser(System.String,System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.RemoveEncloser(System.String,System.String,System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.RemoveEncloser(System.String,System.String,System.String,System.StringComparison)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.RemoveEncloser(System.String,System.String,System.StringComparison)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.RemoveHtml(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.RemoveHtml(System.String,System.Collections.Generic.ICollection{System.String})" />
  <topic id="M:Zhaord.Extensions.StringExtensions.RemoveInvalidXmlChars(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.Replace(System.String,System.Int32,System.Int32,System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.ReplaceCsvChars(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.ReplaceNewLines(System.String,System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.SanitizeHtmlId(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.Sha(System.String,System.Text.Encoding)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.SplitPascalCase(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.SplitSafe(System.String,System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.SplitToPair(System.String,System.String@,System.String@,System.String)" />
  <topic id="F:Zhaord.Extensions.StringExtensions.Tab" />
  <topic id="M:Zhaord.Extensions.StringExtensions.ToAttribute(System.String,System.String,System.Boolean)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.ToCamelCase(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.ToEnum``1(System.String,``0)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.ToInt(System.Char)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.ToIntArray(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.ToIntArrayContains(System.String,System.Int32,System.Boolean)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.ToSafe(System.String,System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.ToUnicode(System.Char)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.ToValidFileName(System.String,System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.ToValidPath(System.String,System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.TrimSafe(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.Truncate(System.String,System.Int32,System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.UrlDecode(System.String)" />
  <topic id="M:Zhaord.Extensions.StringExtensions.UrlEncode(System.String)" />
  <topic id="T:Zhaord.Extensions.TypeDescriptorExtensions" />
  <topic id="Methods.T:Zhaord.Extensions.TypeDescriptorExtensions" />
  <topic id="Overload:Zhaord.Extensions.TypeDescriptorExtensions.GetAttributes" />
  <topic id="Overload:Zhaord.Extensions.TypeDescriptorExtensions.GetPropertiesWith" />
  <topic id="M:Zhaord.Extensions.TypeDescriptorExtensions.GetAttributes``1(System.ComponentModel.ICustomTypeDescriptor)" />
  <topic id="M:Zhaord.Extensions.TypeDescriptorExtensions.GetAttributes``1(System.ComponentModel.PropertyDescriptor)" />
  <topic id="M:Zhaord.Extensions.TypeDescriptorExtensions.GetAttributes``1(System.ComponentModel.PropertyDescriptor,System.Func{``0,System.Boolean})" />
  <topic id="M:Zhaord.Extensions.TypeDescriptorExtensions.GetPropertiesWith``1(System.ComponentModel.ICustomTypeDescriptor)" />
  <topic id="M:Zhaord.Extensions.TypeDescriptorExtensions.GetPropertiesWith``1(System.ComponentModel.ICustomTypeDescriptor,System.Func{``0,System.Boolean})" />
  <topic id="M:Zhaord.Extensions.TypeDescriptorExtensions.GetProperty(System.ComponentModel.ICustomTypeDescriptor,System.String)" />
  <topic id="T:Zhaord.Extensions.TypeExtensions" />
  <topic id="Methods.T:Zhaord.Extensions.TypeExtensions" />
  <topic id="Overload:Zhaord.Extensions.TypeExtensions.CreateGeneric" />
  <topic id="Overload:Zhaord.Extensions.TypeExtensions.GetSingleMember" />
  <topic id="Overload:Zhaord.Extensions.TypeExtensions.IsIndexed" />
  <topic id="Overload:Zhaord.Extensions.TypeExtensions.IsSubClass" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.AssemblyQualifiedNameWithoutVersion(System.Type)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.CanReadValue(System.Reflection.MemberInfo)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.CanSetValue(System.Reflection.MemberInfo)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.CreateGeneric(System.Type,System.Type,System.Object[])" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.CreateGeneric(System.Type,System.Type[],System.Func{System.Type,System.Object[],System.Object},System.Object[])" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.CreateGeneric(System.Type,System.Type[],System.Object[])" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.CreateGenericList(System.Type)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.FindMembers(System.Type,System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.GetAllAttributes``1(System.Reflection.MemberInfo,System.Boolean)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.GetAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.GetAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.GetFieldOrProperty(System.Type,System.String,System.Boolean)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.GetFieldsAndProperties(System.Type,System.Reflection.BindingFlags)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.GetNameAndAssemblyName(System.Type)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.GetNonNullableType(System.Type)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.GetPropertyFromMethod(System.Reflection.MethodBase)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.GetSingleMember(System.Type,System.String,System.Reflection.MemberTypes)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.GetSingleMember(System.Type,System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.GetValue(System.Reflection.MemberInfo,System.Object)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.HasAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.HasDefaultConstructor(System.Type)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.IsAnonymous(System.Type)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.IsConstructable(System.Type)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.IsEnumerable(System.Type)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.IsGenericDictionary(System.Type)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.IsIndexed(System.Reflection.MemberInfo)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.IsIndexed(System.Reflection.PropertyInfo)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.IsInteger(System.Type)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.IsNullable(System.Type)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.IsNullAssignable(System.Type)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.IsPredefinedGenericType(System.Type)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.IsPredefinedSimpleType(System.Type)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.IsPredefinedType(System.Type)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.IsSequenceType(System.Type)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.IsStruct(System.Type)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.IsSubClass(System.Type,System.Type)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.IsSubClass(System.Type,System.Type,System.Type@)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.IsType``1(System.Type)" />
  <topic id="M:Zhaord.Extensions.TypeExtensions.SetValue(System.Reflection.MemberInfo,System.Object,System.Object)" />
  <topic id="T:Zhaord.Extensions.XmlNodeExtensions" />
  <topic id="Methods.T:Zhaord.Extensions.XmlNodeExtensions" />
  <topic id="Overload:Zhaord.Extensions.XmlNodeExtensions.GetAttributeText" />
  <topic id="Overload:Zhaord.Extensions.XmlNodeExtensions.GetText" />
  <topic id="M:Zhaord.Extensions.XmlNodeExtensions.GetAttributeText(System.Xml.XmlNode,System.String)" />
  <topic id="M:Zhaord.Extensions.XmlNodeExtensions.GetAttributeText``1(System.Xml.XmlNode,System.String,``0)" />
  <topic id="M:Zhaord.Extensions.XmlNodeExtensions.GetText(System.Xml.XmlNode,System.String,System.String)" />
  <topic id="M:Zhaord.Extensions.XmlNodeExtensions.GetText``1(System.Xml.XmlNode,System.String,``0)" />
  <topic id="T:Zhaord.Extensions.XmlWriterExtensions" />
  <topic id="Methods.T:Zhaord.Extensions.XmlWriterExtensions" />
  <topic id="M:Zhaord.Extensions.XmlWriterExtensions.WriteCData(System.Xml.XmlWriter,System.String,System.String,System.String,System.String)" />
  <topic id="M:Zhaord.Extensions.XmlWriterExtensions.WriteNode(System.Xml.XmlWriter,System.String,System.Action)" />
  <topic id="N:Zhaord.Localization" />
  <topic id="T:Zhaord.Localization.LocalizedString" />
  <topic id="Methods.T:Zhaord.Localization.LocalizedString" />
  <topic id="Operators.T:Zhaord.Localization.LocalizedString" />
  <topic id="Properties.T:Zhaord.Localization.LocalizedString" />
  <topic id="Overload:Zhaord.Localization.LocalizedString.#ctor" />
  <topic id="Overload:Zhaord.Localization.LocalizedString.op_Implicit" />
  <topic id="M:Zhaord.Localization.LocalizedString.#ctor(System.String)" />
  <topic id="M:Zhaord.Localization.LocalizedString.#ctor(System.String,System.String,System.Object[])" />
  <topic id="P:Zhaord.Localization.LocalizedString.Args" />
  <topic id="M:Zhaord.Localization.LocalizedString.Equals(System.Object)" />
  <topic id="M:Zhaord.Localization.LocalizedString.GetHashCode" />
  <topic id="M:Zhaord.Localization.LocalizedString.op_Implicit(System.String)~Zhaord.Localization.LocalizedString" />
  <topic id="M:Zhaord.Localization.LocalizedString.op_Implicit(Zhaord.Localization.LocalizedString)~System.String" />
  <topic id="P:Zhaord.Localization.LocalizedString.Text" />
  <topic id="P:Zhaord.Localization.LocalizedString.TextHint" />
  <topic id="M:Zhaord.Localization.LocalizedString.TextOrDefault(System.String,Zhaord.Localization.LocalizedString)" />
  <topic id="M:Zhaord.Localization.LocalizedString.ToHtmlString" />
  <topic id="M:Zhaord.Localization.LocalizedString.ToString" />
  <topic id="T:Zhaord.Localization.Localizer" />
  <topic id="T:Zhaord.Localization.NullLocalizer" />
  <topic id="Properties.T:Zhaord.Localization.NullLocalizer" />
  <topic id="P:Zhaord.Localization.NullLocalizer.Instance" />
  <topic id="N:Zhaord.Singletons" />
  <topic id="T:Zhaord.Singletons.Singleton" />
  <topic id="Methods.T:Zhaord.Singletons.Singleton" />
  <topic id="Properties.T:Zhaord.Singletons.Singleton" />
  <topic id="M:Zhaord.Singletons.Singleton.#ctor" />
  <topic id="P:Zhaord.Singletons.Singleton.AllSingletons" />
  <topic id="T:Zhaord.Singletons.Singleton`1" />
  <topic id="Methods.T:Zhaord.Singletons.Singleton`1" />
  <topic id="Properties.T:Zhaord.Singletons.Singleton`1" />
  <topic id="M:Zhaord.Singletons.Singleton`1.#ctor" />
  <topic id="P:Zhaord.Singletons.Singleton`1.Instance" />
  <topic id="T:Zhaord.Singletons.SingletonDictionary`2" />
  <topic id="Methods.T:Zhaord.Singletons.SingletonDictionary`2" />
  <topic id="Properties.T:Zhaord.Singletons.SingletonDictionary`2" />
  <topic id="M:Zhaord.Singletons.SingletonDictionary`2.#ctor" />
  <topic id="P:Zhaord.Singletons.SingletonDictionary`2.Instance" />
  <topic id="T:Zhaord.Singletons.SingletonList`1" />
  <topic id="Methods.T:Zhaord.Singletons.SingletonList`1" />
  <topic id="Properties.T:Zhaord.Singletons.SingletonList`1" />
  <topic id="M:Zhaord.Singletons.SingletonList`1.#ctor" />
  <topic id="P:Zhaord.Singletons.SingletonList`1.Instance" />
  <topic id="N:Zhaord.TypeFinders" />
  <topic id="T:Zhaord.TypeFinders.AppDomainTypeFinder" />
  <topic id="Methods.T:Zhaord.TypeFinders.AppDomainTypeFinder" />
  <topic id="Properties.T:Zhaord.TypeFinders.AppDomainTypeFinder" />
  <topic id="Overload:Zhaord.TypeFinders.AppDomainTypeFinder.Matches" />
  <topic id="M:Zhaord.TypeFinders.AppDomainTypeFinder.#ctor" />
  <topic id="M:Zhaord.TypeFinders.AppDomainTypeFinder.AddCustomAssemblies(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Reflection.Assembly})" />
  <topic id="P:Zhaord.TypeFinders.AppDomainTypeFinder.App" />
  <topic id="P:Zhaord.TypeFinders.AppDomainTypeFinder.AssemblyRestrictToLoadingPattern" />
  <topic id="P:Zhaord.TypeFinders.AppDomainTypeFinder.AssemblySkipLoadingPattern" />
  <topic id="P:Zhaord.TypeFinders.AppDomainTypeFinder.CustomAssemblyNames" />
  <topic id="M:Zhaord.TypeFinders.AppDomainTypeFinder.DoesTypeImplementOpenGeneric(System.Type,System.Type)" />
  <topic id="M:Zhaord.TypeFinders.AppDomainTypeFinder.FindClassesOfType(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)" />
  <topic id="M:Zhaord.TypeFinders.AppDomainTypeFinder.GetAssemblies(System.Boolean)" />
  <topic id="P:Zhaord.TypeFinders.AppDomainTypeFinder.LoadAppDomainAssemblies" />
  <topic id="M:Zhaord.TypeFinders.AppDomainTypeFinder.LoadMatchingAssemblies(System.String)" />
  <topic id="M:Zhaord.TypeFinders.AppDomainTypeFinder.Matches(System.String)" />
  <topic id="M:Zhaord.TypeFinders.AppDomainTypeFinder.Matches(System.String,System.String)" />
  <topic id="T:Zhaord.TypeFinders.ITypeFinder" />
  <topic id="Methods.T:Zhaord.TypeFinders.ITypeFinder" />
  <topic id="M:Zhaord.TypeFinders.ITypeFinder.FindClassesOfType(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)" />
  <topic id="M:Zhaord.TypeFinders.ITypeFinder.GetAssemblies(System.Boolean)" />
  <topic id="T:Zhaord.TypeFinders.TypeFinderExtensions" />
  <topic id="Methods.T:Zhaord.TypeFinders.TypeFinderExtensions" />
  <topic id="Overload:Zhaord.TypeFinders.TypeFinderExtensions.FindClassesOfType" />
  <topic id="M:Zhaord.TypeFinders.TypeFinderExtensions.FindClassesOfType``1(Zhaord.TypeFinders.ITypeFinder,System.Boolean,System.Boolean)" />
  <topic id="M:Zhaord.TypeFinders.TypeFinderExtensions.FindClassesOfType``1(Zhaord.TypeFinders.ITypeFinder,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)" />
  <topic id="M:Zhaord.TypeFinders.TypeFinderExtensions.FindClassesOfType(Zhaord.TypeFinders.ITypeFinder,System.Type,System.Boolean,System.Boolean)" />
  <topic id="T:Zhaord.TypeFinders.WebAppTypeFinder" />
  <topic id="Methods.T:Zhaord.TypeFinders.WebAppTypeFinder" />
  <topic id="Properties.T:Zhaord.TypeFinders.WebAppTypeFinder" />
  <topic id="M:Zhaord.TypeFinders.WebAppTypeFinder.#ctor" />
  <topic id="P:Zhaord.TypeFinders.WebAppTypeFinder.EnsureBinFolderAssembliesLoaded" />
  <topic id="M:Zhaord.TypeFinders.WebAppTypeFinder.GetAssemblies(System.Boolean)" />
  <topic id="M:Zhaord.TypeFinders.WebAppTypeFinder.GetBinDirectory" />
  <topic id="N:Zhaord.Utilities" />
  <topic id="T:Zhaord.Utilities.ActionDisposable" />
  <topic id="Methods.T:Zhaord.Utilities.ActionDisposable" />
  <topic id="Fields.T:Zhaord.Utilities.ActionDisposable" />
  <topic id="M:Zhaord.Utilities.ActionDisposable.#ctor(System.Action)" />
  <topic id="M:Zhaord.Utilities.ActionDisposable.Dispose" />
  <topic id="F:Zhaord.Utilities.ActionDisposable.Empty" />
  <topic id="T:Zhaord.Utilities.CommonHelper" />
  <topic id="Methods.T:Zhaord.Utilities.CommonHelper" />
  <topic id="Properties.T:Zhaord.Utilities.CommonHelper" />
  <topic id="Overload:Zhaord.Utilities.CommonHelper.TryConvert" />
  <topic id="M:Zhaord.Utilities.CommonHelper.GenerateRandomDigitCode(System.Int32)" />
  <topic id="M:Zhaord.Utilities.CommonHelper.GenerateRandomInteger(System.Int32,System.Int32)" />
  <topic id="M:Zhaord.Utilities.CommonHelper.GetAppSetting``1(System.String,``0)" />
  <topic id="M:Zhaord.Utilities.CommonHelper.GetTypeConverter(System.Type)" />
  <topic id="P:Zhaord.Utilities.CommonHelper.IsDevEnvironment" />
  <topic id="M:Zhaord.Utilities.CommonHelper.MapPath(System.String,System.Boolean)" />
  <topic id="M:Zhaord.Utilities.CommonHelper.TryConvert``1(System.Object,System.Globalization.CultureInfo,``0@)" />
  <topic id="M:Zhaord.Utilities.CommonHelper.TryConvert(System.Object,System.Type,System.Globalization.CultureInfo,System.Object@)" />
  <topic id="M:Zhaord.Utilities.CommonHelper.TryConvert(System.Object,System.Type,System.Object@)" />
  <topic id="M:Zhaord.Utilities.CommonHelper.TryConvert``1(System.Object,``0@)" />
  <topic id="N:Zhaord.Utilities.Converts" />
  <topic id="T:Zhaord.Utilities.Converts.ConvertProblem" />
  <topic id="Methods.T:Zhaord.Utilities.Converts.ConvertProblem" />
  <topic id="Properties.T:Zhaord.Utilities.Converts.ConvertProblem" />
  <topic id="M:Zhaord.Utilities.Converts.ConvertProblem.#ctor" />
  <topic id="P:Zhaord.Utilities.Converts.ConvertProblem.AttemptedValue" />
  <topic id="P:Zhaord.Utilities.Converts.ConvertProblem.Exception" />
  <topic id="P:Zhaord.Utilities.Converts.ConvertProblem.Item" />
  <topic id="P:Zhaord.Utilities.Converts.ConvertProblem.Property" />
  <topic id="M:Zhaord.Utilities.Converts.ConvertProblem.ToString" />
  <topic id="T:Zhaord.Utilities.Converts.DateTimeConvert" />
  <topic id="Methods.T:Zhaord.Utilities.Converts.DateTimeConvert" />
  <topic id="Fields.T:Zhaord.Utilities.Converts.DateTimeConvert" />
  <topic id="Overload:Zhaord.Utilities.Converts.DateTimeConvert.ToString" />
  <topic id="F:Zhaord.Utilities.Converts.DateTimeConvert.DateTimeFormat" />
  <topic id="M:Zhaord.Utilities.Converts.DateTimeConvert.Parse(System.String)" />
  <topic id="M:Zhaord.Utilities.Converts.DateTimeConvert.ParseNullable(System.String)" />
  <topic id="M:Zhaord.Utilities.Converts.DateTimeConvert.ToString(System.DateTime)" />
  <topic id="M:Zhaord.Utilities.Converts.DateTimeConvert.ToString(System.Nullable{System.DateTime})" />
  <topic id="T:Zhaord.Utilities.Converts.DictionaryConverter" />
  <topic id="Methods.T:Zhaord.Utilities.Converts.DictionaryConverter" />
  <topic id="Overload:Zhaord.Utilities.Converts.DictionaryConverter.CreateAndPopulate" />
  <topic id="Overload:Zhaord.Utilities.Converts.DictionaryConverter.Populate" />
  <topic id="Overload:Zhaord.Utilities.Converts.DictionaryConverter.SafeCreateAndPopulate" />
  <topic id="M:Zhaord.Utilities.Converts.DictionaryConverter.CanCreateType(System.Type)" />
  <topic id="M:Zhaord.Utilities.Converts.DictionaryConverter.CreateAndPopulate``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.ICollection{Zhaord.Utilities.Converts.ConvertProblem}@)" />
  <topic id="M:Zhaord.Utilities.Converts.DictionaryConverter.CreateAndPopulate(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.ICollection{Zhaord.Utilities.Converts.ConvertProblem}@)" />
  <topic id="M:Zhaord.Utilities.Converts.DictionaryConverter.Populate(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,System.Collections.Generic.ICollection{Zhaord.Utilities.Converts.ConvertProblem}@,System.Object[])" />
  <topic id="M:Zhaord.Utilities.Converts.DictionaryConverter.Populate(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,System.Object[])" />
  <topic id="M:Zhaord.Utilities.Converts.DictionaryConverter.SafeCreateAndPopulate``1(System.Collections.Generic.IDictionary{System.String,System.Object})" />
  <topic id="M:Zhaord.Utilities.Converts.DictionaryConverter.SafeCreateAndPopulate(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})" />
  <topic id="T:Zhaord.Utilities.Converts.DictionaryConvertException" />
  <topic id="Methods.T:Zhaord.Utilities.Converts.DictionaryConvertException" />
  <topic id="Properties.T:Zhaord.Utilities.Converts.DictionaryConvertException" />
  <topic id="Events.T:Zhaord.Utilities.Converts.DictionaryConvertException" />
  <topic id="Overload:Zhaord.Utilities.Converts.DictionaryConvertException.#ctor" />
  <topic id="M:Zhaord.Utilities.Converts.DictionaryConvertException.#ctor(System.Collections.Generic.ICollection{Zhaord.Utilities.Converts.ConvertProblem})" />
  <topic id="M:Zhaord.Utilities.Converts.DictionaryConvertException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
  <topic id="M:Zhaord.Utilities.Converts.DictionaryConvertException.#ctor(System.String,System.Collections.Generic.ICollection{Zhaord.Utilities.Converts.ConvertProblem})" />
  <topic id="P:Zhaord.Utilities.Converts.DictionaryConvertException.Problems" />
  <topic id="N:Zhaord.Utilities.Threading" />
  <topic id="T:Zhaord.Utilities.Threading.LockExtensions" />
  <topic id="Methods.T:Zhaord.Utilities.Threading.LockExtensions" />
  <topic id="Overload:Zhaord.Utilities.Threading.LockExtensions.GetReadLock" />
  <topic id="Overload:Zhaord.Utilities.Threading.LockExtensions.GetUpgradeableReadLock" />
  <topic id="Overload:Zhaord.Utilities.Threading.LockExtensions.GetWriteLock" />
  <topic id="M:Zhaord.Utilities.Threading.LockExtensions.GetReadLock(System.Threading.ReaderWriterLockSlim)" />
  <topic id="M:Zhaord.Utilities.Threading.LockExtensions.GetReadLock(System.Threading.ReaderWriterLockSlim,System.Int32)" />
  <topic id="M:Zhaord.Utilities.Threading.LockExtensions.GetUpgradeableReadLock(System.Threading.ReaderWriterLockSlim)" />
  <topic id="M:Zhaord.Utilities.Threading.LockExtensions.GetUpgradeableReadLock(System.Threading.ReaderWriterLockSlim,System.Int32)" />
  <topic id="M:Zhaord.Utilities.Threading.LockExtensions.GetWriteLock(System.Threading.ReaderWriterLockSlim)" />
  <topic id="M:Zhaord.Utilities.Threading.LockExtensions.GetWriteLock(System.Threading.ReaderWriterLockSlim,System.Int32)" />
  <topic id="T:Zhaord.Utilities.Threading.ReadLockDisposable" />
  <topic id="Methods.T:Zhaord.Utilities.Threading.ReadLockDisposable" />
  <topic id="M:Zhaord.Utilities.Threading.ReadLockDisposable.#ctor(System.Threading.ReaderWriterLockSlim)" />
  <topic id="T:Zhaord.Utilities.Threading.UpgradeableReadLockDisposable" />
  <topic id="Methods.T:Zhaord.Utilities.Threading.UpgradeableReadLockDisposable" />
  <topic id="M:Zhaord.Utilities.Threading.UpgradeableReadLockDisposable.#ctor(System.Threading.ReaderWriterLockSlim)" />
  <topic id="T:Zhaord.Utilities.Threading.WriteLockDisposable" />
  <topic id="Methods.T:Zhaord.Utilities.Threading.WriteLockDisposable" />
  <topic id="M:Zhaord.Utilities.Threading.WriteLockDisposable.#ctor(System.Threading.ReaderWriterLockSlim)" />
</topics>