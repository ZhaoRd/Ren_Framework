<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Zhaord.Infrastructure</name>
  </assembly>
  <members>
    <member name="T:Zhaord.Attributes.EnumDescriptionAttribute">
      <summary>
            Provides a description for an enumerated type.
            </summary>
    </member>
    <member name="M:Zhaord.Attributes.EnumDescriptionAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.Attributes.EnumDescriptionAttribute" /> class. 
            Initializes a new instance of the
            <see cref="T:Zhaord.Attributes.EnumDescriptionAttribute" /> class.
            </summary>
      <param name="description">
            The description to store in this attribute.
            </param>
    </member>
    <member name="P:Zhaord.Attributes.EnumDescriptionAttribute.Description">
      <summary>
            Gets the description stored in this attribute.
            </summary>
      <value>The description stored in the attribute.</value>
    </member>
    <member name="T:Zhaord.Attributes.EnumFriendlyNameAttribute">
      <summary>
            Provides a friendly display name for an enumerated type value.
            </summary>
    </member>
    <member name="M:Zhaord.Attributes.EnumFriendlyNameAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.Attributes.EnumFriendlyNameAttribute" /> class.
            </summary>
      <param name="friendlyName">
            The friendly name.
            </param>
    </member>
    <member name="P:Zhaord.Attributes.EnumFriendlyNameAttribute.FriendlyName">
      <summary>
            Gets the friendly name.
            </summary>
    </member>
    <member name="T:Zhaord.Caching.AspNetCache">
      <summary>
            The asp net cache.
            </summary>
    </member>
    <member name="T:Zhaord.Caching.ICache">
      <summary>
            Cache holder interface
            </summary>
    </member>
    <member name="M:Zhaord.Caching.ICache.Get(System.String)">
      <summary>
            Gets a cache item associated with the specified key
            </summary>
      <param name="key">
            The cache item key
            </param>
      <returns>
            Cached item value
            </returns>
    </member>
    <member name="M:Zhaord.Caching.ICache.Set(System.String,System.Object,System.Nullable{System.Int32})">
      <summary>
            Adds the cache item with the specified key
            </summary>
      <param name="key">
            Key
            </param>
      <param name="value">
            The value.
            </param>
      <param name="cacheTime">
            Cache time in minutes
            </param>
    </member>
    <member name="M:Zhaord.Caching.ICache.Contains(System.String)">
      <summary>
            Gets a value indicating whether an item associated with the specified key exists in the cache
            </summary>
      <param name="key">
            key
            </param>
      <returns>
            Result
            </returns>
    </member>
    <member name="M:Zhaord.Caching.ICache.Remove(System.String)">
      <summary>
            Removes the value with the specified key from the cache
            </summary>
      <param name="key">
            /key
            </param>
    </member>
    <member name="P:Zhaord.Caching.ICache.Entries">
      <summary>
            Gets all entries in the cache
            </summary>
    </member>
    <member name="P:Zhaord.Caching.ICache.IsSingleton">
      <summary>
            Gets a value indicating whether reads and writes to this cache should be thread safe
            </summary>
    </member>
    <member name="F:Zhaord.Caching.AspNetCache.RegionName">
      <summary>
            The regio n_ name.
            </summary>
    </member>
    <member name="F:Zhaord.Caching.AspNetCache.FakeNull">
      <summary>
            The fak e_ null.
            </summary>
    </member>
    <member name="M:Zhaord.Caching.AspNetCache.BuildKey(System.String)">
      <summary>
            The build key.
            </summary>
      <param name="key">
            The key.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Caching.AspNetCache.Get(System.String)">
      <summary>
            The get.
            </summary>
      <param name="key">
            The key.
            </param>
      <returns>
            The <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Zhaord.Caching.AspNetCache.Set(System.String,System.Object,System.Nullable{System.Int32})">
      <summary>
            The set.
            </summary>
      <param name="key">
            The key.
            </param>
      <param name="value">
            The value.
            </param>
      <param name="cacheTime">
            The cache time.
            </param>
    </member>
    <member name="M:Zhaord.Caching.AspNetCache.Contains(System.String)">
      <summary>
            The contains.
            </summary>
      <param name="key">
            The key.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Caching.AspNetCache.Remove(System.String)">
      <summary>
            The remove.
            </summary>
      <param name="key">
            The key.
            </param>
    </member>
    <member name="P:Zhaord.Caching.AspNetCache.IsSingleton">
      <summary>
            Gets a value indicating whether is singleton.
            </summary>
    </member>
    <member name="P:Zhaord.Caching.AspNetCache.Entries">
      <summary>
            Gets the entries.
            </summary>
    </member>
    <member name="T:Zhaord.Caching.CacheManagerExtensions">
      <summary>
            The cache manager extensions.
            </summary>
    </member>
    <member name="M:Zhaord.Caching.CacheManagerExtensions.Get``1(Zhaord.Caching.ICacheManager,System.String)">
      <summary>
            The get.
            </summary>
      <param name="cacheManager">
            The cache manager.
            </param>
      <param name="key">
            The key.
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see cref="!:T" />.
            </returns>
    </member>
    <member name="T:Zhaord.Caching.CacheManager`1">
      <summary>
            The cache manager.
            </summary>
      <typeparam name="TCache">
            泛型
            </typeparam>
    </member>
    <member name="T:Zhaord.Caching.ICacheManager">
      <summary>
            Cache manager interface
            </summary>
    </member>
    <member name="M:Zhaord.Caching.ICacheManager.Get``1(System.String,System.Func{``0},System.Nullable{System.Int32})">
      <summary>
            Gets a cache item associated with the specified key or adds the item
            if it doesn't exist in the cache.
            </summary>
      <typeparam name="T">
            The type of the item to get or add
            </typeparam>
      <param name="key">
            The cache item key
            </param>
      <param name="acquirer">
            Func which returns value to be added to the cache
            </param>
      <param name="cacheTime">
            Expiration time in minutes
            </param>
      <returns>
            Cached item value
            </returns>
    </member>
    <member name="M:Zhaord.Caching.ICacheManager.Set(System.String,System.Object,System.Nullable{System.Int32})">
      <summary>
            Adds a cache item with the specified key
            </summary>
      <param name="key">
            Key
            </param>
      <param name="value">
            Value
            </param>
      <param name="cacheTime">
            Cache time in minutes
            </param>
    </member>
    <member name="M:Zhaord.Caching.ICacheManager.Contains(System.String)">
      <summary>
            Gets a value indicating whether the value associated with the specified key is cached
            </summary>
      <param name="key">
            key
            </param>
      <returns>
            Result
            </returns>
    </member>
    <member name="M:Zhaord.Caching.ICacheManager.Remove(System.String)">
      <summary>
            Removes the value with the specified key from the cache
            </summary>
      <param name="key">
            /key
            </param>
    </member>
    <member name="M:Zhaord.Caching.ICacheManager.RemoveByPattern(System.String)">
      <summary>
            Removes items by pattern
            </summary>
      <param name="pattern">
            pattern
            </param>
    </member>
    <member name="M:Zhaord.Caching.ICacheManager.Clear">
      <summary>
            Clear all cache data
            </summary>
    </member>
    <member name="M:Zhaord.Caching.ICacheManager.EnterWriteLock">
      <summary>
            Returns a wrapped sync lock for the underlying <c>ICache</c> implementation
            </summary>
      <returns>The disposable sync lock</returns>
      <remarks>
            This method internally wraps either a <c>ReaderWriterLockSlim</c> or an empty noop action
            dependending on the scope of the underlying <c>ICache</c> implementation.
            The static (singleton) cache always returns the <c>ReaderWriterLockSlim</c> instance
            which is used to sync read/write access to cache items.
            This method is useful if you want to modify a cache item's value, thus must lock access
            to the cache during the update.
            </remarks>
    </member>
    <member name="F:Zhaord.Caching.CacheManager`1.readerWriterLock">
      <summary>
            The _rw lock.
            </summary>
    </member>
    <member name="F:Zhaord.Caching.CacheManager`1.cache">
      <summary>
            The cache.
            </summary>
    </member>
    <member name="M:Zhaord.Caching.CacheManager`1.#ctor(System.Func{System.Type,Zhaord.Caching.ICache})">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.Caching.CacheManager`1" /> class.
            </summary>
      <param name="fn">
            The fn.
            </param>
    </member>
    <member name="M:Zhaord.Caching.CacheManager`1.Get``1(System.String,System.Func{``0},System.Nullable{System.Int32})">
      <summary>
            The get.
            </summary>
      <param name="key">
            The key.
            </param>
      <param name="acquirer">
            The acquirer.
            </param>
      <param name="cacheTime">
            The cache time.
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see cref="!:T" />.
            </returns>
    </member>
    <member name="M:Zhaord.Caching.CacheManager`1.Set(System.String,System.Object,System.Nullable{System.Int32})">
      <summary>
            The set.
            </summary>
      <param name="key">
            The key.
            </param>
      <param name="value">
            The value.
            </param>
      <param name="cacheTime">
            The cache time.
            </param>
    </member>
    <member name="M:Zhaord.Caching.CacheManager`1.Contains(System.String)">
      <summary>
            The contains.
            </summary>
      <param name="key">
            The key.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Caching.CacheManager`1.Remove(System.String)">
      <summary>
            The remove.
            </summary>
      <param name="key">
            The key.
            </param>
    </member>
    <member name="M:Zhaord.Caching.CacheManager`1.RemoveByPattern(System.String)">
      <summary>
            The remove by pattern.
            </summary>
      <param name="pattern">
            The pattern.
            </param>
    </member>
    <member name="M:Zhaord.Caching.CacheManager`1.Clear">
      <summary>
            The clear.
            </summary>
    </member>
    <member name="M:Zhaord.Caching.CacheManager`1.EnterWriteLock">
      <summary>
            The enter write lock.
            </summary>
      <returns>
            The <see cref="T:System.IDisposable" />.
            </returns>
    </member>
    <member name="M:Zhaord.Caching.CacheManager`1.EnterReadLock">
      <summary>
            The enter read lock.
            </summary>
      <returns>
            The <see cref="T:System.IDisposable" />.
            </returns>
    </member>
    <member name="T:Zhaord.Caching.NullCache">
      <summary>
            Represents a null cache
            </summary>
    </member>
    <member name="F:Zhaord.Caching.NullCache.SInstance">
      <summary>
            The s instance.
            </summary>
    </member>
    <member name="M:Zhaord.Caching.NullCache.Get``1(System.String,System.Func{``0},System.Nullable{System.Int32})">
      <summary>
            The get.
            </summary>
      <param name="key">
            The key.
            </param>
      <param name="acquirer">
            The acquirer.
            </param>
      <param name="cacheTime">
            The cache time.
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see cref="!:T" />.
            </returns>
    </member>
    <member name="M:Zhaord.Caching.NullCache.Set(System.String,System.Object,System.Nullable{System.Int32})">
      <summary>
            The set.
            </summary>
      <param name="key">
            The key.
            </param>
      <param name="value">
            The value.
            </param>
      <param name="cacheTime">
            The cache time.
            </param>
    </member>
    <member name="M:Zhaord.Caching.NullCache.Contains(System.String)">
      <summary>
            Gets a value indicating whether the value associated with the specified key is cached
            </summary>
      <param name="key">
            key
            </param>
      <returns>
            Result
            </returns>
    </member>
    <member name="M:Zhaord.Caching.NullCache.Remove(System.String)">
      <summary>
            Removes the value with the specified key from the cache
            </summary>
      <param name="key">
            /key
            </param>
    </member>
    <member name="M:Zhaord.Caching.NullCache.RemoveByPattern(System.String)">
      <summary>
            Removes items by pattern
            </summary>
      <param name="pattern">
            pattern
            </param>
    </member>
    <member name="M:Zhaord.Caching.NullCache.Clear">
      <summary>
            Clear all cache data
            </summary>
    </member>
    <member name="M:Zhaord.Caching.NullCache.EnterWriteLock">
      <summary>
            The enter write lock.
            </summary>
      <returns>
            The <see cref="T:System.IDisposable" />.
            </returns>
    </member>
    <member name="P:Zhaord.Caching.NullCache.Instance">
      <summary>
            Gets the instance.
            </summary>
    </member>
    <member name="T:Zhaord.Caching.RequestCache">
      <summary>
            The request cache.
            </summary>
    </member>
    <member name="F:Zhaord.Caching.RequestCache.RegionName">
      <summary>
            The regio n_ name.
            </summary>
    </member>
    <member name="F:Zhaord.Caching.RequestCache.context">
      <summary>
            The _context.
            </summary>
    </member>
    <member name="M:Zhaord.Caching.RequestCache.#ctor(System.Web.HttpContextBase)">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.Caching.RequestCache" /> class.
            </summary>
      <param name="context">
            The context.
            </param>
    </member>
    <member name="M:Zhaord.Caching.RequestCache.Get(System.String)">
      <summary>
            The get.
            </summary>
      <param name="key">
            The key.
            </param>
      <returns>
            The <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Zhaord.Caching.RequestCache.Set(System.String,System.Object,System.Nullable{System.Int32})">
      <summary>
            The set.
            </summary>
      <param name="key">
            The key.
            </param>
      <param name="value">
            The value.
            </param>
      <param name="cacheTime">
            The cache time.
            </param>
    </member>
    <member name="M:Zhaord.Caching.RequestCache.Contains(System.String)">
      <summary>
            The contains.
            </summary>
      <param name="key">
            The key.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Caching.RequestCache.Remove(System.String)">
      <summary>
            The remove.
            </summary>
      <param name="key">
            The key.
            </param>
    </member>
    <member name="M:Zhaord.Caching.RequestCache.GetItems">
      <summary>
            The get items.
            </summary>
      <returns>
            The <see cref="T:System.Collections.IDictionary" />.
            </returns>
    </member>
    <member name="M:Zhaord.Caching.RequestCache.BuildKey(System.String)">
      <summary>
            The build key.
            </summary>
      <param name="key">
            The key.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="P:Zhaord.Caching.RequestCache.Entries">
      <summary>
            Gets the entries.
            </summary>
    </member>
    <member name="P:Zhaord.Caching.RequestCache.IsSingleton">
      <summary>
            Gets a value indicating whether is singleton.
            </summary>
    </member>
    <member name="T:Zhaord.Caching.StaticCache">
      <summary>
            The static cache.
            </summary>
    </member>
    <member name="F:Zhaord.Caching.StaticCache.cache">
      <summary>
            The _cache.
            </summary>
    </member>
    <member name="M:Zhaord.Caching.StaticCache.Get(System.String)">
      <summary>
            The get.
            </summary>
      <param name="key">
            The key.
            </param>
      <returns>
            The <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Zhaord.Caching.StaticCache.Set(System.String,System.Object,System.Nullable{System.Int32})">
      <summary>
            The set.
            </summary>
      <param name="key">
            The key.
            </param>
      <param name="value">
            The value.
            </param>
      <param name="cacheTime">
            The cache time.
            </param>
    </member>
    <member name="M:Zhaord.Caching.StaticCache.Contains(System.String)">
      <summary>
            The contains.
            </summary>
      <param name="key">
            The key.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Caching.StaticCache.Remove(System.String)">
      <summary>
            The remove.
            </summary>
      <param name="key">
            The key.
            </param>
    </member>
    <member name="P:Zhaord.Caching.StaticCache.Entries">
      <summary>
            Gets the entries.
            </summary>
    </member>
    <member name="P:Zhaord.Caching.StaticCache.IsSingleton">
      <summary>
            Gets a value indicating whether is singleton.
            </summary>
    </member>
    <member name="P:Zhaord.Caching.StaticCache.Cache">
      <summary>
            Gets the cache.
            </summary>
    </member>
    <member name="T:Zhaord.Collections.Multimap`2">
      <summary>
            A data structure that contains multiple values for each key.
            </summary>
      <typeparam name="TKey">The type of key.</typeparam>
      <typeparam name="TValue">The type of value.</typeparam>
    </member>
    <member name="M:Zhaord.Collections.Multimap`2.Add(`0,`1)">
      <summary>
            Adds the specified value for the specified key.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Zhaord.Collections.Multimap`2.AddRange(`0,System.Collections.Generic.IEnumerable{`1})">
      <summary>
            Adds the specified values to the specified key.
            </summary>
      <param name="key">The key.</param>
      <param name="values">The values.</param>
    </member>
    <member name="M:Zhaord.Collections.Multimap`2.Remove(`0,`1)">
      <summary>
            Removes the specified value for the specified key.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>
        <c>True</c> if such a value existed and was removed; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Zhaord.Collections.Multimap`2.RemoveAll(`0)">
      <summary>
            Removes all values for the specified key.
            </summary>
      <param name="key">The key.</param>
      <returns>
        <c>True</c> if any such values existed; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Zhaord.Collections.Multimap`2.Clear">
      <summary>
            Removes all values.
            </summary>
    </member>
    <member name="M:Zhaord.Collections.Multimap`2.ContainsKey(`0)">
      <summary>
            Determines whether the multimap contains any values for the specified key.
            </summary>
      <param name="key">The key.</param>
      <returns>
        <c>True</c> if the multimap has one or more values for the specified key, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Zhaord.Collections.Multimap`2.ContainsValue(`0,`1)">
      <summary>
            Determines whether the multimap contains the specified value for the specified key.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>
        <c>True</c> if the multimap contains such a value; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Zhaord.Collections.Multimap`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the multimap.
            </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the multimap.</returns>
    </member>
    <member name="M:Zhaord.Collections.Multimap`2.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the multimap.
            </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the multimap.</returns>
    </member>
    <member name="P:Zhaord.Collections.Multimap`2.Count">
      <summary>
            Gets the count of groups/keys.
            </summary>
    </member>
    <member name="P:Zhaord.Collections.Multimap`2.TotalValueCount">
      <summary>
            Gets the total count of items in all groups.
            </summary>
    </member>
    <member name="P:Zhaord.Collections.Multimap`2.Item(`0)">
      <summary>
            Gets the collection of values stored under the specified key.
            </summary>
      <param name="key">The key.</param>
    </member>
    <member name="P:Zhaord.Collections.Multimap`2.Keys">
      <summary>
            Gets the collection of keys.
            </summary>
    </member>
    <member name="P:Zhaord.Collections.Multimap`2.Values">
      <summary>
            Gets the collection of collections of values.
            </summary>
    </member>
    <member name="T:Zhaord.Collections.QueryString">
      <summary>
            http://weblogs.asp.net/bradvincent/archive/2008/10/27/helper-class-querystring-builder-chainable.aspx
            </summary>
    </member>
    <member name="M:Zhaord.Collections.QueryString.ExtractQuerystring(System.String)">
      <summary>
            extracts a querystring from a full URL
            </summary>
      <param name="s">the string to extract the querystring from</param>
      <returns>a string representing only the querystring</returns>
    </member>
    <member name="M:Zhaord.Collections.QueryString.FillFromString(System.String)">
      <summary>
            returns a querystring object based on a string
            </summary>
      <param name="s">the string to parse</param>
      <returns>the QueryString object </returns>
    </member>
    <member name="M:Zhaord.Collections.QueryString.FromCurrent">
      <summary>
            returns a QueryString object based on the current querystring of the request
            </summary>
      <returns>the QueryString object </returns>
    </member>
    <member name="M:Zhaord.Collections.QueryString.Add(System.String,System.String)">
      <summary>
            add a name value pair to the collection
            </summary>
      <param name="name">the name</param>
      <param name="value">the value associated to the name</param>
      <returns>the QueryString object </returns>
    </member>
    <member name="M:Zhaord.Collections.QueryString.Add(System.String,System.String,System.Boolean)">
      <summary>
            adds a name value pair to the collection
            </summary>
      <param name="name">the name</param>
      <param name="value">the value associated to the name</param>
      <param name="isUnique">true if the name is unique within the querystring. This allows us to override existing values</param>
      <returns>the QueryString object </returns>
    </member>
    <member name="M:Zhaord.Collections.QueryString.Remove(System.String)">
      <summary>
            removes a name value pair from the querystring collection
            </summary>
      <param name="name">name of the querystring value to remove</param>
      <returns>the QueryString object</returns>
    </member>
    <member name="M:Zhaord.Collections.QueryString.Reset">
      <summary>
            clears the collection
            </summary>
      <returns>the QueryString object </returns>
    </member>
    <member name="M:Zhaord.Collections.QueryString.Contains(System.String)">
      <summary>
            checks if a name already exists within the query string collection
            </summary>
      <param name="name">the name to check</param>
      <returns>a boolean if the name exists</returns>
    </member>
    <member name="M:Zhaord.Collections.QueryString.ToString">
      <summary>
            outputs the querystring object to a string
            </summary>
      <returns>the encoded querystring as it would appear in a browser</returns>
    </member>
    <member name="P:Zhaord.Collections.QueryString.Item(System.String)">
      <summary>
            overrides the default
            </summary>
      <param name="name">
      </param>
      <returns>the associated decoded value for the specified name</returns>
    </member>
    <member name="P:Zhaord.Collections.QueryString.Item(System.Int32)">
      <summary>
            overrides the default indexer
            </summary>
      <param name="index">
      </param>
      <returns>the associated decoded value for the specified index</returns>
    </member>
    <member name="T:Zhaord.Collections.TreeNode`1">
      <summary>
            The tree node.
            </summary>
      <typeparam name="T">
            泛型
            </typeparam>
    </member>
    <member name="T:Zhaord.ICloneable`1">
      <summary>
            Generic variant of <see cref="T:System.ICloneable" />.
            </summary>
      <typeparam name="T">
            The type of object that is cloned
            </typeparam>
    </member>
    <member name="M:Zhaord.ICloneable`1.Clone">
      <summary>
            Clones the object.
            </summary>
      <returns>The cloned instance</returns>
    </member>
    <member name="F:Zhaord.Collections.TreeNode`1.children">
      <summary>
            The children.
            </summary>
    </member>
    <member name="F:Zhaord.Collections.TreeNode`1.depth">
      <summary>
            The depth.
            </summary>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.Collections.TreeNode`1" /> class.
            </summary>
      <param name="value">
            The value.
            </param>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.AddChild(Zhaord.Collections.TreeNode{`0},System.Boolean,System.Boolean)">
      <summary>
            The add child.
            </summary>
      <param name="node">
            The node.
            </param>
      <param name="clone">
            The clone.
            </param>
      <param name="append">
            The append.
            </param>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.Append(`0)">
      <summary>
            The append.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see><cref>TreeNode</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.Append(Zhaord.Collections.TreeNode{`0},System.Boolean)">
      <summary>
            The append.
            </summary>
      <param name="node">
            The node.
            </param>
      <param name="clone">
            The clone.
            </param>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.AppendMany(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            The append many.
            </summary>
      <param name="values">
            The values.
            </param>
      <returns>
            The <see cref="!:ICollection" />.
            </returns>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.AppendMany(`0[])">
      <summary>
            The append many.
            </summary>
      <param name="values">
            The values.
            </param>
      <returns>
            The <see cref="!:TreeNode" />.
            </returns>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.AppendMany(System.Collections.Generic.IEnumerable{Zhaord.Collections.TreeNode{`0}})">
      <summary>
            The append many.
            </summary>
      <param name="values">
            The values.
            </param>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.AppendChildrenOf(Zhaord.Collections.TreeNode{`0})">
      <summary>
            The append children of.
            </summary>
      <param name="node">
            The node.
            </param>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.Prepend(`0)">
      <summary>
            The prepend.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="!:TreeNode" />.
            </returns>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.InsertAfter(Zhaord.Collections.TreeNode{`0})">
      <summary>
            The insert after.
            </summary>
      <param name="refNode">
            The ref node.
            </param>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.InsertBefore(Zhaord.Collections.TreeNode{`0})">
      <summary>
            The insert before.
            </summary>
      <param name="refNode">
            The ref node.
            </param>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.Insert(Zhaord.Collections.TreeNode{`0},System.Boolean)">
      <summary>
            The insert.
            </summary>
      <param name="refNode">
            The ref node.
            </param>
      <param name="after">
            The after.
            </param>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.SelectNode(System.Linq.Expressions.Expression{System.Func{Zhaord.Collections.TreeNode{`0},System.Boolean}})">
      <summary>
            The select node.
            </summary>
      <param name="predicate">
            The predicate.
            </param>
      <returns>
            The <see cref="!:TreeNode" />.
            </returns>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.SelectNodes(System.Linq.Expressions.Expression{System.Func{Zhaord.Collections.TreeNode{`0},System.Boolean}})">
      <summary>
            Selects all nodes (recursively) with match the given <c>predicate</c>,
            but excluding self
            </summary>
      <param name="predicate">
            The predicate to match against
            </param>
      <returns>
            A readonly collection of node matches
            </returns>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.RemoveNode(Zhaord.Collections.TreeNode{`0})">
      <summary>
            The remove node.
            </summary>
      <param name="node">
            The node.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.Clear">
      <summary>
            The clear.
            </summary>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.Traverse(System.Action{`0})">
      <summary>
            The traverse.
            </summary>
      <param name="action">
            The action.
            </param>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.TraverseTree(System.Action{Zhaord.Collections.TreeNode{`0}})">
      <summary>
            The traverse tree.
            </summary>
      <param name="action">
            The action.
            </param>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.Flatten(System.Boolean)">
      <summary>
            The flatten.
            </summary>
      <param name="includeSelf">
            The include self.
            </param>
      <returns>
            The <see cref="!:IEnumerable" />.
            </returns>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.Flatten(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
      <summary>
            The flatten.
            </summary>
      <param name="expression">
            The expression.
            </param>
      <param name="includeSelf">
            The include self.
            </param>
      <returns>
            The <see cref="!:IEnumerable" />.
            </returns>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.FlattenNodes(System.Boolean)">
      <summary>
            The flatten nodes.
            </summary>
      <param name="includeSelf">
            The include self.
            </param>
      <returns>
            The <see cref="!:IEnumerable" />.
            </returns>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.FlattenNodes(System.Linq.Expressions.Expression{System.Func{Zhaord.Collections.TreeNode{`0},System.Boolean}},System.Boolean)">
      <summary>
            The flatten nodes.
            </summary>
      <param name="expression">
            The expression.
            </param>
      <param name="includeSelf">
            The include self.
            </param>
      <returns>
            The <see cref="!:IEnumerable" />.
            </returns>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.Find(`0)">
      <summary>
            The find.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="!:TreeNode" />.
            </returns>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.Clone">
      <summary>
            The clone.
            </summary>
      <returns>
            The <see cref="!:TreeNode" />.
            </returns>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.Clone(System.Boolean)">
      <summary>
            The clone.
            </summary>
      <param name="deep">
            The deep.
            </param>
      <returns>
            The <see cref="!:TreeNode" />.
            </returns>
    </member>
    <member name="M:Zhaord.Collections.TreeNode`1.System#ICloneable#Clone">
      <summary>
            The clone.
            </summary>
      <returns>
            The <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:Zhaord.Collections.TreeNode`1.Parent">
      <summary>
            Gets the parent.
            </summary>
    </member>
    <member name="P:Zhaord.Collections.TreeNode`1.Value">
      <summary>
            Gets or sets the value.
            </summary>
    </member>
    <member name="P:Zhaord.Collections.TreeNode`1.Item(System.Int32)">
      <summary>
            The this.
            </summary>
      <param name="i">
            The i.
            </param>
      <returns>
            The <see><cref>TreeNode</cref></see>
                .
            </returns>
    </member>
    <member name="P:Zhaord.Collections.TreeNode`1.Children">
      <summary>
            Gets the children.
            </summary>
    </member>
    <member name="P:Zhaord.Collections.TreeNode`1.LeafNodes">
      <summary>
            Gets the leaf nodes.
            </summary>
    </member>
    <member name="P:Zhaord.Collections.TreeNode`1.NonLeafNodes">
      <summary>
            Gets the non leaf nodes.
            </summary>
    </member>
    <member name="P:Zhaord.Collections.TreeNode`1.FirstChild">
      <summary>
            Gets the first child.
            </summary>
    </member>
    <member name="P:Zhaord.Collections.TreeNode`1.LastChild">
      <summary>
            Gets the last child.
            </summary>
    </member>
    <member name="P:Zhaord.Collections.TreeNode`1.IsLeaf">
      <summary>
            Gets a value indicating whether is leaf.
            </summary>
    </member>
    <member name="P:Zhaord.Collections.TreeNode`1.HasChildren">
      <summary>
            Gets a value indicating whether has children.
            </summary>
    </member>
    <member name="P:Zhaord.Collections.TreeNode`1.IsRoot">
      <summary>
            Gets a value indicating whether is root.
            </summary>
    </member>
    <member name="P:Zhaord.Collections.TreeNode`1.Depth">
      <summary>
            Gets the depth.
            </summary>
    </member>
    <member name="P:Zhaord.Collections.TreeNode`1.Root">
      <summary>
            Gets the root.
            </summary>
    </member>
    <member name="P:Zhaord.Collections.TreeNode`1.Next">
      <summary>
            Gets the next.
            </summary>
    </member>
    <member name="P:Zhaord.Collections.TreeNode`1.Previous">
      <summary>
            Gets the previous.
            </summary>
    </member>
    <member name="T:Zhaord.ComparableObject">
      <summary>
            Provides a standard base class for facilitating sophisticated comparison of objects.
            </summary>
    </member>
    <member name="F:Zhaord.ComparableObject.HashMultiplier">
      <summary>
            The hash multiplier.
            </summary>
    </member>
    <member name="F:Zhaord.ComparableObject.signatureProperties">
      <summary>
            This static member caches the domain signature properties to avoid looking them up for
            each instance of the same type.
            A description of the ThreadStatic attribute may be found at
            http://www.dotnetjunkies.com/WebLog/chris.taylor/archive/2005/08/18/132026.aspx
            </summary>
    </member>
    <member name="F:Zhaord.ComparableObject.extraSignatureProperties">
      <summary>
            The _extra signature properties.
            </summary>
    </member>
    <member name="M:Zhaord.ComparableObject.Equals(System.Object)">
      <summary>
            The equals.
            </summary>
      <param name="obj">
            The obj.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.ComparableObject.GetHashCode">
      <summary>
            Used to provide the hashcode identifier of an object using the signature
            properties of the object; Since it is recommended that GetHashCode change infrequently,
            if at all, in an object's lifetime; it's important that properties are carefully
            selected which truly represent the signature of an object.
            </summary>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:Zhaord.ComparableObject.GetSignatureProperties">
      <summary>
            The get signature properties.
            </summary>
      <returns>
            The <see><cref>IEnumerable</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.ComparableObject.GetTypeUnproxied">
      <summary>
            Returns the real underlying type of proxied objects.
            </summary>
      <returns>
            The <see cref="T:System.Type" />.
            </returns>
    </member>
    <member name="M:Zhaord.ComparableObject.HasSameSignatureAs(Zhaord.ComparableObject)">
      <summary>
            You may override this method to provide your own comparison routine.
            </summary>
      <param name="compareTo">
            The compare To.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.ComparableObject.GetSignaturePropertiesCore">
      <summary>
            Enforces the template method pattern to have child objects determine which specific
            properties should and should not be included in the object signature comparison.
            </summary>
      <returns>
            The <see><cref>IEnumerable</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.ComparableObject.RegisterSignatureProperty(System.Reflection.PropertyInfo)">
      <summary>
            Adds an extra property to the type specific signature properties list.
            </summary>
      <param name="propertyInfo">
            The property to add.
            </param>
      <remarks>
            Both lists are <c>unioned</c>, so
            that no duplicates can occur within the global descriptor collection.
            </remarks>
    </member>
    <member name="M:Zhaord.ComparableObject.RegisterSignatureProperty(System.String)">
      <summary>
            Adds an extra property to the type specific signature properties list.
            </summary>
      <param name="propertyName">
            Name of the property to add.
            </param>
      <remarks>
            Both lists are <c>unioned</c>, so
            that no duplicates can occur within the global descriptor collection.
            </remarks>
    </member>
    <member name="T:Zhaord.ComparableObject`1">
      <summary>
            The comparable object.
            </summary>
      <typeparam name="T">
            泛型
            </typeparam>
    </member>
    <member name="M:Zhaord.ComparableObject`1.Equals(`0)">
      <summary>
            The equals.
            </summary>
      <param name="other">
            The other.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.ComparableObject`1.RegisterSignatureProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <summary>
            Adds an extra property to the type specific signature properties list.
            </summary>
      <param name="expression">
            The lambda expression for the property to add.
            </param>
      <remarks>
            Both lists are <c>unioned</c>, so
            that no duplicates can occur within the global descriptor collection.
            </remarks>
    </member>
    <member name="T:Zhaord.Configuration.JsonPersistAttribute">
      <summary>
            Marker attribute. Indicates that the settings should
            be persisted as a JSON string rather than splitted
            into single properties.
            </summary>
    </member>
    <member name="T:Zhaord.Data.DataSettings">
      <summary>
            The data settings.
            </summary>
    </member>
    <member name="F:Zhaord.Data.DataSettings.FileName">
      <summary>
            The filename.
            </summary>
    </member>
    <member name="F:Zhaord.Data.DataSettings.Separator">
      <summary>
            The separator.
            </summary>
    </member>
    <member name="F:Zhaord.Data.DataSettings.ReaderWriterLock">
      <summary>
            The s_rw lock.
            </summary>
    </member>
    <member name="F:Zhaord.Data.DataSettings.current">
      <summary>
            The current.
            </summary>
    </member>
    <member name="F:Zhaord.Data.DataSettings.settingsFactory">
      <summary>
            The s_settings factory.
            </summary>
    </member>
    <member name="F:Zhaord.Data.DataSettings.installed">
      <summary>
            The installed.
            </summary>
    </member>
    <member name="F:Zhaord.Data.DataSettings.testMode">
      <summary>
            The s_ test mode.
            </summary>
    </member>
    <member name="M:Zhaord.Data.DataSettings.#ctor">
      <summary>
            Prevents a default instance of the <see cref="T:Zhaord.Data.DataSettings" /> class from being created.
            </summary>
    </member>
    <member name="M:Zhaord.Data.DataSettings.SetDefaultFactory(System.Func{Zhaord.Data.DataSettings})">
      <summary>
            The set default factory.
            </summary>
      <param name="factory">
            The factory.
            </param>
    </member>
    <member name="M:Zhaord.Data.DataSettings.DatabaseIsInstalled">
      <summary>
            The database is installed.
            </summary>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Data.DataSettings.Reload">
      <summary>
            The reload.
            </summary>
    </member>
    <member name="M:Zhaord.Data.DataSettings.Delete">
      <summary>
            The delete.
            </summary>
    </member>
    <member name="M:Zhaord.Data.DataSettings.IsValid">
      <summary>
            The is valid.
            </summary>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Data.DataSettings.Load">
      <summary>
            The load.
            </summary>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Data.DataSettings.Reset">
      <summary>
            The reset.
            </summary>
    </member>
    <member name="M:Zhaord.Data.DataSettings.Save">
      <summary>
            The save.
            </summary>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Data.DataSettings.SetTestMode(System.Boolean)">
      <summary>
            The set test mode.
            </summary>
      <param name="isTestMode">
            The is test mode.
            </param>
    </member>
    <member name="M:Zhaord.Data.DataSettings.ParseSettings(System.String)">
      <summary>
            The parse settings.
            </summary>
      <param name="text">
            The text.
            </param>
      <returns>
            The <see><cref>IDictionary</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Data.DataSettings.SerializeSettings">
      <summary>
            The serialize settings.
            </summary>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="P:Zhaord.Data.DataSettings.Current">
      <summary>
            Gets the current.
            </summary>
    </member>
    <member name="P:Zhaord.Data.DataSettings.AppVersion">
      <summary>
            Gets or sets the app version.
            </summary>
    </member>
    <member name="P:Zhaord.Data.DataSettings.DataProvider">
      <summary>
            Gets or sets the data provider.
            </summary>
    </member>
    <member name="P:Zhaord.Data.DataSettings.ProviderInvariantName">
      <summary>
            Gets the provider invariant name.
            </summary>
    </member>
    <member name="P:Zhaord.Data.DataSettings.ProviderFriendlyName">
      <summary>
            Gets the provider friendly name.
            </summary>
    </member>
    <member name="P:Zhaord.Data.DataSettings.IsSqlServer">
      <summary>
            Gets a value indicating whether is sql server.
            </summary>
    </member>
    <member name="P:Zhaord.Data.DataSettings.DataConnectionString">
      <summary>
            Gets or sets the data connection string.
            </summary>
    </member>
    <member name="P:Zhaord.Data.DataSettings.RawDataSettings">
      <summary>
            Gets the raw data settings.
            </summary>
    </member>
    <member name="T:Zhaord.Data.IActivatable">
      <summary>
            The Activatable interface.
            </summary>
    </member>
    <member name="P:Zhaord.Data.IActivatable.IsActive">
      <summary>
            Gets a value indicating whether is active.
            </summary>
    </member>
    <member name="T:Zhaord.Data.Notifies.INotifier">
      <summary>
            The Notifier interface.
            </summary>
    </member>
    <member name="M:Zhaord.Data.Notifies.INotifier.Add(Zhaord.Data.Notifies.NotifyType,Zhaord.Localization.LocalizedString,System.Boolean)">
      <summary>
            The add.
            </summary>
      <param name="type">
            The type.
            </param>
      <param name="message">
            The message.
            </param>
      <param name="durable">
            The durable.
            </param>
    </member>
    <member name="P:Zhaord.Data.Notifies.INotifier.Entries">
      <summary>
            Gets the entries.
            </summary>
    </member>
    <member name="T:Zhaord.Data.Notifies.NotifierExtension">
      <summary>
            The notifier extension.
            </summary>
    </member>
    <member name="M:Zhaord.Data.Notifies.NotifierExtension.Information(Zhaord.Data.Notifies.INotifier,Zhaord.Localization.LocalizedString,System.Boolean)">
      <summary>
            The information.
            </summary>
      <param name="notifier">
            The notifier.
            </param>
      <param name="message">
            The message.
            </param>
      <param name="durable">
            The durable.
            </param>
    </member>
    <member name="M:Zhaord.Data.Notifies.NotifierExtension.Success(Zhaord.Data.Notifies.INotifier,Zhaord.Localization.LocalizedString,System.Boolean)">
      <summary>
            The success.
            </summary>
      <param name="notifier">
            The notifier.
            </param>
      <param name="message">
            The message.
            </param>
      <param name="durable">
            The durable.
            </param>
    </member>
    <member name="M:Zhaord.Data.Notifies.NotifierExtension.Warning(Zhaord.Data.Notifies.INotifier,Zhaord.Localization.LocalizedString,System.Boolean)">
      <summary>
            The warning.
            </summary>
      <param name="notifier">
            The notifier.
            </param>
      <param name="message">
            The message.
            </param>
      <param name="durable">
            The durable.
            </param>
    </member>
    <member name="M:Zhaord.Data.Notifies.NotifierExtension.Error(Zhaord.Data.Notifies.INotifier,Zhaord.Localization.LocalizedString,System.Boolean)">
      <summary>
            The error.
            </summary>
      <param name="notifier">
            The notifier.
            </param>
      <param name="message">
            The message.
            </param>
      <param name="durable">
            The durable.
            </param>
    </member>
    <member name="T:Zhaord.Data.Notifies.Notifier">
      <summary>
            The notifier.
            </summary>
    </member>
    <member name="F:Zhaord.Data.Notifies.Notifier.entries">
      <summary>
            The entries.
            </summary>
    </member>
    <member name="M:Zhaord.Data.Notifies.Notifier.Add(Zhaord.Data.Notifies.NotifyType,Zhaord.Localization.LocalizedString,System.Boolean)">
      <summary>
            The add.
            </summary>
      <param name="type">
            The type.
            </param>
      <param name="message">
            The message.
            </param>
      <param name="durable">
            The durable.
            </param>
    </member>
    <member name="P:Zhaord.Data.Notifies.Notifier.Entries">
      <summary>
            Gets the entries.
            </summary>
    </member>
    <member name="T:Zhaord.Data.Notifies.NotifyEntry">
      <summary>
            The notify entry.
            </summary>
    </member>
    <member name="P:Zhaord.Data.Notifies.NotifyEntry.Type">
      <summary>
            Gets or sets the type.
            </summary>
    </member>
    <member name="P:Zhaord.Data.Notifies.NotifyEntry.Message">
      <summary>
            Gets or sets the message.
            </summary>
    </member>
    <member name="P:Zhaord.Data.Notifies.NotifyEntry.Durable">
      <summary>
            Gets or sets a value indicating whether durable.
            </summary>
    </member>
    <member name="T:Zhaord.Data.Notifies.NotifyType">
      <summary>
            The notify type.
            </summary>
    </member>
    <member name="F:Zhaord.Data.Notifies.NotifyType.Info">
      <summary>
            The info.
            </summary>
    </member>
    <member name="F:Zhaord.Data.Notifies.NotifyType.Success">
      <summary>
            The success.
            </summary>
    </member>
    <member name="F:Zhaord.Data.Notifies.NotifyType.Warning">
      <summary>
            The warning.
            </summary>
    </member>
    <member name="F:Zhaord.Data.Notifies.NotifyType.Error">
      <summary>
            The error.
            </summary>
    </member>
    <member name="T:Zhaord.DependencyManagement.ContainerManager">
      <summary>
            The container manager.
            </summary>
    </member>
    <member name="F:Zhaord.DependencyManagement.ContainerManager.container">
      <summary>
            The container.
            </summary>
    </member>
    <member name="M:Zhaord.DependencyManagement.ContainerManager.#ctor(Autofac.IContainer)">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.DependencyManagement.ContainerManager" /> class.
            </summary>
      <param name="container">
            The container.
            </param>
    </member>
    <member name="M:Zhaord.DependencyManagement.ContainerManager.Resolve``1(System.String,Autofac.ILifetimeScope)">
      <summary>
            The resolve.
            </summary>
      <param name="key">
            The key.
            </param>
      <param name="scope">
            The scope.
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see cref="!:T" />.
            </returns>
    </member>
    <member name="M:Zhaord.DependencyManagement.ContainerManager.ResolveNamed``1(System.String,Autofac.ILifetimeScope)">
      <summary>
            The resolve named.
            </summary>
      <param name="name">
            The name.
            </param>
      <param name="scope">
            The scope.
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see cref="!:T" />.
            </returns>
    </member>
    <member name="M:Zhaord.DependencyManagement.ContainerManager.Resolve(System.Type,Autofac.ILifetimeScope)">
      <summary>
            The resolve.
            </summary>
      <param name="type">
            The type.
            </param>
      <param name="scope">
            The scope.
            </param>
      <returns>
            The <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Zhaord.DependencyManagement.ContainerManager.ResolveNamed(System.String,System.Type,Autofac.ILifetimeScope)">
      <summary>
            The resolve named.
            </summary>
      <param name="name">
            The name.
            </param>
      <param name="type">
            The type.
            </param>
      <param name="scope">
            The scope.
            </param>
      <returns>
            The <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Zhaord.DependencyManagement.ContainerManager.ResolveAll``1(System.String,Autofac.ILifetimeScope)">
      <summary>
            The resolve all.
            </summary>
      <param name="key">
            The key.
            </param>
      <param name="scope">
            The scope.
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see><cref>T[]</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.DependencyManagement.ContainerManager.ResolveUnregistered``1(Autofac.ILifetimeScope)">
      <summary>
            The resolve unregistered.
            </summary>
      <param name="scope">
            The scope.
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see cref="!:T" />.
            </returns>
    </member>
    <member name="M:Zhaord.DependencyManagement.ContainerManager.ResolveUnregistered(System.Type,Autofac.ILifetimeScope)">
      <summary>
            The resolve unregistered.
            </summary>
      <param name="type">
            The type.
            </param>
      <param name="scope">
            The scope.
            </param>
      <returns>
            The <see cref="T:System.Object" />.
            </returns>
      <exception cref="T:Zhaord.ZhaordException">
            异常
            </exception>
    </member>
    <member name="M:Zhaord.DependencyManagement.ContainerManager.TryResolve(System.Type,Autofac.ILifetimeScope,System.Object@)">
      <summary>
            The try resolve.
            </summary>
      <param name="serviceType">
            The service type.
            </param>
      <param name="scope">
            The scope.
            </param>
      <param name="instance">
            The instance.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.DependencyManagement.ContainerManager.TryResolve``1(Autofac.ILifetimeScope,``0@)">
      <summary>
            The try resolve.
            </summary>
      <param name="scope">
            The scope.
            </param>
      <param name="instance">
            The instance.
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.DependencyManagement.ContainerManager.IsRegistered(System.Type,Autofac.ILifetimeScope)">
      <summary>
            The is registered.
            </summary>
      <param name="serviceType">
            The service type.
            </param>
      <param name="scope">
            The scope.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.DependencyManagement.ContainerManager.ResolveOptional(System.Type,Autofac.ILifetimeScope)">
      <summary>
            The resolve optional.
            </summary>
      <param name="serviceType">
            The service type.
            </param>
      <param name="scope">
            The scope.
            </param>
      <returns>
            The <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Zhaord.DependencyManagement.ContainerManager.InjectProperties``1(``0,Autofac.ILifetimeScope)">
      <summary>
            The inject properties.
            </summary>
      <param name="instance">
            The instance.
            </param>
      <param name="scope">
            The scope.
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see cref="!:T" />.
            </returns>
    </member>
    <member name="M:Zhaord.DependencyManagement.ContainerManager.InjectUnsetProperties``1(``0,Autofac.ILifetimeScope)">
      <summary>
            The inject unset properties.
            </summary>
      <param name="instance">
            The instance.
            </param>
      <param name="scope">
            The scope.
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see cref="!:T" />.
            </returns>
    </member>
    <member name="M:Zhaord.DependencyManagement.ContainerManager.Scope">
      <summary>
            The scope.
            </summary>
      <returns>
            The <see cref="T:Autofac.ILifetimeScope" />.
            </returns>
    </member>
    <member name="P:Zhaord.DependencyManagement.ContainerManager.Container">
      <summary>
            Gets the container.
            </summary>
    </member>
    <member name="T:Zhaord.DependencyManagement.ContainerManagerExtensions">
      <summary>
            The container manager extensions.
            </summary>
    </member>
    <member name="M:Zhaord.DependencyManagement.ContainerManagerExtensions.WithStaticCache``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
      <summary>
            The with static cache.
            </summary>
      <param name="registration">
            The registration.
            </param>
      <typeparam name="TLimit">
      </typeparam>
      <typeparam name="TReflectionActivatorData">
      </typeparam>
      <typeparam name="TStyle">
      </typeparam>
      <returns>
            The <see><cref>IRegistrationBuilder</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.DependencyManagement.ContainerManagerExtensions.WithAspNetCache``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
      <summary>
            The with asp net cache.
            </summary>
      <param name="registration">
            The registration.
            </param>
      <typeparam name="TLimit">
      </typeparam>
      <typeparam name="TReflectionActivatorData">
      </typeparam>
      <typeparam name="TStyle">
      </typeparam>
      <returns>
            The <see><cref>IRegistrationBuilder</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.DependencyManagement.ContainerManagerExtensions.WithNullCache``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
      <summary>
            The with null cache.
            </summary>
      <param name="registration">
            The registration.
            </param>
      <typeparam name="TLimit">
      </typeparam>
      <typeparam name="TReflectionActivatorData">
      </typeparam>
      <typeparam name="TStyle">
      </typeparam>
      <returns>
            The <see><cref>IRegistrationBuilder</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.DependencyManagement.IDependencyRegistrar.Register(Autofac.ContainerBuilder,Zhaord.TypeFinders.ITypeFinder,System.Boolean)">
      <summary>
            Lets the implementor register dependencies withing the global dependency container
            </summary>
      <param name="builder">The container builder instance</param>
      <param name="typeFinder">The type finder instance with wich all application types can be reflected</param>
      <param name="isActiveModule">
            Indicates, whether the assembly containing this registrar instance is an active (installed) plugin assembly.
            The value is always <c>true</c>, if the containing assembly is not a plugin type.
            </param>
    </member>
    <member name="T:Zhaord.DisposableObject">
      <summary>
            The disposable object.
            </summary>
    </member>
    <member name="F:Zhaord.DisposableObject.disposed">
      <summary>
            The disposed.
            </summary>
    </member>
    <member name="M:Zhaord.DisposableObject.Finalize">
      <summary>
            Finalizes an instance of the <see cref="T:Zhaord.DisposableObject" /> class. 
            </summary>
    </member>
    <member name="M:Zhaord.DisposableObject.Dispose">
      <summary>
            The dispose.
            </summary>
    </member>
    <member name="M:Zhaord.DisposableObject.DisposeEnumerable(System.Collections.IEnumerable)">
      <summary>
            The dispose enumerable.
            </summary>
      <param name="enumerable">
            The enumerable.
            </param>
    </member>
    <member name="M:Zhaord.DisposableObject.DisposeDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
      <summary>
            The dispose dictionary.
            </summary>
      <param name="dictionary">
            The dictionary.
            </param>
      <typeparam name="TK">
            泛型TK
            </typeparam>
      <typeparam name="TV">
            泛型TV
            </typeparam>
    </member>
    <member name="M:Zhaord.DisposableObject.DisposeDictionary(System.Collections.IDictionary)">
      <summary>
            The dispose dictionary.
            </summary>
      <param name="dictionary">
            The dictionary.
            </param>
    </member>
    <member name="M:Zhaord.DisposableObject.DisposeMember(System.Object)">
      <summary>
            The dispose member.
            </summary>
      <param name="member">
            The member.
            </param>
    </member>
    <member name="M:Zhaord.DisposableObject.OnDispose(System.Boolean)">
      <summary>
            The on dispose.
            </summary>
      <param name="disposing">
            The disposing.
            </param>
    </member>
    <member name="M:Zhaord.DisposableObject.CheckDisposed">
      <summary>
            The check disposed.
            </summary>
      <exception cref="T:System.Exception">
            异常
            </exception>
    </member>
    <member name="M:Zhaord.DisposableObject.CheckDisposed(System.String)">
      <summary>
            The check disposed.
            </summary>
      <param name="errorMessage">
            The error message.
            </param>
      <exception cref="T:System.Exception">
            异常
            </exception>
    </member>
    <member name="M:Zhaord.DisposableObject.Dispose(System.Boolean)">
      <summary>
            The dispose.
            </summary>
      <param name="disposing">
            The disposing.
            </param>
    </member>
    <member name="P:Zhaord.DisposableObject.IsDisposed">
      <summary>
            Gets a value indicating whether is disposed.
            </summary>
    </member>
    <member name="T:Zhaord.Engines.EngineContext">
      <summary>
            Provides access to the singleton instance of the SmartStore engine.
            </summary>
    </member>
    <member name="M:Zhaord.Engines.EngineContext.Initialize(System.Boolean,Zhaord.Engines.IEngine)">
      <summary>
            Initializes a static instance of the SmartStore factory.
            </summary>
      <param name="forceRecreate">
            Creates a new factory instance even though the factory has been previously initialized.
            </param>
      <param name="engine">
            A custom implementation of <see cref="T:Zhaord.Engines.IEngine" /> to use instead of the built-in engine
            </param>
      <returns>
            The <see cref="T:Zhaord.Engines.IEngine" />.
            </returns>
    </member>
    <member name="M:Zhaord.Engines.EngineContext.Replace(Zhaord.Engines.IEngine)">
      <summary>
            Sets the static engine instance to the supplied engine. Use this method to supply your own engine implementation.
            </summary>
      <param name="engine">
            The engine to use.
            </param>
      <remarks>
            Only use this method if you know what you're doing.
            </remarks>
    </member>
    <member name="M:Zhaord.Engines.EngineContext.CreateEngineInstance">
      <summary>
            Creates a factory instance and adds a http application injecting facility.
            </summary>
      <returns>A new factory</returns>
    </member>
    <member name="P:Zhaord.Engines.EngineContext.Current">
      <summary>Gets the singleton SmartStore engine used to access SmartStore services.</summary>
    </member>
    <member name="T:Zhaord.Engines.IEngine">
      <summary>
            The Engine interface.
            IOC引擎接口
            </summary>
    </member>
    <member name="M:Zhaord.Engines.IEngine.Initialize">
      <summary>
            The initialize.
            初始化
            </summary>
    </member>
    <member name="M:Zhaord.Engines.IEngine.Resolve``1(System.String)">
      <summary>
            The resolve.
            解析
            </summary>
      <param name="name">
            The name.
            名称
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see cref="!:T" />.
            </returns>
    </member>
    <member name="M:Zhaord.Engines.IEngine.Resolve(System.Type,System.String)">
      <summary>
            The resolve.
            解析
            </summary>
      <param name="type">
            The type.
            类型
            </param>
      <param name="name">
            The name.
            名称
            </param>
      <returns>
            The <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Zhaord.Engines.IEngine.ResolveAll``1">
      <summary>
            The resolve all.
            解析所有
            </summary>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see><cref>T[]</cref></see>
                .
            </returns>
    </member>
    <member name="P:Zhaord.Engines.IEngine.ContainerManager">
      <summary>
            Gets the container manager.
            获取 container manager
            </summary>
    </member>
    <member name="T:Zhaord.Engines.Engine">
      <summary>
            The engine.
            </summary>
    </member>
    <member name="F:Zhaord.Engines.Engine.containerManager">
      <summary>
            The container manager.
            </summary>
    </member>
    <member name="M:Zhaord.Engines.Engine.RunStartupTasks">
      <summary>
            The run startup tasks.
            </summary>
    </member>
    <member name="M:Zhaord.Engines.Engine.CreateTypeFinder">
      <summary>
            The create type finder.
            </summary>
      <returns>
            The <see cref="T:Zhaord.TypeFinders.ITypeFinder" />.
            </returns>
    </member>
    <member name="M:Zhaord.Engines.Engine.CreateDependencyResolver(Autofac.IContainer)">
      <summary>
            The create dependency resolver.
            </summary>
      <param name="container">
            The container.
            </param>
      <returns>
            The <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Zhaord.Engines.Engine.RegisterDependencies">
      <summary>
            The register dependencies.
            </summary>
      <returns>
            The <see cref="P:Zhaord.Engines.Engine.ContainerManager" />.
            </returns>
    </member>
    <member name="M:Zhaord.Engines.Engine.Initialize">
      <summary>
            Initialize components and plugins in the sm environment.
            </summary>
    </member>
    <member name="M:Zhaord.Engines.Engine.Resolve``1(System.String)">
      <summary>
            The resolve.
            </summary>
      <param name="name">
            The name.
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see cref="!:T" />.
            </returns>
    </member>
    <member name="M:Zhaord.Engines.Engine.Resolve(System.Type,System.String)">
      <summary>
            The resolve.
            </summary>
      <param name="type">
            The type.
            </param>
      <param name="name">
            The name.
            </param>
      <returns>
            The <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Zhaord.Engines.Engine.ResolveAll``1">
      <summary>
            The resolve all.
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
            The <see cref="!:T[]" />.
            </returns>
    </member>
    <member name="P:Zhaord.Engines.Engine.Container">
      <summary>
            Gets the container.
            </summary>
    </member>
    <member name="P:Zhaord.Engines.Engine.ContainerManager">
      <summary>
            Gets the container manager.
            </summary>
    </member>
    <member name="T:Zhaord.Error">
      <summary>
            The error.
            错误类
            </summary>
    </member>
    <member name="M:Zhaord.Error.Application(System.String,System.Object[])">
      <summary>
            The application.
            应用程序异常
            </summary>
      <param name="message">
            The message.
            消息
            </param>
      <param name="args">
            The args.
            参数
            </param>
      <returns>
            The <see><cref>Exception</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Error.Application(System.Exception,System.String,System.Object[])">
      <summary>
            The application.
            应用程序异常
            </summary>
      <param name="innerException">
            The inner exception.
            内部异常
            </param>
      <param name="message">
            The message.
            消息
            </param>
      <param name="args">
            The args.
            参数
            </param>
      <returns>
            The <see><cref>Exception</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Error.ArgumentNullOrEmpty(System.Func{System.String})">
      <summary>
            The argument null or empty.
            参数非空异常
            </summary>
      <param name="arg">
            The arg.
            参数
            </param>
      <returns>
            The <see><cref>Exception</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Error.ArgumentNull(System.String)">
      <summary>
            The argument null.
            参数非空异常
            </summary>
      <param name="argName">
            The arg name.
            参数名称
            </param>
      <returns>
            The <see><cref>Exception</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Error.ArgumentNull``1(System.Func{``0})">
      <summary>
            The argument null.
            参数非空异常
            </summary>
      <param name="arg">
            The arg.
            参数
            </param>
      <typeparam name="T">
            类型
            </typeparam>
      <returns>
            The <see><cref>Exception</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Error.ArgumentOutOfRange``1(System.Func{``0})">
      <summary>
            The argument out of range.
            超出范围异常
            </summary>
      <param name="arg">
            The arg.
            参数
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see><cref>Exception</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Error.ArgumentOutOfRange(System.String)">
      <summary>
            The argument out of range.
            超出范围异常
            </summary>
      <param name="argName">
            The arg name.
            参数名称
            </param>
      <returns>
            The <see><cref>Exception</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Error.ArgumentOutOfRange(System.String,System.String,System.Object[])">
      <summary>
            The argument out of range.
            超出范围异常
            </summary>
      <param name="argName">
            The arg name.
            参数名称
            </param>
      <param name="message">
            The message.
            消息
            </param>
      <param name="args">
            The args.
            </param>
      <returns>
            The <see><cref>Exception</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Error.Argument(System.String,System.String,System.Object[])">
      <summary>
            The argument.
            参数异常
            </summary>
      <param name="argName">
            The arg name.
            参数名称
            </param>
      <param name="message">
            The message.
            消息
            </param>
      <param name="args">
            The args.
            </param>
      <returns>
            The <see><cref>Exception</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Error.Argument``1(System.Func{``0},System.String,System.Object[])">
      <summary>
            The argument.
            参数异常
            </summary>
      <param name="arg">
            The arg.
            参数
            </param>
      <param name="message">
            The message.
            消息
            </param>
      <param name="args">
            The args.
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see><cref>Exception</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Error.InvalidOperation(System.String,System.Object[])">
      <summary>
            The invalid operation.
            无效操作异常
            </summary>
      <param name="message">
            The message.
            消息
            </param>
      <param name="args">
            The args.
            参数
            </param>
      <returns>
            The <see><cref>Exception</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Error.InvalidOperation(System.String,System.Exception,System.Object[])">
      <summary>
            The invalid operation.
            无效操作异常
            </summary>
      <param name="message">
            The message.
            消息
            </param>
      <param name="innerException">
            The inner exception.
            内部异常
            </param>
      <param name="args">
            The args.
            参数
            </param>
      <returns>
            The <see><cref>Exception</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Error.InvalidOperation``1(System.String,System.Func{``0})">
      <summary>
            The invalid operation.
            无效操作异常
            </summary>
      <param name="message">
            The message.
            消息
            </param>
      <param name="member">
            The member.
            成员
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see><cref>Exception</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Error.InvalidOperation``1(System.String,System.Exception,System.Func{``0})">
      <summary>
            The invalid operation.
            无效操作异常
            </summary>
      <param name="message">
            The message.
            消息
            </param>
      <param name="innerException">
            The inner exception.
            内部异常
            </param>
      <param name="member">
            The member.
            成员
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see><cref>Exception</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Error.InvalidCast(System.Type,System.Type)">
      <summary>
            The invalid cast.
            类型转换异常
            </summary>
      <param name="fromType">
            The from type.
            来源类型
            </param>
      <param name="toType">
            The to type.
            转换类型
            </param>
      <returns>
            The <see><cref>Exception</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Error.InvalidCast(System.Type,System.Type,System.Exception)">
      <summary>
            The invalid cast.
            类型转换异常
            </summary>
      <param name="fromType">
            The from type.
            来源类型
            </param>
      <param name="toType">
            The to type.
            目标类型
            </param>
      <param name="innerException">
            The inner exception.
            内部异常
            </param>
      <returns>
            The <see><cref>Exception</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Error.NotSupported">
      <summary>
            The not supported.
            不支持异常
            </summary>
      <returns>
            The <see><cref>Exception</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Error.NotImplemented">
      <summary>
            The not implemented.
            未实现异常
            </summary>
      <returns>
            The <see><cref>Exception</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Error.ObjectDisposed(System.String)">
      <summary>
            The object disposed.
            对象已注销异常
            </summary>
      <param name="objectName">
            The object name.
            对象名称
            </param>
      <returns>
            The <see><cref>Exception</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Error.ObjectDisposed(System.String,System.String,System.Object[])">
      <summary>
            The object disposed.
            对象已注销异常
            </summary>
      <param name="objectName">
            The object name.
            对象名称
            </param>
      <param name="message">
            The message.
            消息
            </param>
      <param name="args">
            The args.
            参数
            </param>
      <returns>
            The <see><cref>Exception</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Error.NoElements">
      <summary>
            The no elements.
            无元素异常
            </summary>
      <returns>
            The <see><cref>Exception</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Error.MoreThanOneElement">
      <summary>
            The more than one element.
            超过一个异常
            </summary>
      <returns>
            The <see><cref>Exception</cref></see>
                .
            </returns>
    </member>
    <member name="T:Zhaord.Expressions.RegularExpressions">
      <summary>
            The regular expressions.
            </summary>
    </member>
    <member name="F:Zhaord.Expressions.RegularExpressions.IsAlpha">
      <summary>
            The is alpha.
            </summary>
    </member>
    <member name="F:Zhaord.Expressions.RegularExpressions.IsAlphaNumeric">
      <summary>
            The is alpha numeric.
            </summary>
    </member>
    <member name="F:Zhaord.Expressions.RegularExpressions.IsNotNumber">
      <summary>
            The is not number.
            </summary>
    </member>
    <member name="F:Zhaord.Expressions.RegularExpressions.IsPositiveInteger">
      <summary>
            The is positive integer.
            </summary>
    </member>
    <member name="F:Zhaord.Expressions.RegularExpressions.IsNumeric">
      <summary>
            The is numeric.
            </summary>
    </member>
    <member name="F:Zhaord.Expressions.RegularExpressions.IsWebUrl">
      <summary>
            The is web url.
            </summary>
    </member>
    <member name="F:Zhaord.Expressions.RegularExpressions.IsEmail">
      <summary>
            The is email.
            </summary>
    </member>
    <member name="F:Zhaord.Expressions.RegularExpressions.RemoveHtml">
      <summary>
            The remove html.
            </summary>
    </member>
    <member name="F:Zhaord.Expressions.RegularExpressions.IsGuid">
      <summary>
            The is guid.
            </summary>
    </member>
    <member name="F:Zhaord.Expressions.RegularExpressions.IsBase64Guid">
      <summary>
            The is base 64 guid.
            </summary>
    </member>
    <member name="F:Zhaord.Expressions.RegularExpressions.IsCultureCode">
      <summary>
            The is culture code.
            </summary>
    </member>
    <member name="F:Zhaord.Expressions.RegularExpressions.IsYearRange">
      <summary>
            The is year range.
            </summary>
    </member>
    <member name="F:Zhaord.Expressions.RegularExpressions.IsIban">
      <summary>
            The is iban.
            </summary>
    </member>
    <member name="F:Zhaord.Expressions.RegularExpressions.IsBic">
      <summary>
            The is bic.
            </summary>
    </member>
    <member name="F:Zhaord.Expressions.RegularExpressions.ValidRealPattern">
      <summary>
            The valid real pattern.
            </summary>
    </member>
    <member name="F:Zhaord.Expressions.RegularExpressions.ValidIntegerPattern">
      <summary>
            The valid integer pattern.
            </summary>
    </member>
    <member name="F:Zhaord.Expressions.RegularExpressions.HasTwoDot">
      <summary>
            The has two dot.
            </summary>
    </member>
    <member name="F:Zhaord.Expressions.RegularExpressions.HasTwoMinus">
      <summary>
            The has two minus.
            </summary>
    </member>
    <member name="T:Zhaord.Extensions.CollectionExtensions">
      <summary>
            The collection extensions.
            集合扩展
            </summary>
    </member>
    <member name="M:Zhaord.Extensions.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            The add range.
            添加范围
            </summary>
      <param name="initial">
            The initial.
            最初
            </param>
      <param name="other">
            The other.
            需要添加的集合
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
    </member>
    <member name="M:Zhaord.Extensions.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
      <summary>
            The is null or empty.
            判断是否为非空
            </summary>
      <param name="source">
            The source.
            原
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.CollectionExtensions.EqualsAll``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
      <summary>
            The equals all.
            相等
            </summary>
      <param name="a">
            The a.
            集合a
            </param>
      <param name="b">
            The b.
            集合b
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="T:Zhaord.Extensions.ConversionExtensions">
      <summary>
            The conversion extensions.
            转换扩展
            </summary>
    </member>
    <member name="F:Zhaord.Extensions.ConversionExtensions.CustomTypeConverters">
      <summary>
            The s_custom type converters.
            </summary>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.#cctor">
      <summary>
            Initializes static members of the <see cref="T:Zhaord.Extensions.ConversionExtensions" /> class.
            </summary>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.Convert``1(System.Object)">
      <summary>
            The convert.
            </summary>
      <param name="value">
            The value.
            </param>
      <typeparam name="T">
      </typeparam>
      <returns>
            The <see cref="!:T" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.Convert``1(System.Object,System.Globalization.CultureInfo)">
      <summary>
            The convert.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="culture">
            The culture.
            </param>
      <typeparam name="T">
      </typeparam>
      <returns>
            The <see cref="!:T" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.Convert(System.Object,System.Type)">
      <summary>
            The convert.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="to">
            The to.
            </param>
      <returns>
            The <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.Convert(System.Object,System.Type,System.Globalization.CultureInfo)">
      <summary>
            The convert.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="to">
            The to.
            </param>
      <param name="culture">
            The culture.
            </param>
      <returns>
            The <see cref="T:System.Object" />.
            </returns>
      <exception cref="!:???">
      </exception>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.GetTypeConverter(System.Type)">
      <summary>
            The get type converter.
            </summary>
      <param name="type">
            The type.
            </param>
      <returns>
            The <see cref="T:System.ComponentModel.TypeConverter" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToHex(System.Int32)">
      <summary>
            The to hex.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.Char" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToKb(System.Int32)">
      <summary>
            Returns kilobytes
            </summary>
      <param name="value">
      </param>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToMb(System.Int32)">
      <summary>
            Returns megabytes
            </summary>
      <param name="value">
      </param>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToMinutes(System.Int32)">
      <summary>
            Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of minutes.
            </summary>
      <param name="minutes">
            number of minutes
            </param>
      <returns>
            A <see cref="T:System.TimeSpan" /> that represents a value.
            </returns>
      <example>
            3.Minutes()
            </example>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToSeconds(System.Int32)">
      <summary>
            Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of seconds.
            </summary>
      <param name="seconds">
            number of seconds
            </param>
      <returns>
            A <see cref="T:System.TimeSpan" /> that represents a value.
            </returns>
      <example>
            2.Seconds()
            </example>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToMilliseconds(System.Int32)">
      <summary>
            Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of milliseconds.
            </summary>
      <param name="milliseconds">
            milliseconds for this timespan
            </param>
      <returns>
            A <see cref="T:System.TimeSpan" /> that represents a value.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToDays(System.Int32)">
      <summary>
            Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of days.
            </summary>
      <param name="days">
            Number of days.
            </param>
      <returns>
            A <see cref="T:System.TimeSpan" /> that represents a value.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToHours(System.Int32)">
      <summary>
            Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of hours.
            </summary>
      <param name="hours">
            Number of hours.
            </param>
      <returns>
            A <see cref="T:System.TimeSpan" /> that represents a value.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToMinutes(System.Double)">
      <summary>
            Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of minutes.
            </summary>
      <param name="minutes">
            number of minutes
            </param>
      <returns>
            A <see cref="T:System.TimeSpan" /> that represents a value.
            </returns>
      <example>
            3D.Minutes()
            </example>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToHours(System.Double)">
      <summary>
            Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of hours.
            </summary>
      <param name="hours">
            number of hours
            </param>
      <returns>
            A <see cref="T:System.TimeSpan" /> that represents a value.
            </returns>
      <example>
            3D.Hours()
            </example>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToSeconds(System.Double)">
      <summary>
            Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of seconds.
            </summary>
      <param name="seconds">
            number of seconds
            </param>
      <returns>
            A <see cref="T:System.TimeSpan" /> that represents a value.
            </returns>
      <example>
            2D.Seconds()
            </example>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToMilliseconds(System.Double)">
      <summary>
            Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of milliseconds.
            </summary>
      <param name="milliseconds">
            milliseconds for this timespan
            </param>
      <returns>
            A <see cref="T:System.TimeSpan" /> that represents a value.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToDays(System.Double)">
      <summary>
            Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of days.
            </summary>
      <param name="days">
            Number of days, accurate to the milliseconds.
            </param>
      <returns>
            A <see cref="T:System.TimeSpan" /> that represents a value.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToEnum``1(System.String,``0)">
      <summary>
            The to enum.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="defaultValue">
            The default value.
            </param>
      <typeparam name="T">
      </typeparam>
      <returns>
            The <see cref="!:T" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToArray(System.String)">
      <summary>
            The to array.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="!:string[]" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToArray(System.String,System.Char[])">
      <summary>
            The to array.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="separator">
            The separator.
            </param>
      <returns>
            The <see cref="!:string[]" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToInt(System.String,System.Int32)">
      <summary>
            The to int.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="defaultValue">
            The default value.
            </param>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToFloat(System.String,System.Single)">
      <summary>
            The to float.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="defaultValue">
            The default value.
            </param>
      <returns>
            The <see cref="T:System.Single" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToBool(System.String,System.Boolean)">
      <summary>
            The to bool.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="defaultValue">
            The default value.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToDateTime(System.String,System.Nullable{System.DateTime})">
      <summary>
            The to date time.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="defaultValue">
            The default value.
            </param>
      <returns>
            The <see cref="!:DateTime?" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToDateTime(System.String,System.String[],System.Nullable{System.DateTime})">
      <summary>
            The to date time.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="formats">
            The formats.
            </param>
      <param name="defaultValue">
            The default value.
            </param>
      <returns>
            The <see cref="!:DateTime?" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToDateTime(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.Nullable{System.DateTime})">
      <summary>
            The to date time.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="formats">
            The formats.
            </param>
      <param name="provider">
            The provider.
            </param>
      <param name="styles">
            The styles.
            </param>
      <param name="defaultValue">
            The default value.
            </param>
      <returns>
            The <see cref="!:DateTime?" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToGuid(System.String)">
      <summary>
            The to guid.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.Guid" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToByteArray(System.String)">
      <summary>
            The to byte array.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="!:byte[]" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToVersion(System.String,System.Version)">
      <summary>
            The to version.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="defaultVersion">
            The default version.
            </param>
      <returns>
            The <see cref="T:System.Version" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToByteArray(System.IO.Stream)">
      <summary>
            The to byte array.
            </summary>
      <param name="stream">
            The stream.
            </param>
      <returns>
            The <see cref="!:byte[]" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.AsString(System.IO.Stream)">
      <summary>
            The as string.
            </summary>
      <param name="stream">
            The stream.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToObject(System.Byte[])">
      <summary>
            Converts a byte array into an object.
            </summary>
      <param name="bytes">
            Object to deserialize. May be null.
            </param>
      <returns>
            Deserialized object, or null if input was null.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToStream(System.Byte[])">
      <summary>
            The to stream.
            </summary>
      <param name="bytes">
            The bytes.
            </param>
      <returns>
            The <see cref="T:System.IO.Stream" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.AsString(System.Byte[])">
      <summary>
            The as string.
            </summary>
      <param name="bytes">
            The bytes.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.Hash(System.Byte[],System.Boolean)">
      <summary>
            Computes the MD5 hash of a byte array
            </summary>
      <param name="value">
            The byte array to compute the hash for
            </param>
      <param name="toBase64">
            The to Base 64.
            </param>
      <returns>
            The hash value
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToObject``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            The to object.
            </summary>
      <param name="values">
            The values.
            </param>
      <typeparam name="T">
      </typeparam>
      <returns>
            The <see cref="!:T" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ConversionExtensions.ToObject(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type)">
      <summary>
            The to object.
            </summary>
      <param name="values">
            The values.
            </param>
      <param name="objectType">
            The object type.
            </param>
      <returns>
            The <see cref="T:System.Object" />.
            </returns>
      <exception cref="!:???">
      </exception>
    </member>
    <member name="T:Zhaord.Extensions.DateTimeExtensions">
      <summary>
            The date time extensions.
            日期扩展
            </summary>
    </member>
    <member name="F:Zhaord.Extensions.DateTimeExtensions.BeginOfEpoch">
      <summary>
            The begin of epoch.
            </summary>
    </member>
    <member name="F:Zhaord.Extensions.DateTimeExtensions.MinDate">
      <summary>
            The min date.
            最小日期
            </summary>
    </member>
    <member name="F:Zhaord.Extensions.DateTimeExtensions.MaxDate">
      <summary>
            The max date.
            最大日期
            </summary>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.IsValid(System.DateTime)">
      <summary>
            The is valid.
            判断日期是否有效
            </summary>
      <param name="value">
            The value.
            值
            </param>
      <returns>
            The <see><cref>bool</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.GetLocalOffset(System.DateTime)">
      <summary>
            The get local offset.
            获取本地日期便宜
            </summary>
      <param name="value">
            The value.
            值
            </param>
      <returns>
            The <see><cref>string</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.ToUniversalTime(System.Nullable{System.DateTime})">
      <summary>
            Converts a nullable date/time value to UTC.
            转换可空日期到UTC
            </summary>
      <param name="dateTime">
            The nullable date/time
            可空日期
            </param>
      <returns>
            The nullable date/time in UTC
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.AssumeUniversalTime(System.DateTime)">
      <summary>
            Returns a copy of a date/time value with its kind
            set to <see cref="F:System.DateTimeKind.Utc" /> but does not perform
            any time-zone adjustment.
            </summary>
      <remarks>
            This method is useful when obtaining date/time values from sources
            that might not correctly set the UTC flag.
            </remarks>
      <param name="dateTime">
            The date/time
            </param>
      <returns>
            The same date/time with the UTC flag set
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.AssumeUniversalTime(System.Nullable{System.DateTime})">
      <summary>
            Returns a copy of a nullable date/time value with its kind
            set to <see cref="F:System.DateTimeKind.Utc" /> but does not perform
            any time-zone adjustment.
            </summary>
      <remarks>
            This method is useful when obtaining date/time values from sources
            that might not correctly set the UTC flag.
            </remarks>
      <param name="dateTime">
            The nullable date/time
            </param>
      <returns>
            The same nullable date/time with the UTC flag set
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.ToLocalTime(System.Nullable{System.DateTime})">
      <summary>
            Converts a nullable UTC date/time value to local time.
            </summary>
      <param name="dateTime">
            The nullable UTC date/time
            </param>
      <returns>
            The nullable UTC date/time as local time
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.GetEvenHourDate(System.Nullable{System.DateTime})">
      <summary>
            Returns a date that is rounded to the next even hour above the given
            date.
            <p>
            For example an input date with a time of 08:13:54 would result in a date
            with the time of 09:00:00. If the date's time is in the 23rd hour, the
            date's 'day' will be promoted, and the time will be set to 00:00:00.
            </p></summary>
      <param name="dateTime">
            the Date to round, if <see langword="null" /> the current time will
            be used
            </param>
      <returns>
            the new rounded date
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.GetEvenMinuteDate(System.Nullable{System.DateTime})">
      <summary>
            Returns a date that is rounded to the next even minute above the given
            date.
            <p>
            For example an input date with a time of 08:13:54 would result in a date
            with the time of 08:14:00. If the date's time is in the 59th minute,
            then the hour (and possibly the day) will be promoted.
            </p></summary>
      <param name="dateTime">
            The Date to round, if <see langword="null" /> the current time will  be used
            </param>
      <returns>
            The new rounded date
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.GetEvenMinuteDateBefore(System.Nullable{System.DateTime})">
      <summary>
            Returns a date that is rounded to the previous even minute below the
            given date.
            <p>
            For example an input date with a time of 08:13:54 would result in a date
            with the time of 08:13:00.
            </p></summary>
      <param name="dateTime">
            the Date to round, if <see langword="null" /> the current time will
            be used
            </param>
      <returns>
            the new rounded date
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.GetEvenSecondDate(System.Nullable{System.DateTime})">
      <summary>
            Returns a date that is rounded to the next even second above the given
            date.
            </summary>
      <param name="dateTime">
            the Date to round, if <see langword="null" /> the current time will
            be used
            </param>
      <returns>
            the new rounded date
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.GetEvenSecondDateBefore(System.Nullable{System.DateTime})">
      <summary>
            Returns a date that is rounded to the previous even second below the
            given date.
            <p>
            For example an input date with a time of 08:13:54.341 would result in a
            date with the time of 08:13:00.000.
            </p></summary>
      <param name="dateTime">
            the Date to round, if <see langword="null" /> the current time will
            be used
            </param>
      <returns>
            the new rounded date
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.GetNextGivenMinuteDate(System.Nullable{System.DateTime},System.Int32)">
      <summary>
            Returns a date that is rounded to the next even multiple of the given
            minute.
            <p>
            For example an input date with a time of 08:13:54, and an input
            minute-base of 5 would result in a date with the time of 08:15:00. The
            same input date with an input minute-base of 10 would result in a date
            with the time of 08:20:00. But a date with the time 08:53:31 and an
            input minute-base of 45 would result in 09:00:00, because the even-hour
            is the next 'base' for 45-minute intervals.
            </p><p>
            More examples: <table><tr><th>Input Time</th><th>Minute-Base</th><th>Result Time</th></tr><tr><td>11:16:41</td><td>20</td><td>11:20:00</td></tr><tr><td>11:36:41</td><td>20</td><td>11:40:00</td></tr><tr><td>11:46:41</td><td>20</td><td>12:00:00</td></tr><tr><td>11:26:41</td><td>30</td><td>11:30:00</td></tr><tr><td>11:36:41</td><td>30</td><td>12:00:00</td></tr><tr><td>11:16:41</td><td>17</td><td>11:17:00</td></tr><tr><td>11:17:41</td><td>17</td><td>11:34:00</td></tr><tr><td>11:52:41</td><td>17</td><td>12:00:00</td></tr><tr><td>11:52:41</td><td>5</td><td>11:55:00</td></tr><tr><td>11:57:41</td><td>5</td><td>12:00:00</td></tr><tr><td>11:17:41</td><td>0</td><td>12:00:00</td></tr><tr><td>11:17:41</td><td>1</td><td>11:08:00</td></tr></table></p></summary>
      <param name="dateTime">
            the Date to round, if <see langword="null" /> the current time willbe used
            </param>
      <param name="minuteBase">
            the base-minute to set the time on
            </param>
      <returns>
            The new rounded date
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.GetNextGivenSecondDate(System.Nullable{System.DateTime},System.Int32)">
      <summary>
            Returns a date that is rounded to the next even multiple of the given
            minute.
            <p>
            The rules for calculating the second are the same as those for
            calculating the minute in the method
            <see cref="M:Zhaord.Extensions.DateTimeExtensions.GetNextGivenMinuteDate(System.Nullable{System.DateTime},System.Int32)" />.
            </p></summary>
      <param name="dateTime">
            The date.
            </param>
      <param name="secondBase">
            The second base.
            </param>
      <returns>
            The <see cref="T:System.DateTime" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.TranslateTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)">
      <summary>
            Translate a date and time from a users timezone to the another
            (probably server) timezone to assist in creating a simple trigger with
            the right date and time.
            </summary>
      <param name="date">
            the date to translate
            </param>
      <param name="src">
            the original time-zone
            </param>
      <param name="dest">
            the destination time-zone
            </param>
      <returns>
            the translated UTC date
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.GetOffset(System.DateTime,System.TimeZoneInfo)">
      <summary>
            Gets the offset from UT for the given date in the given timezone,
            taking into account daylight savings.
            </summary>
      <param name="date">
            the date that is the base for the offset
            </param>
      <param name="tz">
            the time-zone to calculate to offset to
            </param>
      <returns>
            the offset
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.UseDaylightTime(System.TimeZoneInfo)">
      <summary>
            This functions determines if the TimeZone uses daylight saving time
            </summary>
      <param name="timezone">
            TimeZone instance to validate
            </param>
      <returns>
            True or false depending if daylight savings time is used
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.ToJavaScriptTicks(System.DateTime)">
      <summary>
            The to java script ticks.
            </summary>
      <param name="dateTime">
            The date time.
            </param>
      <returns>
            The <see cref="T:System.Int64" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.ToSerializationMode(System.DateTimeKind)">
      <summary>
            The to serialization mode.
            </summary>
      <param name="kind">
            The kind.
            </param>
      <returns>
            The <see cref="T:System.Xml.XmlDateTimeSerializationMode" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            超出范围异常
            </exception>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.GetFirstDayOfMonth(System.DateTime)">
      <summary>
            Get the first day of the month for
            any full date submitted
            </summary>
      <param name="date">
            日期
            </param>
      <returns>
            The <see cref="T:System.DateTime" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.GetLastDayOfMonth(System.DateTime)">
      <summary>
            Get the last day of the month for any
            full date
            </summary>
      <param name="date">
            日期
            </param>
      <returns>
            The <see cref="T:System.DateTime" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.ToStartOfTheDay(System.DateTime)">
      <summary>
            The to start of the day.
            设置一天最后的时分秒  00:00:00
            </summary>
      <param name="dt">
            The dt.
            </param>
      <returns>
            The <see cref="T:System.DateTime" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.ToStartOfTheDay(System.Nullable{System.DateTime})">
      <summary>
            The to end of the day.
            设置一天最后的时分秒  00:00:00
            </summary>
      <param name="dt">
            The dt.
            </param>
      <returns>
            The <see><cref>DateTime?</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.ToEndOfTheDay(System.DateTime)">
      <summary>
            The to end of the day.
            设置一天最后的时分秒  23:59:59
            </summary>
      <param name="dt">
            The dt.
            </param>
      <returns>
            The <see cref="T:System.DateTime" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.ToEndOfTheDay(System.Nullable{System.DateTime})">
      <summary>
            The to end of the day.
            设置一天最后的时分秒  23:59:59
            </summary>
      <param name="dt">
            The dt.
            </param>
      <returns>
            The <see><cref>DateTime?</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.ToUnixTime(System.DateTime)">
      <summary>
            Epoch time. Number of seconds since midnight (UTC) on 1st January 1970.
            </summary>
      <param name="date">
            The date.
            </param>
      <returns>
            The <see cref="T:System.Int64" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DateTimeExtensions.FromUnixTime(System.Int64)">
      <summary>
            UTC date based on number of seconds since midnight (UTC) on 1st January 1970.
            </summary>
      <param name="unixTime">
            The unix Time.
            </param>
      <returns>
            The <see cref="T:System.DateTime" />.
            </returns>
    </member>
    <member name="T:Zhaord.Extensions.DecimalExtensions">
      <summary>
            The decimal extensions.
            </summary>
    </member>
    <member name="M:Zhaord.Extensions.DecimalExtensions.FormatInvariant(System.Decimal,System.Int32)">
      <summary>
            Rounds and formats a decimal culture invariant
            </summary>
      <param name="value">
            The decimal
            </param>
      <param name="decimals">
            Rounding decimal number
            </param>
      <returns>
            Formated value
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DecimalExtensions.ToTaxPercentage(System.Decimal,System.Decimal,System.Nullable{System.Int32})">
      <summary>
            Calculates the tax (percental) from a gross and a net value.
            </summary>
      <param name="inclTax">
            Gross value
            </param>
      <param name="exclTax">
            Net value
            </param>
      <param name="decimals">
            Rounding decimal number
            </param>
      <returns>
            Tax percentage
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DecimalExtensions.ToSmallestCurrencyUnit(System.Decimal,System.MidpointRounding)">
      <summary>
            Converts to smallest currency uint, e.g. cents
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="rounding">
            The rounding.
            </param>
      <returns>
            Smallest currency unit
            </returns>
    </member>
    <member name="T:Zhaord.Extensions.DictionaryExtensions">
      <summary>
            The dictionary extensions.
            </summary>
    </member>
    <member name="M:Zhaord.Extensions.DictionaryExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>
            The add range.
            </summary>
      <param name="values">
            The values.
            </param>
      <param name="other">
            The other.
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <typeparam name="TU">
            泛型
            </typeparam>
      <exception cref="T:System.ArgumentException">
            参数异常
            </exception>
    </member>
    <member name="M:Zhaord.Extensions.DictionaryExtensions.Merge(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Object,System.Boolean)">
      <summary>
            The merge.
            </summary>
      <param name="instance">
            The instance.
            </param>
      <param name="key">
            The key.
            </param>
      <param name="value">
            The value.
            </param>
      <param name="replaceExisting">
            The replace existing.
            </param>
    </member>
    <member name="M:Zhaord.Extensions.DictionaryExtensions.Merge``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1},System.Boolean)">
      <summary>
            The merge.
            </summary>
      <param name="instance">
            The instance.
            </param>
      <param name="from">
            The from.
            </param>
      <param name="replaceExisting">
            The replace existing.
            </param>
      <typeparam name="T">
            泛型T
            </typeparam>
      <typeparam name="TU">
            泛型U
            </typeparam>
    </member>
    <member name="M:Zhaord.Extensions.DictionaryExtensions.AppendInValue(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.Object)">
      <summary>
            The append in value.
            </summary>
      <param name="instance">
            The instance.
            </param>
      <param name="key">
            The key.
            </param>
      <param name="separator">
            The separator.
            </param>
      <param name="value">
            The value.
            </param>
    </member>
    <member name="M:Zhaord.Extensions.DictionaryExtensions.PrependInValue(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.Object)">
      <summary>
            The prepend in value.
            </summary>
      <param name="instance">
            The instance.
            </param>
      <param name="key">
            The key.
            </param>
      <param name="separator">
            The separator.
            </param>
      <param name="value">
            The value.
            </param>
    </member>
    <member name="M:Zhaord.Extensions.DictionaryExtensions.GetValue``2(System.Collections.Generic.IDictionary{``0,System.Object},``0)">
      <summary>
            The get value.
            </summary>
      <param name="instance">
            The instance.
            </param>
      <param name="key">
            The key.
            </param>
      <typeparam name="TK">
            泛型K
            </typeparam>
      <typeparam name="T">
            泛型T
            </typeparam>
      <returns>
            The <see cref="!:T" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.DictionaryExtensions.ToExpandoObject(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
      <summary>
            The to expando object.
            </summary>
      <param name="source">
            The source.
            </param>
      <param name="castIfPossible">
            The cast if possible.
            </param>
      <returns>
            The <see cref="T:System.Dynamic.ExpandoObject" />.
            </returns>
    </member>
    <member name="T:Zhaord.Extensions.EnumerableExtensions">
      <summary>
            The enumerable extensions.
            <p>
            Enumerable扩展
            </p></summary>
    </member>
    <member name="M:Zhaord.Extensions.EnumerableExtensions.TakeOnEnumerator``1(System.Collections.Generic.IEnumerator{``0},System.Int32,Zhaord.Extensions.EnumerableExtensions.Status)">
      <summary>
            The take on enumerator.
            </summary>
      <param name="enumerator">
            The enumerator.
            </param>
      <param name="count">
            The count.
            </param>
      <param name="status">
            The status.
            </param>
      <typeparam name="T">
      </typeparam>
      <returns>
            The <see cref="T:System.Collections.IEnumerable" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.EnumerableExtensions.Chunk``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Slices the iteration over an enumerable by the given chunk size.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="items">
      </param>
      <param name="chunkSize">
            SIze of chunk
            </param>
      <returns>
            The sliced enumerable
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.EnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>
            Performs an action on each item while iterating through a list.
            This is a handy shortcut for <c>foreach(item in list) { ... }</c></summary>
      <typeparam name="T">
            The type of the items.
            </typeparam>
      <param name="source">
            The list, which holds the objects.
            </param>
      <param name="action">
            The action delegate which is called on each item while iterating.
            </param>
    </member>
    <member name="M:Zhaord.Extensions.EnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
      <summary>
            Performs an action on each item while iterating through a list.
            This is a handy shortcut for <c>foreach(item in list) { ... }</c></summary>
      <typeparam name="T">
            The type of the items.
            </typeparam>
      <param name="source">
            The list, which holds the objects.
            </param>
      <param name="action">
            The action delegate which is called on each item while iterating.
            </param>
    </member>
    <member name="M:Zhaord.Extensions.EnumerableExtensions.CastValid``1(System.Collections.IEnumerable)">
      <summary>
            The cast valid.
            </summary>
      <param name="source">
            The source.
            </param>
      <typeparam name="T">
      </typeparam>
      <returns>
            The <see cref="T:System.Collections.IEnumerable" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.EnumerableExtensions.AsReadOnly``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            The as read only.
            </summary>
      <param name="source">
            The source.
            </param>
      <typeparam name="T">
      </typeparam>
      <returns>
            The <see cref="!:ReadOnlyCollection" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.EnumerableExtensions.OrderByOrdinal``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            The order by ordinal.
            </summary>
      <param name="source">
            The source.
            </param>
      <typeparam name="T">
      </typeparam>
      <returns>
            The <see cref="T:System.Collections.IEnumerable" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.EnumerableExtensions.OrderByOrdinal``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
      <summary>
            The order by ordinal.
            </summary>
      <param name="source">
            The source.
            </param>
      <param name="descending">
            The descending.
            </param>
      <typeparam name="T">
      </typeparam>
      <returns>
            The <see cref="T:System.Collections.IEnumerable" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.EnumerableExtensions.ToMultimap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>
            The to multimap.
            </summary>
      <param name="source">
            The source.
            </param>
      <param name="keySelector">
            The key selector.
            </param>
      <param name="valueSelector">
            The value selector.
            </param>
      <typeparam name="TSource">
      </typeparam>
      <typeparam name="TKey">
      </typeparam>
      <typeparam name="TValue">
      </typeparam>
      <returns>
            The <see cref="!:Multimap" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.EnumerableExtensions.AddRange(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
      <summary>
            The add range.
            </summary>
      <param name="initial">
            The initial.
            </param>
      <param name="other">
            The other.
            </param>
    </member>
    <member name="M:Zhaord.Extensions.EnumerableExtensions.AsSerializable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Convenience API to allow an IEnumerable[T] (such as returned by Linq2Sql, NHibernate, EF etc.)
            to be serialized by DataContractSerializer.
            </summary>
      <typeparam name="T">
            The type of item.
            </typeparam>
      <param name="source">
            The original collection.
            </param>
      <returns>
            A serializable enumerable wrapper.
            </returns>
    </member>
    <member name="T:Zhaord.Extensions.EnumerableExtensions.DefaultReadOnlyCollection`1">
      <summary>
            The default read only collection.
            </summary>
      <typeparam name="T">
            泛型
            </typeparam>
    </member>
    <member name="F:Zhaord.Extensions.EnumerableExtensions.DefaultReadOnlyCollection`1.defaultCollection">
      <summary>
            The default collection.
            </summary>
    </member>
    <member name="P:Zhaord.Extensions.EnumerableExtensions.DefaultReadOnlyCollection`1.Empty">
      <summary>
            Gets the empty.
            </summary>
    </member>
    <member name="T:Zhaord.Extensions.EnumerableExtensions.Status">
      <summary>
            The status.
            </summary>
    </member>
    <member name="F:Zhaord.Extensions.EnumerableExtensions.Status.EndOfSequence">
      <summary>
            The end of sequence.
            </summary>
    </member>
    <member name="T:Zhaord.Extensions.EnumerableExtensions.IEnumerableWrapper`1">
      <summary>
            The i enumerable wrapper.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="F:Zhaord.Extensions.EnumerableExtensions.IEnumerableWrapper`1._collection">
      <summary>
            The _collection.
            </summary>
    </member>
    <member name="M:Zhaord.Extensions.EnumerableExtensions.IEnumerableWrapper`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.Extensions.EnumerableExtensions.IEnumerableWrapper`1" /> class.
            </summary>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="M:Zhaord.Extensions.EnumerableExtensions.IEnumerableWrapper`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.Extensions.EnumerableExtensions.IEnumerableWrapper`1" /> class.
            </summary>
      <param name="collection">
            The collection.
            </param>
    </member>
    <member name="M:Zhaord.Extensions.EnumerableExtensions.IEnumerableWrapper`1.Add(`0)">
      <summary>
            The add.
            </summary>
      <param name="item">
            The item.
            </param>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="M:Zhaord.Extensions.EnumerableExtensions.IEnumerableWrapper`1.GetEnumerator">
      <summary>
            The get enumerator.
            </summary>
      <returns>
            The <see cref="T:System.Collections.IEnumerator" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.EnumerableExtensions.IEnumerableWrapper`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            The get enumerator.
            </summary>
      <returns>
            The <see cref="T:System.Collections.IEnumerator" />.
            </returns>
    </member>
    <member name="T:Zhaord.Extensions.EnumExtensions">
      <summary>
            The enum extensions.
            </summary>
    </member>
    <member name="M:Zhaord.Extensions.EnumExtensions.GetFriendlyName(System.Enum)">
      <summary>
            Gets the <see cref="T:Zhaord.Attributes.EnumFriendlyNameAttribute" /> of an <see cref="T:System.Enum" /> 
            type value.
            </summary>
      <param name="value">
            The <see cref="T:System.Enum" /> type value.
            </param>
      <returns>
            A string containing the text of the
            <see cref="T:Zhaord.Attributes.EnumFriendlyNameAttribute" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.EnumExtensions.GetDescription(System.Enum)">
      <summary>
            Gets the <see cref="T:Zhaord.Attributes.EnumDescriptionAttribute" /> of an <see cref="T:System.Enum" /> 
            type value.
            </summary>
      <param name="value">
            The <see cref="T:System.Enum" /> type value.
            </param>
      <returns>
            A string containing the text of the
            <see cref="!:DescriptionAttribute" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.EnumExtensions.IsSet``1(``0,``0)">
      <summary>
            Checks if the specified enum flag is set on a flagged enumeration type.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="value">
      </param>
      <param name="flags">
      </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.EnumExtensions.BoxUnbox``1(System.Object,System.Object,System.Func{``0,``0,System.Boolean})">
      <summary>
            The box unbox.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="flags">
            The flags.
            </param>
      <param name="op">
            The op.
            </param>
      <SUMMARY>   
            Helper function for handling the value types. Boxes the params to   
            object so that the cast can be called on them.   
            </SUMMARY>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="T:Zhaord.Extensions.IoExtensions">
      <summary>
            The io extensions.
            </summary>
    </member>
    <member name="M:Zhaord.Extensions.IoExtensions.IsFileLocked(System.IO.FileInfo)">
      <summary>
            The is file locked.
            </summary>
      <param name="file">
            The file.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="T:Zhaord.Extensions.LinqExtensions">
      <summary>
            The linq extensions.
            </summary>
    </member>
    <member name="M:Zhaord.Extensions.LinqExtensions.ExtractPropertyInfo(System.Linq.Expressions.LambdaExpression)">
      <summary>
            The extract property info.
            </summary>
      <param name="propertyAccessor">
            The property accessor.
            </param>
      <returns>
            The <see cref="T:System.Reflection.PropertyInfo" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.LinqExtensions.ExtractFieldInfo(System.Linq.Expressions.LambdaExpression)">
      <summary>
            The extract field info.
            </summary>
      <param name="propertyAccessor">
            The property accessor.
            </param>
      <returns>
            The <see cref="T:System.Reflection.FieldInfo" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.LinqExtensions.ExtractMemberInfo(System.Linq.Expressions.LambdaExpression)">
      <summary>
            The extract member info.
            </summary>
      <param name="propertyAccessor">
            The property accessor.
            </param>
      <returns>
            The <see cref="T:System.Reflection.MemberInfo" />.
            </returns>
      <exception cref="T:System.ArgumentException">
            参数异常
            </exception>
    </member>
    <member name="T:Zhaord.Extensions.ListExtensions">
      <summary>
            The list extensions.
            </summary>
    </member>
    <member name="M:Zhaord.Extensions.ListExtensions.ToSeparatedString``1(System.Collections.Generic.IList{``0})">
      <summary>
            The to separated string.
            </summary>
      <param name="value">
            The value.
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ListExtensions.ToSeparatedString``1(System.Collections.Generic.IList{``0},System.String)">
      <summary>
            The to separated string.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="separator">
            The separator.
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ListExtensions.Slice``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>
            Makes a slice of the specified list in between the start and end indexes.
            </summary>
      <param name="list">
            The list.
            </param>
      <param name="start">
            The start index.
            </param>
      <param name="end">
            The end index.
            </param>
      <returns>
            A slice of the list.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.ListExtensions.Slice``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>
            Makes a slice of the specified list in between the start and end indexes,
            getting every so many items based upon the step.
            </summary>
      <param name="list">
            The list.
            </param>
      <param name="start">
            The start index.
            </param>
      <param name="end">
            The end index.
            </param>
      <param name="step">
            The step.
            </param>
      <returns>
            A slice of the list.
            </returns>
    </member>
    <member name="T:Zhaord.Extensions.MiscExtensions">
      <summary>
            The misc extensions.
            </summary>
    </member>
    <member name="M:Zhaord.Extensions.MiscExtensions.Dump(System.Exception)">
      <summary>
            The dump.
            </summary>
      <param name="exc">
            The exc.
            </param>
    </member>
    <member name="M:Zhaord.Extensions.MiscExtensions.ToAllMessages(System.Exception)">
      <summary>
            The to all messages.
            </summary>
      <param name="exc">
            The exc.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.MiscExtensions.ToElapsedMinutes(System.Diagnostics.Stopwatch)">
      <summary>
            The to elapsed minutes.
            </summary>
      <param name="watch">
            The watch.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.MiscExtensions.ToElapsedSeconds(System.Diagnostics.Stopwatch)">
      <summary>
            The to elapsed seconds.
            </summary>
      <param name="watch">
            The watch.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.MiscExtensions.HasColumn(System.Data.DataView,System.String)">
      <summary>
            The has column.
            </summary>
      <param name="dv">
            The dv.
            </param>
      <param name="columnName">
            The column name.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.MiscExtensions.GetDataType(System.Data.DataTable,System.String)">
      <summary>
            The get data type.
            </summary>
      <param name="dt">
            The dt.
            </param>
      <param name="columnName">
            The column name.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.MiscExtensions.CountExecute(System.Data.OleDb.OleDbConnection,System.String)">
      <summary>
            The count execute.
            </summary>
      <param name="conn">
            The conn.
            </param>
      <param name="sqlCount">
            The sql count.
            </param>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.MiscExtensions.SafeConvert(System.ComponentModel.TypeConverter,System.String)">
      <summary>
            The safe convert.
            </summary>
      <param name="converter">
            The converter.
            </param>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.MiscExtensions.IsEqual(System.ComponentModel.TypeConverter,System.String,System.Object)">
      <summary>
            The is equal.
            </summary>
      <param name="converter">
            The converter.
            </param>
      <param name="value">
            The value.
            </param>
      <param name="compareWith">
            The compare with.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.MiscExtensions.IsNullOrDefault``1(System.Nullable{``0})">
      <summary>
            The is null or default.
            </summary>
      <param name="value">
            The value.
            </param>
      <typeparam name="T">
      </typeparam>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.MiscExtensions.ToHexString(System.Byte[],System.Int32)">
      <summary>
            Converts bytes into a hex string.
            </summary>
      <param name="bytes">
            The bytes.
            </param>
      <param name="length">
            The length.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.MiscExtensions.GetMergedDataValue``1(Zhaord.IMergedData,System.String,``0)">
      <summary>
            The get merged data value.
            </summary>
      <param name="mergedData">
            The merged data.
            </param>
      <param name="key">
            The key.
            </param>
      <param name="defaultValue">
            The default value.
            </param>
      <typeparam name="T">
      </typeparam>
      <returns>
            The <see cref="!:T" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.MiscExtensions.Grow(System.Text.StringBuilder,System.String,System.String)">
      <summary>
            Append grow if string builder is empty. Append delimiter and grow otherwise.
            </summary>
      <param name="sb">
            Target string builder
            </param>
      <param name="grow">
            Value to append
            </param>
      <param name="delimiter">
            Delimiter to use
            </param>
    </member>
    <member name="M:Zhaord.Extensions.MiscExtensions.SafeGet(System.String[],System.Int32)">
      <summary>
            The safe get.
            </summary>
      <param name="arr">
            The arr.
            </param>
      <param name="index">
            The index.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="T:Zhaord.Extensions.StreamExtensions">
      <summary>
            The stream extensions.
            </summary>
    </member>
    <member name="M:Zhaord.Extensions.StreamExtensions.ToFile(System.IO.Stream,System.String)">
      <summary>
            The to file.
            </summary>
      <param name="srcStream">
            The src stream.
            </param>
      <param name="path">
            The path.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StreamExtensions.ContentsEqual(System.IO.Stream,System.IO.Stream)">
      <summary>
            The contents equal.
            </summary>
      <param name="src">
            The src.
            </param>
      <param name="other">
            The other.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="T:Zhaord.Extensions.StringExtensions">
      <summary>
            The string extensions.
            </summary>
    </member>
    <member name="F:Zhaord.Extensions.StringExtensions.CarriageReturnLineFeed">
      <summary>
            The carriage return line feed.
            </summary>
    </member>
    <member name="F:Zhaord.Extensions.StringExtensions.Empty">
      <summary>
            The empty.
            </summary>
    </member>
    <member name="F:Zhaord.Extensions.StringExtensions.CarriageReturn">
      <summary>
            The carriage return.
            </summary>
    </member>
    <member name="F:Zhaord.Extensions.StringExtensions.LineFeed">
      <summary>
            The line feed.
            </summary>
    </member>
    <member name="F:Zhaord.Extensions.StringExtensions.Tab">
      <summary>
            The tab.
            </summary>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.ToInt(System.Char)">
      <summary>
            The to int.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.ToUnicode(System.Char)">
      <summary>
            The to unicode.
            </summary>
      <param name="c">
            The c.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.WriteCharAsUnicode(System.Char,System.IO.TextWriter)">
      <summary>
            The write char as unicode.
            </summary>
      <param name="c">
            The c.
            </param>
      <param name="writer">
            The writer.
            </param>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.ToEnum``1(System.String,``0)">
      <summary>
            The to enum.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="defaultValue">
            The default value.
            </param>
      <typeparam name="T">
      </typeparam>
      <returns>
            The <see cref="!:T" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.ToSafe(System.String,System.String)">
      <summary>
            The to safe.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="defaultValue">
            The default value.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.EmptyNull(System.String)">
      <summary>
            The empty null.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.NullEmpty(System.String)">
      <summary>
            The null empty.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.FormatInvariant(System.String,System.Object[])">
      <summary>
            Formats a string to an invariant culture
            </summary>
      <param name="format">
            The format.
            </param>
      <param name="objects">
            The objects.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.FormatCurrent(System.String,System.Object[])">
      <summary>
            Formats a string to the current culture.
            </summary>
      <param name="format">
            The format.
            </param>
      <param name="objects">
            The objects.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.FormatCurrentUI(System.String,System.Object[])">
      <summary>
            Formats a string to the current UI culture.
            </summary>
      <param name="format">
            The format.
            </param>
      <param name="objects">
            The objects.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.FormatWith(System.String,System.Object[])">
      <summary>
            The format with.
            </summary>
      <param name="format">
            The format.
            </param>
      <param name="args">
            The args.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.FormatWith(System.String,System.IFormatProvider,System.Object[])">
      <summary>
            The format with.
            </summary>
      <param name="format">
            The format.
            </param>
      <param name="provider">
            The provider.
            </param>
      <param name="args">
            The args.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.IsCaseSensitiveEqual(System.String,System.String)">
      <summary>
            Determines whether this instance and another specified System.String object have the same value.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="comparing">
            The comparing with string.
            </param>
      <returns>
        <c>true</c> if the value of the comparing parameter is the same as this string; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.IsCaseInsensitiveEqual(System.String,System.String)">
      <summary>
            Determines whether this instance and another specified System.String object have the same value.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="comparing">
            The comparing with string.
            </param>
      <returns>
        <c>true</c> if the value of the comparing parameter is the same as this string; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.IsEmpty(System.String)">
      <summary>
            Determines whether the string is null, empty or all whitespace.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.IsWhiteSpace(System.String)">
      <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
        <c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.HasValue(System.String)">
      <summary>
            The has value.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.Hash(System.String,System.Text.Encoding,System.Boolean)">
      <summary>
            The hash.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="encoding">
            The encoding.
            </param>
      <param name="toBase64">
            The to Base 64.
            </param>
      <remarks>
            to get equivalent result to PHPs md5 function call Hash("my value", Encoding.ASCII, false).
            </remarks>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.Mask(System.String,System.Int32)">
      <summary>
            Mask by replacing characters with asterisks.
            </summary>
      <param name="value">
            The string
            </param>
      <param name="length">
            Number of characters to leave untouched.
            </param>
      <returns>
            The mask string
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.IsWebUrl(System.String)">
      <summary>
            The is web url.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.IsEmail(System.String)">
      <summary>
            The is email.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.IsNumeric(System.String)">
      <summary>
            The is numeric.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.EnsureNumericOnly(System.String)">
      <summary>
            Ensures that a string only contains numeric values
            </summary>
      <param name="str">
            Input string
            </param>
      <returns>
            Input string with only numeric values, empty string if input is null or empty
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.IsAlpha(System.String)">
      <summary>
            The is alpha.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.IsAlphaNumeric(System.String)">
      <summary>
            The is alpha numeric.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.Truncate(System.String,System.Int32,System.String)">
      <summary>
            The truncate.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="maxLength">
            The max length.
            </param>
      <param name="suffix">
            The suffix.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.ContainsWhiteSpace(System.String)">
      <summary>
            Determines whether the string contains white space.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
        <c>true</c> if the string contains white space; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.EnsureStartsWith(System.String,System.String)">
      <summary>
            Ensure that a string starts with a string.
            </summary>
      <param name="value">
            The target string
            </param>
      <param name="startsWith">
            The string the target string should start with
            </param>
      <returns>
            The resulting string
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.EnsureEndsWith(System.String,System.String)">
      <summary>
            Ensures the target string ends with the specified string.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="endWith">
            The end With.
            </param>
      <returns>
            The target string with the value string at the end.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.GetLength(System.String)">
      <summary>
            The get length.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="!:int?" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.UrlEncode(System.String)">
      <summary>
            The url encode.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.UrlDecode(System.String)">
      <summary>
            The url decode.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.AttributeEncode(System.String)">
      <summary>
            The attribute encode.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.HtmlEncode(System.String)">
      <summary>
            The html encode.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.HtmlDecode(System.String)">
      <summary>
            The html decode.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.RemoveHtml(System.String)">
      <summary>
            The remove html.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.RemoveHtml(System.String,System.Collections.Generic.ICollection{System.String})">
      <summary>
            The remove html.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="removeTags">
            The remove tags.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.RemoveHtmlInternal(System.String,System.Collections.Generic.ICollection{System.String})">
      <summary>
            The remove html internal.
            </summary>
      <param name="s">
            The s.
            </param>
      <param name="removeTags">
            The remove tags.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.SplitPascalCase(System.String)">
      <summary>
            Replaces pascal casing with spaces. For example "CustomerId" would become "Customer Id".
            Strings that already contain spaces are ignored.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The string after being split
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.SplitSafe(System.String,System.String)">
      <summary>
            The split safe.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="separator">
            The separator.
            </param>
      <returns>
            The <see cref="!:string[]" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.SplitToPair(System.String,System.String@,System.String@,System.String)">
      <summary>
            Splits a string into two strings
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="strLeft">
            The str Left.
            </param>
      <param name="strRight">
            The str Right.
            </param>
      <param name="delimiter">
            The delimiter.
            </param>
      <returns>
            true: success, false: failure
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.ToCamelCase(System.String)">
      <summary>
            The to camel case.
            </summary>
      <param name="instance">
            The instance.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.ReplaceNewLines(System.String,System.String)">
      <summary>
            The replace new lines.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="replacement">
            The replacement.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.Indent(System.String,System.Int32)">
      <summary>
            Indents the specified string.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="indentation">
            The number of characters to indent by.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.Indent(System.String,System.Int32,System.Char)">
      <summary>
            Indents the specified string.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="indentation">
            The number of characters to indent by.
            </param>
      <param name="indentChar">
            The indent character.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.NumberLines(System.String)">
      <summary>
            Numbers the lines.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.EncodeJsString(System.String)">
      <summary>
            The encode js string.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.EncodeJsString(System.String,System.Char,System.Boolean)">
      <summary>
            The encode js string.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="delimiter">
            The delimiter.
            </param>
      <param name="appendDelimiters">
            The append delimiters.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.IsEnclosedIn(System.String,System.String)">
      <summary>
            The is enclosed in.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="enclosedIn">
            The enclosed in.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.IsEnclosedIn(System.String,System.String,System.StringComparison)">
      <summary>
            The is enclosed in.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="enclosedIn">
            The enclosed in.
            </param>
      <param name="comparisonType">
            The comparison type.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.IsEnclosedIn(System.String,System.String,System.String)">
      <summary>
            The is enclosed in.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="start">
            The start.
            </param>
      <param name="end">
            The end.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.IsEnclosedIn(System.String,System.String,System.String,System.StringComparison)">
      <summary>
            The is enclosed in.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="start">
            The start.
            </param>
      <param name="end">
            The end.
            </param>
      <param name="comparisonType">
            The comparison type.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.RemoveEncloser(System.String,System.String)">
      <summary>
            The remove encloser.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="encloser">
            The encloser.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.RemoveEncloser(System.String,System.String,System.StringComparison)">
      <summary>
            The remove encloser.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="encloser">
            The encloser.
            </param>
      <param name="comparisonType">
            The comparison type.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.RemoveEncloser(System.String,System.String,System.String)">
      <summary>
            The remove encloser.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="start">
            The start.
            </param>
      <param name="end">
            The end.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.RemoveEncloser(System.String,System.String,System.String,System.StringComparison)">
      <summary>
            The remove encloser.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="start">
            The start.
            </param>
      <param name="end">
            The end.
            </param>
      <param name="comparisonType">
            The comparison type.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.Dump(System.String,System.Boolean)">
      <summary>
            Debug.WriteLine
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="appendMarks">
            The append Marks.
            </param>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.ToAttribute(System.String,System.String,System.Boolean)">
      <summary>
            Smart way to create a HTML attribute with a leading space.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="name">
            Name of the attribute.
            </param>
      <param name="htmlEncode">
            The html Encode.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.Grow(System.String,System.String,System.String)">
      <summary>
            Appends grow and uses delimiter if the string is not empty.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="grow">
            The grow.
            </param>
      <param name="delimiter">
            The delimiter.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.NaIfEmpty(System.String)">
      <summary>
            Returns n/a if string is empty else self.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.Replace(System.String,System.Int32,System.Int32,System.String)">
      <summary>
            Replaces substring with position x1 to x2 by replaceBy.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="x1">
            The x 1.
            </param>
      <param name="x2">
            The x 2.
            </param>
      <param name="replaceBy">
            The replace By.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.TrimSafe(System.String)">
      <summary>
            The trim safe.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.Prettify(System.String,System.Boolean,System.Char[])">
      <summary>
            The prettify.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="allowSpace">
            The allow space.
            </param>
      <param name="allowChars">
            The allow chars.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.SanitizeHtmlId(System.String)">
      <summary>
            The sanitize html id.
            </summary>
      <param name="value">
            The value.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.IsValidHtmlIdCharacter(System.Char)">
      <summary>
            The is valid html id character.
            </summary>
      <param name="c">
            The c.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.ReplaceInvalidHtmlIdCharacters(System.String,System.Text.StringBuilder)">
      <summary>
            The replace invalid html id characters.
            </summary>
      <param name="part">
            The part.
            </param>
      <param name="builder">
            The builder.
            </param>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.Sha(System.String,System.Text.Encoding)">
      <summary>
            The sha.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="encoding">
            The encoding.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
            The is match.
            </summary>
      <param name="input">
            The input.
            </param>
      <param name="pattern">
            The pattern.
            </param>
      <param name="options">
            The options.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.IsMatch(System.String,System.String,System.Text.RegularExpressions.Match@,System.Text.RegularExpressions.RegexOptions)">
      <summary>
            The is match.
            </summary>
      <param name="input">
            The input.
            </param>
      <param name="pattern">
            The pattern.
            </param>
      <param name="match">
            The match.
            </param>
      <param name="options">
            The options.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.RegexRemove(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
            The regex remove.
            </summary>
      <param name="input">
            The input.
            </param>
      <param name="pattern">
            The pattern.
            </param>
      <param name="options">
            The options.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.RegexReplace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
            The regex replace.
            </summary>
      <param name="input">
            The input.
            </param>
      <param name="pattern">
            The pattern.
            </param>
      <param name="replacement">
            The replacement.
            </param>
      <param name="options">
            The options.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.ToValidFileName(System.String,System.String)">
      <summary>
            The to valid file name.
            </summary>
      <param name="input">
            The input.
            </param>
      <param name="replacement">
            The replacement.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.ToValidPath(System.String,System.String)">
      <summary>
            The to valid path.
            </summary>
      <param name="input">
            The input.
            </param>
      <param name="replacement">
            The replacement.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.ToValidPathInternal(System.String,System.Boolean,System.String)">
      <summary>
            The to valid path internal.
            </summary>
      <param name="input">
            The input.
            </param>
      <param name="isPath">
            The is path.
            </param>
      <param name="replacement">
            The replacement.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.ToIntArray(System.String)">
      <summary>
            The to int array.
            </summary>
      <param name="s">
            The s.
            </param>
      <returns>
            The <see cref="!:int[]" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.ToIntArrayContains(System.String,System.Int32,System.Boolean)">
      <summary>
            The to int array contains.
            </summary>
      <param name="s">
            The s.
            </param>
      <param name="value">
            The value.
            </param>
      <param name="defaultValue">
            The default value.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.RemoveInvalidXmlChars(System.String)">
      <summary>
            The remove invalid xml chars.
            </summary>
      <param name="s">
            The s.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.ReplaceCsvChars(System.String)">
      <summary>
            The replace csv chars.
            </summary>
      <param name="s">
            The s.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.EncodeJsChar(System.IO.TextWriter,System.Char,System.Char)">
      <summary>
            The encode js char.
            </summary>
      <param name="writer">
            The writer.
            </param>
      <param name="c">
            The c.
            </param>
      <param name="delimiter">
            The delimiter.
            </param>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.EncodeJsString(System.IO.TextWriter,System.String,System.Char,System.Boolean)">
      <summary>
            The encode js string.
            </summary>
      <param name="writer">
            The writer.
            </param>
      <param name="value">
            The value.
            </param>
      <param name="delimiter">
            The delimiter.
            </param>
      <param name="appendDelimiters">
            The append delimiters.
            </param>
    </member>
    <member name="M:Zhaord.Extensions.StringExtensions.ActionTextReaderLine(System.IO.TextReader,System.IO.TextWriter,Zhaord.Extensions.StringExtensions.ActionLine)">
      <summary>
            The action text reader line.
            </summary>
      <param name="textReader">
            The text reader.
            </param>
      <param name="textWriter">
            The text writer.
            </param>
      <param name="lineAction">
            The line action.
            </param>
    </member>
    <member name="T:Zhaord.Extensions.StringExtensions.ActionLine">
      <summary>
            The action line.
            </summary>
      <param name="textWriter">
            The text writer.
            </param>
      <param name="line">
            The line.
            </param>
    </member>
    <member name="T:Zhaord.Extensions.TypeDescriptorExtensions">
      <summary>
            The type descriptor extensions.
            </summary>
    </member>
    <member name="M:Zhaord.Extensions.TypeDescriptorExtensions.GetAttributes``1(System.ComponentModel.ICustomTypeDescriptor)">
      <summary>
            The get attributes.
            </summary>
      <param name="td">
            The td.
            </param>
      <typeparam name="TAttribute">
            TAttribute
            </typeparam>
      <returns>
            The <see><cref>IEnumerable</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeDescriptorExtensions.GetAttributes``1(System.ComponentModel.PropertyDescriptor)">
      <summary>
            The get attributes.
            </summary>
      <param name="pd">
            The pd.
            </param>
      <typeparam name="TAttribute">
            TAttribute
            </typeparam>
      <returns>
            The <see><cref>IEnumerable</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeDescriptorExtensions.GetAttributes``1(System.ComponentModel.PropertyDescriptor,System.Func{``0,System.Boolean})">
      <summary>
            The get attributes.
            </summary>
      <param name="pd">
            The pd.
            </param>
      <param name="predicate">
            The predicate.
            </param>
      <typeparam name="TAttribute">
            TAttribute
            </typeparam>
      <returns>
            The <see><cref>IEnumerable</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeDescriptorExtensions.GetProperty(System.ComponentModel.ICustomTypeDescriptor,System.String)">
      <summary>
            The get property.
            </summary>
      <param name="td">
            The td.
            </param>
      <param name="name">
            The name.
            </param>
      <returns>
            The <see cref="T:System.ComponentModel.PropertyDescriptor" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeDescriptorExtensions.GetPropertiesWith``1(System.ComponentModel.ICustomTypeDescriptor)">
      <summary>
            The get properties with.
            </summary>
      <param name="td">
            The td.
            </param>
      <typeparam name="TAttribute">
            TAttribute
            </typeparam>
      <returns>
            The <see><cref>IEnumerable</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeDescriptorExtensions.GetPropertiesWith``1(System.ComponentModel.ICustomTypeDescriptor,System.Func{``0,System.Boolean})">
      <summary>
            The get properties with.
            </summary>
      <param name="td">
            The td.
            </param>
      <param name="predicate">
            The predicate.
            </param>
      <typeparam name="TAttribute">
            TAttribute
            </typeparam>
      <returns>
            The <see><cref>IEnumerable</cref></see>
                .
            </returns>
    </member>
    <member name="T:Zhaord.Extensions.TypeExtensions">
      <summary>
            The type extensions.
            </summary>
    </member>
    <member name="F:Zhaord.Extensions.TypeExtensions.predefinedTypes">
      <summary>
            The s_predefined types.
            </summary>
    </member>
    <member name="F:Zhaord.Extensions.TypeExtensions.predefinedGenericTypes">
      <summary>
            The s_predefined generic types.
            </summary>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.#cctor">
      <summary>
            Initializes static members of the <see cref="T:Zhaord.Extensions.TypeExtensions" /> class.
            </summary>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.AssemblyQualifiedNameWithoutVersion(System.Type)">
      <summary>
            The assembly qualified name without version.
            </summary>
      <param name="type">
            The type.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.IsSequenceType(System.Type)">
      <summary>
            The is sequence type.
            </summary>
      <param name="seqType">
            The seq type.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.IsPredefinedSimpleType(System.Type)">
      <summary>
            The is predefined simple type.
            </summary>
      <param name="type">
            The type.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.IsStruct(System.Type)">
      <summary>
            The is struct.
            </summary>
      <param name="type">
            The type.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.IsPredefinedGenericType(System.Type)">
      <summary>
            The is predefined generic type.
            </summary>
      <param name="type">
            The type.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.IsPredefinedType(System.Type)">
      <summary>
            The is predefined type.
            </summary>
      <param name="type">
            The type.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.IsInteger(System.Type)">
      <summary>
            The is integer.
            </summary>
      <param name="type">
            The type.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.IsNullable(System.Type)">
      <summary>
            The is nullable.
            </summary>
      <param name="type">
            The type.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.IsNullAssignable(System.Type)">
      <summary>
            The is null assignable.
            </summary>
      <param name="type">
            The type.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.IsConstructable(System.Type)">
      <summary>
            The is constructable.
            </summary>
      <param name="type">
            The type.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.IsAnonymous(System.Type)">
      <summary>
            The is anonymous.
            </summary>
      <param name="type">
            The type.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.HasDefaultConstructor(System.Type)">
      <summary>
            The has default constructor.
            </summary>
      <param name="type">
            The type.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.IsSubClass(System.Type,System.Type)">
      <summary>
            The is sub class.
            </summary>
      <param name="type">
            The type.
            </param>
      <param name="check">
            The check.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.IsSubClass(System.Type,System.Type,System.Type@)">
      <summary>
            The is sub class.
            </summary>
      <param name="type">
            The type.
            </param>
      <param name="check">
            The check.
            </param>
      <param name="implementingType">
            The implementing type.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.IsSubClassInternal(System.Type,System.Type,System.Type,System.Type@)">
      <summary>
            The is sub class internal.
            </summary>
      <param name="initialType">
            The initial type.
            </param>
      <param name="currentType">
            The current type.
            </param>
      <param name="check">
            The check.
            </param>
      <param name="implementingType">
            The implementing type.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.IsIndexed(System.Reflection.PropertyInfo)">
      <summary>
            The is indexed.
            </summary>
      <param name="property">
            The property.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.IsIndexed(System.Reflection.MemberInfo)">
      <summary>
            Determines whether the member is an indexed property.
            </summary>
      <param name="member">
            The member.
            </param>
      <returns>
        <c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.IsType``1(System.Type)">
      <summary>
            Checks to see if the specified type is assignable.
            </summary>
      <param name="type">
      </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.GetSingleMember(System.Type,System.String,System.Reflection.MemberTypes)">
      <summary>
            The get single member.
            </summary>
      <param name="type">
            The type.
            </param>
      <param name="name">
            The name.
            </param>
      <param name="memberTypes">
            The member types.
            </param>
      <returns>
            The <see cref="T:System.Reflection.MemberInfo" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.GetSingleMember(System.Type,System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>
            The get single member.
            </summary>
      <param name="type">
            The type.
            </param>
      <param name="name">
            The name.
            </param>
      <param name="memberTypes">
            The member types.
            </param>
      <param name="bindingAttr">
            The binding attr.
            </param>
      <returns>
            The <see cref="T:System.Reflection.MemberInfo" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.GetNameAndAssemblyName(System.Type)">
      <summary>
            The get name and assembly name.
            </summary>
      <param name="type">
            The type.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.GetFieldsAndProperties(System.Type,System.Reflection.BindingFlags)">
      <summary>
            The get fields and properties.
            </summary>
      <param name="type">
            The type.
            </param>
      <param name="bindingAttr">
            The binding attr.
            </param>
      <returns>
            The <see cref="T:System.Collections.IEnumerable" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.GetFieldOrProperty(System.Type,System.String,System.Boolean)">
      <summary>
            The get field or property.
            </summary>
      <param name="type">
            The type.
            </param>
      <param name="name">
            The name.
            </param>
      <param name="ignoreCase">
            The ignore case.
            </param>
      <returns>
            The <see cref="T:System.Reflection.MemberInfo" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.FindMembers(System.Type,System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)">
      <summary>
            The find members.
            </summary>
      <param name="targetType">
            The target type.
            </param>
      <param name="memberType">
            The member type.
            </param>
      <param name="bindingAttr">
            The binding attr.
            </param>
      <param name="filter">
            The filter.
            </param>
      <param name="filterCriteria">
            The filter criteria.
            </param>
      <returns>
            The <see cref="!:List" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.CreateGeneric(System.Type,System.Type,System.Object[])">
      <summary>
            The create generic.
            </summary>
      <param name="genericTypeDefinition">
            The generic type definition.
            </param>
      <param name="innerType">
            The inner type.
            </param>
      <param name="args">
            The args.
            </param>
      <returns>
            The <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.CreateGeneric(System.Type,System.Type[],System.Object[])">
      <summary>
            The create generic.
            </summary>
      <param name="genericTypeDefinition">
            The generic type definition.
            </param>
      <param name="innerTypes">
            The inner types.
            </param>
      <param name="args">
            The args.
            </param>
      <returns>
            The <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.CreateGeneric(System.Type,System.Type[],System.Func{System.Type,System.Object[],System.Object},System.Object[])">
      <summary>
            The create generic.
            </summary>
      <param name="genericTypeDefinition">
            The generic type definition.
            </param>
      <param name="innerTypes">
            The inner types.
            </param>
      <param name="instanceCreator">
            The instance creator.
            </param>
      <param name="args">
            The args.
            </param>
      <returns>
            The <see cref="T:System.Object" />.
            </returns>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.CreateGenericList(System.Type)">
      <summary>
            The create generic list.
            </summary>
      <param name="listType">
            The list type.
            </param>
      <returns>
            The <see cref="T:System.Collections.IList" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.IsEnumerable(System.Type)">
      <summary>
            The is enumerable.
            </summary>
      <param name="type">
            The type.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.IsGenericDictionary(System.Type)">
      <summary>
            The is generic dictionary.
            </summary>
      <param name="type">
            The type.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.GetValue(System.Reflection.MemberInfo,System.Object)">
      <summary>
            Gets the member's value on the object.
            </summary>
      <param name="member">
            The member.
            </param>
      <param name="target">
            The target object.
            </param>
      <returns>
            The member's value on the object.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.SetValue(System.Reflection.MemberInfo,System.Object,System.Object)">
      <summary>
            Sets the member's value on the target object.
            </summary>
      <param name="member">
            The member.
            </param>
      <param name="target">
            The target.
            </param>
      <param name="value">
            The value.
            </param>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.GetNonNullableType(System.Type)">
      <summary>
            Gets the underlying type of a <see cref="T:System.Nullable`1" /> type.
            </summary>
      <param name="type">
            The type.
            </param>
      <returns>
            The <see cref="T:System.Type" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.CanReadValue(System.Reflection.MemberInfo)">
      <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
      <param name="member">
            The MemberInfo to determine whether can be read.
            </param>
      <returns>
        <c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns>
      <remarks>
            For methods this will return <c>true</c> if the return type
            is not <c>void</c> and the method is parameterless.
            </remarks>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.CanSetValue(System.Reflection.MemberInfo)">
      <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
      <param name="member">
            The MemberInfo to determine whether can be set.
            </param>
      <returns>
        <c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.GetAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
      <summary>
            Returns single attribute from the type
            </summary>
      <typeparam name="T">
            Attribute to use
            </typeparam>
      <param name="target">
            Attribute provider
            </param>
      <param name="inherits">
            The inherits.
            </param>
      <returns>
        <em>Null</em> if the attribute is not found
            </returns>
      <exception cref="T:System.InvalidOperationException">
            If there are 2 or more attributes
            </exception>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.HasAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
      <summary>
            The has attribute.
            </summary>
      <param name="target">
            The target.
            </param>
      <param name="inherits">
            The inherits.
            </param>
      <typeparam name="TAttribute">
      </typeparam>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.GetAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
      <summary>
            Given a particular MemberInfo, return the custom attributes of the
            given type on that member.
            </summary>
      <typeparam name="TAttribute">
            Type of attribute to retrieve.
            </typeparam>
      <param name="target">
            The target.
            </param>
      <param name="inherits">
            True to include attributes inherited from base classes.
            </param>
      <returns>
            Array of found attributes.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.GetAllAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
      <summary>
            Given a particular MemberInfo, find all the attributes that apply to this
            member. Specifically, it returns the attributes on the type, then (if it's a
            property accessor) on the property, then on the member itself.
            </summary>
      <typeparam name="TAttribute">
            Type of attribute to retrieve.
            </typeparam>
      <param name="member">
            The member to look at.
            </param>
      <param name="inherits">
            true to include attributes inherited from base classes.
            </param>
      <returns>
            Array of found attributes.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.SortAttributesIfPossible``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            The sort attributes if possible.
            </summary>
      <param name="attributes">
            The attributes.
            </param>
      <typeparam name="TAttribute">
      </typeparam>
      <returns>
            The <see cref="T:System.Collections.IEnumerable" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.GetPropertyFromMethod(System.Reflection.MethodBase)">
      <summary>
            Given a MethodBase for a property's get or set method,
            return the corresponding property info.
            </summary>
      <param name="method">
            MethodBase for the property's get or set method.
            </param>
      <returns>
            PropertyInfo for the property, or null if method is not part of a property.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.TypeExtensions.FindIEnumerable(System.Type)">
      <summary>
            The find i enumerable.
            </summary>
      <param name="seqType">
            The seq type.
            </param>
      <returns>
            The <see cref="T:System.Type" />.
            </returns>
    </member>
    <member name="T:Zhaord.Extensions.XmlNodeExtensions">
      <summary>
            The xml node extensions.
            </summary>
    </member>
    <member name="M:Zhaord.Extensions.XmlNodeExtensions.GetAttributeText``1(System.Xml.XmlNode,System.String,``0)">
      <summary>
            Safe way to get inner text of an attribute.
            </summary>
      <param name="node">
            The node.
            </param>
      <param name="attributeName">
            The attribute Name.
            </param>
      <param name="defaultValue">
            The default Value.
            </param>
      <returns>
            The <see cref="!:T" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.XmlNodeExtensions.GetAttributeText(System.Xml.XmlNode,System.String)">
      <summary>
            Safe way to get inner text of an attribute.
            </summary>
      <param name="node">
            The node.
            </param>
      <param name="attributeName">
            The attribute Name.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.XmlNodeExtensions.GetText``1(System.Xml.XmlNode,System.String,``0)">
      <summary>
            Safe way to get inner text of a node.
            </summary>
      <param name="node">
            The node.
            </param>
      <param name="xpath">
            The xpath.
            </param>
      <param name="defaultValue">
            The default Value.
            </param>
      <returns>
            The <see cref="!:T" />.
            </returns>
    </member>
    <member name="M:Zhaord.Extensions.XmlNodeExtensions.GetText(System.Xml.XmlNode,System.String,System.String)">
      <summary>
            Safe way to get inner text of a node.
            </summary>
      <param name="node">
            The node.
            </param>
      <param name="xpath">
            The xpath.
            </param>
      <param name="defaultValue">
            The default Value.
            </param>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="T:Zhaord.Extensions.XmlWriterExtensions">
      <summary>
            The xml writer extensions.
            </summary>
      <remarks>
            codehint: sm-add
            </remarks>
    </member>
    <member name="M:Zhaord.Extensions.XmlWriterExtensions.WriteCData(System.Xml.XmlWriter,System.String,System.String,System.String,System.String)">
      <summary>
            The write c data.
            </summary>
      <param name="writer">
            The writer.
            </param>
      <param name="name">
            The name.
            </param>
      <param name="value">
            The value.
            </param>
      <param name="prefix">
            The prefix.
            </param>
      <param name="ns">
            The ns.
            </param>
    </member>
    <member name="M:Zhaord.Extensions.XmlWriterExtensions.WriteNode(System.Xml.XmlWriter,System.String,System.Action)">
      <summary>
            The write node.
            </summary>
      <param name="writer">
            The writer.
            </param>
      <param name="name">
            The name.
            </param>
      <param name="content">
            The content.
            </param>
    </member>
    <member name="T:Zhaord.Guard">
      <summary>
            The guard.
            </summary>
    </member>
    <member name="F:Zhaord.Guard.AgainstMessage">
      <summary>
            The against message.
            </summary>
    </member>
    <member name="F:Zhaord.Guard.ImplementsMessage">
      <summary>
            The implements message.
            </summary>
    </member>
    <member name="F:Zhaord.Guard.InheritsFromMessage">
      <summary>
            The inherits from message.
            </summary>
    </member>
    <member name="F:Zhaord.Guard.IsTypeOfMessage">
      <summary>
            The is type of message.
            </summary>
    </member>
    <member name="F:Zhaord.Guard.IsEqualMessage">
      <summary>
            The is equal message.
            </summary>
    </member>
    <member name="F:Zhaord.Guard.IsPositiveMessage">
      <summary>
            The is positive message.
            </summary>
    </member>
    <member name="F:Zhaord.Guard.IsTrueMessage">
      <summary>
            The is true message.
            </summary>
    </member>
    <member name="F:Zhaord.Guard.NotNegativeMessage">
      <summary>
            The not negative message.
            </summary>
    </member>
    <member name="M:Zhaord.Guard.#ctor">
      <summary>
            Prevents a default instance of the <see cref="T:Zhaord.Guard" /> class from being created.
            </summary>
    </member>
    <member name="M:Zhaord.Guard.NotNull``1(System.Func{``0})">
      <summary>
            Throws proper exception if the class reference is null.
            </summary>
      <typeparam name="TValue">
      </typeparam>
      <param name="value">
            Class reference to check.
            </param>
      <exception cref="T:System.InvalidOperationException">
            If class reference is null.
            </exception>
    </member>
    <member name="M:Zhaord.Guard.ArgumentNotNull(System.Object,System.String)">
      <summary>
            The argument not null.
            </summary>
      <param name="arg">
            The arg.
            </param>
      <param name="argName">
            The arg name.
            </param>
      <exception cref="T:System.ArgumentNullException">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.ArgumentNotNull``1(System.Func{``0})">
      <summary>
            The argument not null.
            </summary>
      <param name="arg">
            The arg.
            </param>
      <typeparam name="T">
      </typeparam>
      <exception cref="T:System.ArgumentNullException">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.Arguments``2(System.Func{``0},System.Func{``1})">
      <summary>
            The arguments.
            </summary>
      <param name="arg1">
            The arg 1.
            </param>
      <param name="arg2">
            The arg 2.
            </param>
      <typeparam name="T1">
      </typeparam>
      <typeparam name="T2">
      </typeparam>
      <exception cref="T:System.ArgumentNullException">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.Arguments``3(System.Func{``0},System.Func{``1},System.Func{``2})">
      <summary>
            The arguments.
            </summary>
      <param name="arg1">
            The arg 1.
            </param>
      <param name="arg2">
            The arg 2.
            </param>
      <param name="arg3">
            The arg 3.
            </param>
      <typeparam name="T1">
      </typeparam>
      <typeparam name="T2">
      </typeparam>
      <typeparam name="T3">
      </typeparam>
      <exception cref="T:System.ArgumentNullException">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.Arguments``4(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3})">
      <summary>
            The arguments.
            </summary>
      <param name="arg1">
            The arg 1.
            </param>
      <param name="arg2">
            The arg 2.
            </param>
      <param name="arg3">
            The arg 3.
            </param>
      <param name="arg4">
            The arg 4.
            </param>
      <typeparam name="T1">
      </typeparam>
      <typeparam name="T2">
      </typeparam>
      <typeparam name="T3">
      </typeparam>
      <typeparam name="T4">
      </typeparam>
      <exception cref="T:System.ArgumentNullException">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.Arguments``5(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3},System.Func{``4})">
      <summary>
            The arguments.
            </summary>
      <param name="arg1">
            The arg 1.
            </param>
      <param name="arg2">
            The arg 2.
            </param>
      <param name="arg3">
            The arg 3.
            </param>
      <param name="arg4">
            The arg 4.
            </param>
      <param name="arg5">
            The arg 5.
            </param>
      <typeparam name="T1">
      </typeparam>
      <typeparam name="T2">
      </typeparam>
      <typeparam name="T3">
      </typeparam>
      <typeparam name="T4">
      </typeparam>
      <typeparam name="T5">
      </typeparam>
      <exception cref="T:System.ArgumentNullException">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.ArgumentNotEmpty(System.Func{System.String})">
      <summary>
            The argument not empty.
            </summary>
      <param name="arg">
            The arg.
            </param>
      <exception>
        <cref>???</cref>
      </exception>
    </member>
    <member name="M:Zhaord.Guard.ArgumentNotEmpty(System.Func{System.Guid})">
      <summary>
            The argument not empty.
            </summary>
      <param name="arg">
            The arg.
            </param>
      <exception>
        <cref>???</cref>
      </exception>
    </member>
    <member name="M:Zhaord.Guard.ArgumentNotEmpty(System.String,System.String)">
      <summary>
            The argument not empty.
            </summary>
      <param name="arg">
            The arg.
            </param>
      <param name="argName">
            The arg name.
            </param>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.ArgumentNotEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
      <summary>
            The argument not empty.
            </summary>
      <param name="arg">
            The arg.
            </param>
      <param name="argName">
            The arg name.
            </param>
      <typeparam name="T">
      </typeparam>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.ArgumentNotEmpty(System.Guid,System.String)">
      <summary>
            The argument not empty.
            </summary>
      <param name="arg">
            The arg.
            </param>
      <param name="argName">
            The arg name.
            </param>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.ArgumentInRange``1(``0,``0,``0,System.String)">
      <summary>
            The argument in range.
            </summary>
      <param name="arg">
            The arg.
            </param>
      <param name="min">
            The min.
            </param>
      <param name="max">
            The max.
            </param>
      <param name="argName">
            The arg name.
            </param>
      <typeparam name="T">
      </typeparam>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.ArgumentNotOutOfLength(System.String,System.Int32,System.String)">
      <summary>
            The argument not out of length.
            </summary>
      <param name="arg">
            The arg.
            </param>
      <param name="maxLength">
            The max length.
            </param>
      <param name="argName">
            The arg name.
            </param>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.ArgumentNotNegative``1(``0,System.String,System.String)">
      <summary>
            The argument not negative.
            </summary>
      <param name="arg">
            The arg.
            </param>
      <param name="argName">
            The arg name.
            </param>
      <param name="message">
            The message.
            </param>
      <typeparam name="T">
      </typeparam>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.ArgumentNotZero``1(``0,System.String)">
      <summary>
            The argument not zero.
            </summary>
      <param name="arg">
            The arg.
            </param>
      <param name="argName">
            The arg name.
            </param>
      <typeparam name="T">
      </typeparam>
      <exception cref="!:???">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.Against``1(System.Boolean,System.String)">
      <summary>
            The against.
            </summary>
      <param name="assertion">
            The assertion.
            </param>
      <param name="message">
            The message.
            </param>
      <typeparam name="TException">
      </typeparam>
      <exception cref="!:TException">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.Against``1(System.Func{System.Boolean},System.String)">
      <summary>
            The against.
            </summary>
      <param name="assertion">
            The assertion.
            </param>
      <param name="message">
            The message.
            </param>
      <typeparam name="TException">
      </typeparam>
      <exception cref="!:TException">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.InheritsFrom``1(System.Type)">
      <summary>
            The inherits from.
            </summary>
      <param name="type">
            The type.
            </param>
      <typeparam name="TBase">
      </typeparam>
    </member>
    <member name="M:Zhaord.Guard.InheritsFrom``1(System.Type,System.String)">
      <summary>
            The inherits from.
            </summary>
      <param name="type">
            The type.
            </param>
      <param name="message">
            The message.
            </param>
      <typeparam name="TBase">
      </typeparam>
      <exception cref="T:System.InvalidOperationException">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.Implements``1(System.Type,System.String)">
      <summary>
            The implements.
            </summary>
      <param name="type">
            The type.
            </param>
      <param name="message">
            The message.
            </param>
      <typeparam name="TInterface">
      </typeparam>
      <exception cref="T:System.InvalidOperationException">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.IsSubclassOf``1(System.Type)">
      <summary>
            The is subclass of.
            </summary>
      <param name="type">
            The type.
            </param>
      <typeparam name="TBase">
      </typeparam>
      <exception cref="T:System.InvalidOperationException">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.IsTypeOf``1(System.Object)">
      <summary>
            The is type of.
            </summary>
      <param name="instance">
            The instance.
            </param>
      <typeparam name="TType">
      </typeparam>
    </member>
    <member name="M:Zhaord.Guard.IsTypeOf``1(System.Object,System.String)">
      <summary>
            The is type of.
            </summary>
      <param name="instance">
            The instance.
            </param>
      <param name="message">
            The message.
            </param>
      <typeparam name="TType">
      </typeparam>
      <exception cref="T:System.InvalidOperationException">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.IsEqual``1(System.Object,System.Object,System.String)">
      <summary>
            The is equal.
            </summary>
      <param name="compare">
            The compare.
            </param>
      <param name="instance">
            The instance.
            </param>
      <param name="message">
            The message.
            </param>
      <typeparam name="TException">
      </typeparam>
      <exception cref="!:TException">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.HasDefaultConstructor``1">
      <summary>
            The has default constructor.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Zhaord.Guard.HasDefaultConstructor(System.Type)">
      <summary>
            The has default constructor.
            </summary>
      <param name="t">
            The t.
            </param>
      <exception cref="!:???">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.ArgumentIsPositive``1(``0,System.String,System.String)">
      <summary>
            The argument is positive.
            </summary>
      <param name="arg">
            The arg.
            </param>
      <param name="argName">
            The arg name.
            </param>
      <param name="message">
            The message.
            </param>
      <typeparam name="T">
      </typeparam>
      <exception cref="!:???">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.ArgumentIsTrue(System.Boolean,System.String,System.String)">
      <summary>
            The argument is true.
            </summary>
      <param name="arg">
            The arg.
            </param>
      <param name="argName">
            The arg name.
            </param>
      <param name="message">
            The message.
            </param>
      <exception cref="!:???">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.ArgumentIsEnumType(System.Type,System.String)">
      <summary>
            The argument is enum type.
            </summary>
      <param name="arg">
            The arg.
            </param>
      <param name="argName">
            The arg name.
            </param>
      <exception cref="!:???">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.ArgumentIsEnumType(System.Type,System.Object,System.String)">
      <summary>
            The argument is enum type.
            </summary>
      <param name="enumType">
            The enum type.
            </param>
      <param name="arg">
            The arg.
            </param>
      <param name="argName">
            The arg name.
            </param>
      <exception cref="!:???">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.ArgumentNotDisposed(Zhaord.DisposableObject,System.String)">
      <summary>
            The argument not disposed.
            </summary>
      <param name="arg">
            The arg.
            </param>
      <param name="argName">
            The arg name.
            </param>
      <exception cref="!:???">
      </exception>
    </member>
    <member name="M:Zhaord.Guard.PagingArgsValid(System.Int32,System.Int32,System.String,System.String)">
      <summary>
            The paging args valid.
            </summary>
      <param name="indexArg">
            The index arg.
            </param>
      <param name="sizeArg">
            The size arg.
            </param>
      <param name="indexArgName">
            The index arg name.
            </param>
      <param name="sizeArgName">
            The size arg name.
            </param>
    </member>
    <member name="M:Zhaord.Guard.GetParamName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
      <summary>
            The get param name.
            </summary>
      <param name="expression">
            The expression.
            </param>
      <typeparam name="T">
      </typeparam>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Guard.GetParamName``1(System.Func{``0})">
      <summary>
            The get param name.
            </summary>
      <param name="expression">
            The expression.
            </param>
      <typeparam name="T">
      </typeparam>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="T:Zhaord.IApplicationServiceContract">
      <summary>
            应用程序服务接口.
            </summary>
    </member>
    <member name="T:Zhaord.IMergedData">
      <summary>
            The MergedData interface.
            </summary>
    </member>
    <member name="P:Zhaord.IMergedData.MergedDataIgnore">
      <summary>
            Gets or sets a value indicating whether merged data ignore.
            </summary>
    </member>
    <member name="P:Zhaord.IMergedData.MergedDataValues">
      <summary>
            Gets the merged data values.
            </summary>
    </member>
    <member name="T:Zhaord.IOrdered">
      <summary>
            The Ordered interface.
            </summary>
    </member>
    <member name="P:Zhaord.IOrdered.Ordinal">
      <summary>
            Gets the ordinal.
            </summary>
    </member>
    <member name="T:Zhaord.Data.ISoftDeletable">
      <summary>
            The SoftDeletable interface.
            软删除接口
            </summary>
    </member>
    <member name="P:Zhaord.Data.ISoftDeletable.Deleted">
      <summary>
            Gets a value indicating whether deleted.
            获取是否为软删除
            </summary>
    </member>
    <member name="T:Zhaord.IStartupTask">
      <summary>
            The StartupTask interface.
            启动任务接口
            </summary>
    </member>
    <member name="M:Zhaord.IStartupTask.Execute">
      <summary>
            The execute.
            </summary>
    </member>
    <member name="P:Zhaord.IStartupTask.Order">
      <summary>
            Gets the order.
            </summary>
    </member>
    <member name="T:Zhaord.IWorkContext">
      <summary>
            The WorkContext interface.
            工作环境接口
            </summary>
    </member>
    <member name="M:Zhaord.IWorkContext.IsPublishedLanguage(System.String,System.Int32)">
      <summary>
            Gets a value indicating whether a language exists and is published within a store's scope.
            </summary>
      <param name="seoCode">
            The unique seo code of the language to check for
            </param>
      <param name="storeId">
            The store id (will be resolved internally when 0)
            </param>
      <returns>
            Whether the language exists and is published
            </returns>
    </member>
    <member name="M:Zhaord.IWorkContext.GetDefaultLanguageSeoCode(System.Int32)">
      <summary>
            Gets the default (fallback) language for a store
            </summary>
      <param name="storeId">
            The store id (will be resolved internally when 0)
            </param>
      <returns>
            The unique seo code of the language to check for
            </returns>
    </member>
    <member name="P:Zhaord.IWorkContext.CurrentCustomerId">
      <summary>
            Gets or sets the current customer
            获取或设置当前用户id
            </summary>
    </member>
    <member name="P:Zhaord.IWorkContext.OriginalCustomerIdIfImpersonated">
      <summary>
            Gets or sets the original customer (in case the current one is impersonated)
            获取或设置原来的用户id
            </summary>
    </member>
    <member name="P:Zhaord.IWorkContext.WorkingLanguageId">
      <summary>
            Gets or sets current user working language
            获取或设置当前工作语言
            </summary>
    </member>
    <member name="P:Zhaord.IWorkContext.IsAdmin">
      <summary>
            Gets or sets a value indicating whether we're in admin area
            获取或设置是否为管理员
            </summary>
    </member>
    <member name="T:Zhaord.Localization.LocalizedString">
      <summary>
            The localized string.
            </summary>
    </member>
    <member name="F:Zhaord.Localization.LocalizedString.localized">
      <summary>
            The localized.
            </summary>
    </member>
    <member name="F:Zhaord.Localization.LocalizedString.textHint">
      <summary>
            The _text hint.
            </summary>
    </member>
    <member name="F:Zhaord.Localization.LocalizedString._args">
      <summary>
            The _args.
            </summary>
    </member>
    <member name="M:Zhaord.Localization.LocalizedString.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.Localization.LocalizedString" /> class.
            </summary>
      <param name="localized">
            The localized.
            </param>
    </member>
    <member name="M:Zhaord.Localization.LocalizedString.#ctor(System.String,System.String,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.Localization.LocalizedString" /> class.
            </summary>
      <param name="localized">
            The localized.
            </param>
      <param name="textHint">
            The text hint.
            </param>
      <param name="args">
            The args.
            </param>
    </member>
    <member name="M:Zhaord.Localization.LocalizedString.TextOrDefault(System.String,Zhaord.Localization.LocalizedString)">
      <summary>
            The text or default.
            </summary>
      <param name="text">
            The text.
            </param>
      <param name="defaultValue">
            The default value.
            </param>
      <returns>
            The <see cref="T:Zhaord.Localization.LocalizedString" />.
            </returns>
    </member>
    <member name="M:Zhaord.Localization.LocalizedString.op_Implicit(Zhaord.Localization.LocalizedString)~System.String">
      <summary>
            The op_ implicit.
            </summary>
      <param name="obj">
            The obj.
            </param>
      <returns>
      </returns>
    </member>
    <member name="M:Zhaord.Localization.LocalizedString.op_Implicit(System.String)~Zhaord.Localization.LocalizedString">
      <summary>
            The op_ implicit.
            </summary>
      <param name="obj">
            The obj.
            </param>
      <returns>
      </returns>
    </member>
    <member name="M:Zhaord.Localization.LocalizedString.ToString">
      <summary>
            The to string.
            </summary>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Localization.LocalizedString.ToHtmlString">
      <summary>
            The to html string.
            </summary>
      <returns>
            The <see cref="T:System.String" />.
            </returns>
    </member>
    <member name="M:Zhaord.Localization.LocalizedString.GetHashCode">
      <summary>
            The get hash code.
            </summary>
      <returns>
            The <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="M:Zhaord.Localization.LocalizedString.Equals(System.Object)">
      <summary>
            The equals.
            </summary>
      <param name="obj">
            The obj.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="P:Zhaord.Localization.LocalizedString.TextHint">
      <summary>
            Gets the text hint.
            </summary>
    </member>
    <member name="P:Zhaord.Localization.LocalizedString.Args">
      <summary>
            Gets the args.
            </summary>
    </member>
    <member name="P:Zhaord.Localization.LocalizedString.Text">
      <summary>
            Gets the text.
            </summary>
    </member>
    <member name="T:Zhaord.Localization.Localizer">
      <summary>
            The localizer.
            </summary>
      <param name="key">
            The key.
            </param>
      <param name="args">
            The args.
            </param>
    </member>
    <member name="T:Zhaord.Localization.NullLocalizer">
      <summary>
            The null localizer.
            </summary>
    </member>
    <member name="F:Zhaord.Localization.NullLocalizer.SInstance">
      <summary>
            The s_instance.
            </summary>
    </member>
    <member name="M:Zhaord.Localization.NullLocalizer.#cctor">
      <summary>
            Initializes static members of the <see cref="T:Zhaord.Localization.NullLocalizer" /> class.
            </summary>
    </member>
    <member name="P:Zhaord.Localization.NullLocalizer.Instance">
      <summary>
            Gets the instance.
            </summary>
    </member>
    <member name="T:Zhaord.Logging.LogHelper">
      <summary>
            This class can be used to write logs from somewhere where it's a little hard to get a reference to the <see cref="T:Castle.Core.Logging.ILogger" />.
            Normally, get <see cref="T:Castle.Core.Logging.ILogger" /> using property injection.
            </summary>
    </member>
    <member name="P:Zhaord.Logging.LogHelper.Logger">
      <summary>
            A reference to the logger.
            </summary>
    </member>
    <member name="T:Zhaord.Misc">
      <summary>
            The misc.
            </summary>
    </member>
    <member name="M:Zhaord.Misc.TryAction``1(System.Func{``0},``0@)">
      <summary>
            The try action.
            </summary>
      <param name="func">
            The func.
            </param>
      <param name="output">
            The output.
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Misc.IfNotNullOrEmpty(System.String,System.Action{System.String})">
      <summary>
            Perform an action if the string is not null or empty.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="action">
            The action to perform.
            </param>
    </member>
    <member name="M:Zhaord.Misc.IfNotNullOrEmpty(System.String,System.Action{System.String},System.Action{System.String})">
      <summary>
            The if not null or empty.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="trueAction">
            The true action.
            </param>
      <param name="falseAction">
            The false action.
            </param>
    </member>
    <member name="T:Zhaord.OperationResult">
      <summary>
            The operation result.
            操作结果
            </summary>
    </member>
    <member name="M:Zhaord.OperationResult.#ctor(Zhaord.OperationResultType)">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.OperationResult" /> class.
            初始化操作结果实例
            </summary>
      <param name="resultType">
            The result type.
            操作结果类型
            </param>
    </member>
    <member name="M:Zhaord.OperationResult.#ctor(Zhaord.OperationResultType,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.OperationResult" /> class.
            初始化操作结果实例
            </summary>
      <param name="resultType">
            The result type.
            操作结果类型
            </param>
      <param name="message">
            The message.
            消息
            </param>
    </member>
    <member name="M:Zhaord.OperationResult.#ctor(Zhaord.OperationResultType,System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.OperationResult" /> class.
            初始化操作结果实例
            </summary>
      <param name="resultType">
            The result type.
            操作结果类型
            </param>
      <param name="message">
            The message.
            消息
            </param>
      <param name="appendData">
            The append data.
            附加数据
            </param>
    </member>
    <member name="M:Zhaord.OperationResult.#ctor(Zhaord.OperationResultType,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.OperationResult" /> class.
            初始化操作结果实例
            </summary>
      <param name="resultType">
            The result type.
            操作结果类型
            </param>
      <param name="message">
            The message.
            消息
            </param>
      <param name="logMessage">
            The log message.
            日志消息
            </param>
    </member>
    <member name="M:Zhaord.OperationResult.#ctor(Zhaord.OperationResultType,System.String,System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.OperationResult" /> class.
            初始化操作结果实例
            </summary>
      <param name="resultType">
            The result type.
            操作结果类型
            </param>
      <param name="message">
            The message.
            消息
            </param>
      <param name="logMessage">
            The log message.
            日志消息
            </param>
      <param name="appendData">
            The append data.
            附加数据
            </param>
    </member>
    <member name="P:Zhaord.OperationResult.ResultType">
      <summary>
            Gets the result type.
            获取操作结果类型
            </summary>
    </member>
    <member name="P:Zhaord.OperationResult.Message">
      <summary>
            Gets the message.
            获取消息
            </summary>
    </member>
    <member name="P:Zhaord.OperationResult.LogMessage">
      <summary>
            Gets the log message.
            获取日志消息
            </summary>
    </member>
    <member name="P:Zhaord.OperationResult.AppendData">
      <summary>
            Gets the append data.
            获取附加数据
            </summary>
    </member>
    <member name="T:Zhaord.OperationResultType">
      <summary>
            The operation result type.
            </summary>
    </member>
    <member name="F:Zhaord.OperationResultType.Success">
      <summary>
                操作成功
            </summary>
    </member>
    <member name="F:Zhaord.OperationResultType.NoChanged">
      <summary>
                操作取消或操作没引发任何变化
            </summary>
    </member>
    <member name="F:Zhaord.OperationResultType.ParamError">
      <summary>
                参数错误
            </summary>
    </member>
    <member name="F:Zhaord.OperationResultType.QueryNull">
      <summary>
                指定参数的数据不存在
            </summary>
    </member>
    <member name="F:Zhaord.OperationResultType.PurviewLack">
      <summary>
                权限不足
            </summary>
    </member>
    <member name="F:Zhaord.OperationResultType.IllegalOperation">
      <summary>
                非法操作
            </summary>
    </member>
    <member name="F:Zhaord.OperationResultType.Warning">
      <summary>
                警告
            </summary>
    </member>
    <member name="F:Zhaord.OperationResultType.Error">
      <summary>
                操作引发错误
            </summary>
    </member>
    <member name="T:Zhaord.Singletons.Singleton">
      <summary>
            Provides access to all "singletons" stored by <see cref="T:Zhaord.Singletons.Singleton`1" />.
            </summary>
    </member>
    <member name="F:Zhaord.Singletons.Singleton.allSingletons">
      <summary>
            The all singletons.
            </summary>
    </member>
    <member name="M:Zhaord.Singletons.Singleton.#cctor">
      <summary>
            Initializes static members of the <see cref="T:Zhaord.Singletons.Singleton" /> class.
            </summary>
    </member>
    <member name="P:Zhaord.Singletons.Singleton.AllSingletons">
      <summary>Dictionary of type to singleton instances.</summary>
    </member>
    <member name="T:Zhaord.Singletons.SingletonDictionary`2">
      <summary>
            Provides a singleton dictionary for a certain key and vlaue type.
            </summary>
      <typeparam name="TKey">
            The type of key.
            </typeparam>
      <typeparam name="TValue">
            The type of value.
            </typeparam>
    </member>
    <member name="T:Zhaord.Singletons.Singleton`1">
      <summary>
            A statically compiled "singleton" used to store objects throughout the 
            lifetime of the app domain. Not so much singleton in the pattern's 
            sense of the word as a standardized way to store single instances.
            </summary>
      <typeparam name="T">
            The type of object to store.
            </typeparam>
      <remarks>
            Access to the instance is not synchrnoized.
            </remarks>
    </member>
    <member name="F:Zhaord.Singletons.Singleton`1.instance">
      <summary>
            The instance.
            </summary>
    </member>
    <member name="P:Zhaord.Singletons.Singleton`1.Instance">
      <summary>The singleton instance for the specified type T. Only one instance (at the time) of this object for each type of T.</summary>
    </member>
    <member name="M:Zhaord.Singletons.SingletonDictionary`2.#cctor">
      <summary>
            Initializes static members of the <see cref="!:SingletonDictionary" /> class.
            </summary>
    </member>
    <member name="P:Zhaord.Singletons.SingletonDictionary`2.Instance">
      <summary>The singleton instance for the specified type T. Only one instance (at the time) of this dictionary for each type of T.</summary>
    </member>
    <member name="T:Zhaord.Singletons.SingletonList`1">
      <summary>
            Provides a singleton list for a certain type.
            </summary>
      <typeparam name="T">
            The type of list to store.
            </typeparam>
    </member>
    <member name="M:Zhaord.Singletons.SingletonList`1.#cctor">
      <summary>
            Initializes static members of the <see cref="!:SingletonList" /> class.
            </summary>
    </member>
    <member name="P:Zhaord.Singletons.SingletonList`1.Instance">
      <summary>The singleton instance for the specified type T. Only one instance (at the time) of this list for each type of T.</summary>
    </member>
    <member name="T:Zhaord.TypeFinders.AppDomainTypeFinder">
      <summary>
            A class that finds types needed by SmartStore by looping assemblies in the
            currently executing AppDomain. Only assemblies whose names matches
            certain patterns are investigated and an optional list of assemblies
            referenced by <see cref="P:Zhaord.TypeFinders.AppDomainTypeFinder.CustomAssemblyNames" /> are always investigated.
            </summary>
    </member>
    <member name="T:Zhaord.TypeFinders.ITypeFinder">
      <summary>
            Classes implementing this interface provide information about types 
            to various services in the SmartStore engine.
            </summary>
    </member>
    <member name="M:Zhaord.TypeFinders.ITypeFinder.GetAssemblies(System.Boolean)">
      <summary>
            The get assemblies.
            </summary>
      <param name="ignoreInactivePlugins">
            The ignore inactive plugins.
            </param>
      <returns>
            The <see><cref>IList</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.TypeFinders.ITypeFinder.FindClassesOfType(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
      <summary>
            The find classes of type.
            </summary>
      <param name="assignTypeFrom">
            The assign type from.
            </param>
      <param name="assemblies">
            The assemblies.
            </param>
      <param name="onlyConcreteClasses">
            The only concrete classes.
            </param>
      <returns>
            The <see><cref>IEnumerable</cref></see>
                .
            </returns>
    </member>
    <member name="F:Zhaord.TypeFinders.AppDomainTypeFinder.assemblySkipLoadingPattern">
      <summary>
            The _assembly skip loading pattern.
            </summary>
    </member>
    <member name="F:Zhaord.TypeFinders.AppDomainTypeFinder.ignoreReflectionErrors">
      <summary>
            The _ignore reflection errors.
            </summary>
    </member>
    <member name="F:Zhaord.TypeFinders.AppDomainTypeFinder.loadAppDomainAssemblies">
      <summary>
            The _load app domain assemblies.
            </summary>
    </member>
    <member name="F:Zhaord.TypeFinders.AppDomainTypeFinder.assemblyRestrictToLoadingPattern">
      <summary>
            The _assembly restrict to loading pattern.
            </summary>
    </member>
    <member name="F:Zhaord.TypeFinders.AppDomainTypeFinder.customAssemblyNames">
      <summary>
            The _custom assembly names.
            </summary>
    </member>
    <member name="M:Zhaord.TypeFinders.AppDomainTypeFinder.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.TypeFinders.AppDomainTypeFinder" /> class. Creates a new instance of the AppDomainTypeFinder.
            </summary>
    </member>
    <member name="M:Zhaord.TypeFinders.AppDomainTypeFinder.FindClassesOfType(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
      <summary>
            The find classes of type.
            </summary>
      <param name="assignTypeFrom">
            The assign type from.
            </param>
      <param name="assemblies">
            The assemblies.
            </param>
      <param name="onlyConcreteClasses">
            The only concrete classes.
            </param>
      <returns>
            The <see cref="!:IEnumerable" />.
            </returns>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="F:Zhaord.TypeFinders.AppDomainTypeFinder._attributedAssemblies">
      <summary>
            Caches attributed assembly information so they don't have to be re-read
            </summary>
    </member>
    <member name="F:Zhaord.TypeFinders.AppDomainTypeFinder._assemblyAttributesSearched">
      <summary>
            Caches the assembly attributes that have been searched for
            </summary>
    </member>
    <member name="M:Zhaord.TypeFinders.AppDomainTypeFinder.GetAssemblies(System.Boolean)">
      <summary>
            Gets the assemblies related to the current implementation.
            </summary>
      <param name="ignoreInactivePlugins">
            Indicates whether uninstalled plugin's assemblies should be filtered out
            </param>
      <returns>
            A list of assemblies that should be loaded by the SmartStore factory.
            </returns>
    </member>
    <member name="M:Zhaord.TypeFinders.AppDomainTypeFinder.AddAssembliesInAppDomain(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Reflection.Assembly})">
      <summary>
            Iterates all assemblies in the AppDomain and if it's name matches the configured patterns add it to our list.
            </summary>
      <param name="addedAssemblyNames">
      </param>
      <param name="assemblies">
      </param>
    </member>
    <member name="M:Zhaord.TypeFinders.AppDomainTypeFinder.AddCustomAssemblies(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Reflection.Assembly})">
      <summary>
            Adds specificly configured assemblies.
            </summary>
      <param name="addedAssemblyNames">
            The added Assembly Names.
            </param>
      <param name="assemblies">
            The assemblies.
            </param>
    </member>
    <member name="M:Zhaord.TypeFinders.AppDomainTypeFinder.Matches(System.String)">
      <summary>
            Check if a dll is one of the shipped dlls that we know don't need to be investigated.
            </summary>
      <param name="assemblyFullName">
            The name of the assembly to check.
            </param>
      <returns>
            True if the assembly should be loaded into SmartStore.
            </returns>
    </member>
    <member name="M:Zhaord.TypeFinders.AppDomainTypeFinder.Matches(System.String,System.String)">
      <summary>
            Check if a dll is one of the shipped dlls that we know don't need to be investigated.
            </summary>
      <param name="assemblyFullName">
            The assembly name to match.
            </param>
      <param name="pattern">
            The regular expression pattern to match against the assembly name.
            </param>
      <returns>
            True if the pattern matches the assembly name.
            </returns>
    </member>
    <member name="M:Zhaord.TypeFinders.AppDomainTypeFinder.LoadMatchingAssemblies(System.String)">
      <summary>
            Makes sure matching assemblies in the supplied folder are loaded in the app domain.
            </summary>
      <param name="directoryPath">
            The physical path to a directory containing dlls to load in the app domain.
            </param>
    </member>
    <member name="M:Zhaord.TypeFinders.AppDomainTypeFinder.DoesTypeImplementOpenGeneric(System.Type,System.Type)">
      <summary>
            The does type implement open generic.
            </summary>
      <param name="type">
            The type.
            </param>
      <param name="openGeneric">
            The open generic.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="P:Zhaord.TypeFinders.AppDomainTypeFinder.App">
      <summary>The app domain to look for types in.</summary>
    </member>
    <member name="P:Zhaord.TypeFinders.AppDomainTypeFinder.LoadAppDomainAssemblies">
      <summary>Gets or sets wether SmartStore should iterate assemblies in the app domain when loading SmartStore types. Loading patterns are applied when loading these assemblies.</summary>
    </member>
    <member name="P:Zhaord.TypeFinders.AppDomainTypeFinder.CustomAssemblyNames">
      <summary>Gets or sets assemblies loaded at startup in addition to those loaded in the AppDomain.</summary>
    </member>
    <member name="P:Zhaord.TypeFinders.AppDomainTypeFinder.AssemblySkipLoadingPattern">
      <summary>Gets the pattern for dlls that we know don't need to be investigated.</summary>
    </member>
    <member name="P:Zhaord.TypeFinders.AppDomainTypeFinder.AssemblyRestrictToLoadingPattern">
      <summary>Gets or sets the pattern for dll that will be investigated. For ease of use this defaults to match all but to increase performance you might want to configure a pattern that includes assemblies and your own.</summary>
      <remarks>If you change this so that SmartStore assemblies arn't investigated (e.g. by not including something like "^SmartStore|..." you may break core functionality.</remarks>
    </member>
    <member name="T:Zhaord.TypeFinders.AppDomainTypeFinder.AttributedAssembly">
      <summary>
            The attributed assembly.
            </summary>
    </member>
    <member name="P:Zhaord.TypeFinders.AppDomainTypeFinder.AttributedAssembly.Assembly">
      <summary>
            Gets or sets the assembly.
            </summary>
    </member>
    <member name="P:Zhaord.TypeFinders.AppDomainTypeFinder.AttributedAssembly.PluginAttributeType">
      <summary>
            Gets or sets the plugin attribute type.
            </summary>
    </member>
    <member name="T:Zhaord.TypeFinders.WebAppTypeFinder">
      <summary>
            Provides information about types in the current web application.
            Optionally this class can look at all assemblies in the bin folder.
            </summary>
    </member>
    <member name="F:Zhaord.TypeFinders.WebAppTypeFinder.ensureBinFolderAssembliesLoaded">
      <summary>
            The ensure bin folder assemblies loaded.
            </summary>
    </member>
    <member name="F:Zhaord.TypeFinders.WebAppTypeFinder.binFolderAssembliesLoaded">
      <summary>
            The bin folder assemblies loaded.
            </summary>
    </member>
    <member name="M:Zhaord.TypeFinders.WebAppTypeFinder.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.TypeFinders.WebAppTypeFinder" /> class.
            </summary>
    </member>
    <member name="M:Zhaord.TypeFinders.WebAppTypeFinder.GetBinDirectory">
      <summary>
            Gets a physical disk path of \Bin directory
            </summary>
      <returns>The physical path. E.g. "c:\inetpub\wwwroot\bin"</returns>
    </member>
    <member name="M:Zhaord.TypeFinders.WebAppTypeFinder.GetAssemblies(System.Boolean)">
      <summary>
            The get assemblies.
            </summary>
      <param name="ignoreInactivePlugins">
            The ignore inactive plugins.
            </param>
      <returns>
            The <see><cref>IList</cref></see>
                .
            </returns>
    </member>
    <member name="P:Zhaord.TypeFinders.WebAppTypeFinder.EnsureBinFolderAssembliesLoaded">
      <summary>
            Gets or sets a value indicating whether ensure bin folder assemblies loaded.
            </summary>
    </member>
    <member name="T:Zhaord.Utilities.CommonHelper">
      <summary>
            The common helper.
            </summary>
    </member>
    <member name="M:Zhaord.Utilities.CommonHelper.GenerateRandomDigitCode(System.Int32)">
      <summary>
            Generate random digit code
            </summary>
      <param name="length">
            Length
            </param>
      <returns>
            Result string
            </returns>
    </member>
    <member name="M:Zhaord.Utilities.CommonHelper.GenerateRandomInteger(System.Int32,System.Int32)">
      <summary>
            Returns an random interger number within a specified rage
            </summary>
      <param name="min">
            Minimum number
            </param>
      <param name="max">
            Maximum number
            </param>
      <returns>
            Result
            </returns>
    </member>
    <member name="M:Zhaord.Utilities.CommonHelper.MapPath(System.String,System.Boolean)">
      <summary>
            Maps a virtual path to a physical disk path.
            </summary>
      <param name="path">
            The path to map. E.g. "~/bin"
            </param>
      <param name="findAppRoot">
            Specifies if the app root should be resolved when mapped directory does not exist
            </param>
      <returns>
            The physical path. E.g. "c:\inetpub\wwwroot\bin"
            </returns>
      <remarks>
            This method is able to resolve the web application root
            even when it's called during design-time (e.g. from EF design-time tools).
            </remarks>
    </member>
    <member name="M:Zhaord.Utilities.CommonHelper.TryConvert``1(System.Object,``0@)">
      <summary>
            The try convert.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="convertedValue">
            The converted value.
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Utilities.CommonHelper.TryConvert``1(System.Object,System.Globalization.CultureInfo,``0@)">
      <summary>
            The try convert.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="culture">
            The culture.
            </param>
      <param name="convertedValue">
            The converted value.
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Utilities.CommonHelper.TryConvert(System.Object,System.Type,System.Object@)">
      <summary>
            The try convert.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="to">
            The to.
            </param>
      <param name="convertedValue">
            The converted value.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Utilities.CommonHelper.TryConvert(System.Object,System.Type,System.Globalization.CultureInfo,System.Object@)">
      <summary>
            The try convert.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="to">
            The to.
            </param>
      <param name="culture">
            The culture.
            </param>
      <param name="convertedValue">
            The converted value.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="M:Zhaord.Utilities.CommonHelper.GetTypeConverter(System.Type)">
      <summary>
            The get type converter.
            </summary>
      <param name="type">
            The type.
            </param>
      <returns>
            The <see cref="T:System.ComponentModel.TypeConverter" />.
            </returns>
    </member>
    <member name="M:Zhaord.Utilities.CommonHelper.GetAppSetting``1(System.String,``0)">
      <summary>
            Gets a setting from the application's <c>web.config</c><c>appSettings</c> node
            </summary>
      <typeparam name="T">
            The type to convert the setting value to
            </typeparam>
      <param name="key">
            The key of the setting
            </param>
      <param name="defValue">
            The default value to return if the setting does not exist
            </param>
      <returns>
            The casted setting value
            </returns>
    </member>
    <member name="M:Zhaord.Utilities.CommonHelper.FindSolutionRoot(System.String)">
      <summary>
            The find solution root.
            </summary>
      <param name="currentDir">
            The current dir.
            </param>
      <returns>
            The <see cref="T:System.IO.DirectoryInfo" />.
            </returns>
    </member>
    <member name="M:Zhaord.Utilities.CommonHelper.IsSolutionRoot(System.IO.FileSystemInfo)">
      <summary>
            The is solution root.
            </summary>
      <param name="dir">
            The dir.
            </param>
      <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
    </member>
    <member name="P:Zhaord.Utilities.CommonHelper.IsDevEnvironment">
      <summary>
            Gets a value indicating whether is dev environment.
            </summary>
    </member>
    <member name="T:Zhaord.ZhaordException">
      <summary>
            Represents errors that occur during application execution
            </summary>
    </member>
    <member name="M:Zhaord.ZhaordException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.ZhaordException" /> class.
            Initializes a new instance of the Exception class.
            </summary>
    </member>
    <member name="M:Zhaord.ZhaordException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.ZhaordException" /> class.
            Initializes a new instance of the Exception class with a specified error message.
            </summary>
      <param name="message">
            The message that describes the error.
            </param>
    </member>
    <member name="M:Zhaord.ZhaordException.#ctor(System.String,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.ZhaordException" /> class.
            Initializes a new instance of the Exception class with a specified error message.
            </summary>
      <param name="messageFormat">
            The exception message format.
            </param>
      <param name="args">
            The exception message arguments.
            </param>
    </member>
    <member name="M:Zhaord.ZhaordException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.ZhaordException" /> class.
            Initializes a new instance of the Exception class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">
            The error message that explains the reason for the exception.
            </param>
      <param name="innerException">
            The exception that is the cause of the current exception, or a null reference if no inner exception is specified.
            </param>
    </member>
    <member name="M:Zhaord.ZhaordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.ZhaordException" /> class.
            Initializes a new instance of the Exception class with serialized data.
            </summary>
      <param name="info">
            The SerializationInfo that holds the serialized object data about the exception being thrown.
            </param>
      <param name="context">
            The StreamingContext that contains contextual information about the source or destination.
            </param>
    </member>
    <member name="T:Zhaord.TypeFinders.TypeFinderExtensions">
      <summary>
            The i type finder extensions.
            </summary>
    </member>
    <member name="M:Zhaord.TypeFinders.TypeFinderExtensions.FindClassesOfType``1(Zhaord.TypeFinders.ITypeFinder,System.Boolean,System.Boolean)">
      <summary>
            The find classes of type.
            </summary>
      <param name="finder">
            The finder.
            </param>
      <param name="onlyConcreteClasses">
            The only concrete classes.
            </param>
      <param name="ignoreInactivePlugins">
            The ignore inactive plugins.
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see><cref>IEnumerable</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.TypeFinders.TypeFinderExtensions.FindClassesOfType(Zhaord.TypeFinders.ITypeFinder,System.Type,System.Boolean,System.Boolean)">
      <summary>
            The find classes of type.
            </summary>
      <param name="finder">
            The finder.
            </param>
      <param name="assignTypeFrom">
            The assign type from.
            </param>
      <param name="onlyConcreteClasses">
            The only concrete classes.
            </param>
      <param name="ignoreInactivePlugins">
            The ignore inactive plugins.
            </param>
      <returns>
            The <see><cref>IEnumerable</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.TypeFinders.TypeFinderExtensions.FindClassesOfType``1(Zhaord.TypeFinders.ITypeFinder,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
      <summary>
            The find classes of type.
            </summary>
      <param name="finder">
            The finder.
            </param>
      <param name="assemblies">
            The assemblies.
            </param>
      <param name="onlyConcreteClasses">
            The only concrete classes.
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see><cref>IEnumerable</cref></see>
                .
            </returns>
    </member>
    <member name="T:Zhaord.Utilities.ActionDisposable">
      <summary>
            Allows action to be executed when it is disposed
            </summary>
    </member>
    <member name="F:Zhaord.Utilities.ActionDisposable.Empty">
      <summary>
            The empty.
            </summary>
    </member>
    <member name="F:Zhaord.Utilities.ActionDisposable.action">
      <summary>
            The action.
            </summary>
    </member>
    <member name="M:Zhaord.Utilities.ActionDisposable.#ctor(System.Action)">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.Utilities.ActionDisposable" /> struct.
            </summary>
      <param name="action">
            The action.
            </param>
    </member>
    <member name="M:Zhaord.Utilities.ActionDisposable.Dispose">
      <summary>
            The dispose.
            </summary>
    </member>
    <member name="T:Zhaord.Utilities.Converts.ConvertProblem">
      <summary>
            The convert problem.
            转换问题
            </summary>
    </member>
    <member name="M:Zhaord.Utilities.Converts.ConvertProblem.ToString">
      <summary>
            The to string.
            转换为字符串
            </summary>
      <returns>
            The <see><cref>string</cref></see>
                .
            </returns>
    </member>
    <member name="P:Zhaord.Utilities.Converts.ConvertProblem.Item">
      <summary>
            Gets or sets the item.
            获取或设置项目
            </summary>
    </member>
    <member name="P:Zhaord.Utilities.Converts.ConvertProblem.Property">
      <summary>
            Gets or sets the property.
            获取或设置属性信息
            </summary>
    </member>
    <member name="P:Zhaord.Utilities.Converts.ConvertProblem.AttemptedValue">
      <summary>
            Gets or sets the attempted value.
            获取或设置附加值
            </summary>
    </member>
    <member name="P:Zhaord.Utilities.Converts.ConvertProblem.Exception">
      <summary>
            Gets or sets the exception.
            获取或设置异常
            </summary>
    </member>
    <member name="T:Zhaord.Utilities.Converts.DateTimeConvert">
      <summary>
            Converts between <see cref="T:System.DateTime" />s and <see langword="string" />s.
            在日期类型和字符串之间转换
            </summary>
      <remarks>
            Accepted formats for parsing are "dd MMM yyyy HH:mm:ss.ff", "yyyy-MM-ddTHH:mm:ss", "dd MMM yyyy hh:mm tt", "dd MMM yyyy hh:mm:ss tt", "dd MMM yyyy HH:mm:ss", "dd MMM yyyy HH:mm" and "dd MMM yyyy".
            接收字符串的类型可以是
            "dd MMM yyyy HH:mm:ss.ff", 
            "yyyy-MM-ddTHH:mm:ss", 
            "dd MMM yyyy hh:mm tt", 
            "dd MMM yyyy hh:mm:ss tt", 
            "dd MMM yyyy HH:mm:ss", 
            "dd MMM yyyy HH:mm" and 
            "dd MMM yyyy".
            </remarks>
    </member>
    <member name="F:Zhaord.Utilities.Converts.DateTimeConvert.DateTimeFormat">
      <summary>
            The default format used by <see cref="M:Zhaord.Utilities.Converts.DateTimeConvert.ToString(System.DateTime)" /> and <see cref="M:Zhaord.Utilities.Converts.DateTimeConvert.ToString(System.Nullable{System.DateTime})" />.
            默认格式化字符串
            </summary>
    </member>
    <member name="F:Zhaord.Utilities.Converts.DateTimeConvert.ParseFormats">
      <summary>
            The supported formats used to parse strings.
            支持的字符串格式
            </summary>
    </member>
    <member name="M:Zhaord.Utilities.Converts.DateTimeConvert.Parse(System.String)">
      <summary>
            Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent. 
            转换字符串到日期
            </summary>
      <remarks>
            Accepted formats for parsing are "dd MMM yyyy HH:mm:ss.ff", "yyyy-MM-ddTHH:mm:ss", "dd MMM yyyy hh:mm tt", "dd MMM yyyy hh:mm:ss tt", "dd MMM yyyy HH:mm:ss", "dd MMM yyyy HH:mm" and "dd MMM yyyy". <see cref="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" /> is used to attempt to parse <paramref><name>s</name></paramref>
                .
            接受字符串格式：
            "dd MMM yyyy HH:mm:ss.ff", 
            "yyyy-MM-ddTHH:mm:ss", 
            "dd MMM yyyy hh:mm tt", 
            "dd MMM yyyy hh:mm:ss tt", 
            "dd MMM yyyy HH:mm:ss", 
            "dd MMM yyyy HH:mm" and 
            "dd MMM yyyy"
            </remarks>
      <param name="date">
            The date.
            日期
            </param>
      <returns>
            A <see cref="T:System.DateTime" /> equivalent to the date and time contained in <paramref><name>s</name></paramref>
                .
            </returns>
      <exception cref="T:System.FormatException">
        <paramref>
          <name>s</name>
        </paramref>
                cannot be parsed.
            转换不支持
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref>
          <name>s</name>
        </paramref>
                is a null reference.
            空引用
            </exception>
      <exception cref="T:System.ArgumentException">
            参数异常
            <paramref><name>s</name></paramref>
                is <see cref="F:System.String.Empty" />.
            </exception>
    </member>
    <member name="M:Zhaord.Utilities.Converts.DateTimeConvert.ParseNullable(System.String)">
      <summary>
            Converts the specified string representation of a date and time to its <see cref="T:System.Nullable" /><see cref="T:System.DateTime" /> equivalent. 
            转换字符串到日期
            </summary>
      <param name="s">
            A string containing a date and (optionally) time to convert.
            </param>
      <returns>
        <see langword="null" /> 
            if <paramref name="s" /> 
            is <see cref="M:System.String.IsNullOrEmpty(System.String)" />; 
            otherwise the value returned from <see cref="M:Zhaord.Utilities.Converts.DateTimeConvert.Parse(System.String)" />.
            </returns>
    </member>
    <member name="M:Zhaord.Utilities.Converts.DateTimeConvert.ToString(System.DateTime)">
      <summary>
            Converts a <see cref="T:System.DateTime" /> to its equivalent string representation. 
            </summary>
      <param name="dateTime">
            The <see cref="T:System.DateTime" /> to convert.
            </param>
      <returns>
            A string representation <paramref name="dateTime" />.
            </returns>
    </member>
    <member name="M:Zhaord.Utilities.Converts.DateTimeConvert.ToString(System.Nullable{System.DateTime})">
      <summary>
            Converts a <see cref="T:System.Nullable" /><see cref="T:System.DateTime" /> to its equivalent string representation. 
            </summary>
      <param name="dateTime">
            The <see cref="T:System.Nullable" /><see cref="T:System.DateTime" /> to convert.
            </param>
      <returns>
        <see langword="null" /> if A string representation <paramref name="dateTime" />.
            </returns>
    </member>
    <member name="T:Zhaord.Utilities.Converts.DictionaryConverter">
      <summary>
            The dictionary converter.
            字典转换
            </summary>
    </member>
    <member name="M:Zhaord.Utilities.Converts.DictionaryConverter.CanCreateType(System.Type)">
      <summary>
            The can create type.
            判断是否可创建类型
            </summary>
      <param name="itemType">
            The item type.
            项目类型
            </param>
      <returns>
            The <see><cref>bool</cref></see>
                .
            </returns>
    </member>
    <member name="M:Zhaord.Utilities.Converts.DictionaryConverter.CreateAndPopulate``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.ICollection{Zhaord.Utilities.Converts.ConvertProblem}@)">
      <summary>
            The create and populate.
            </summary>
      <param name="source">
            The source.
            源
            </param>
      <param name="problems">
            The problems.
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see cref="!:T" />.
            </returns>
    </member>
    <member name="M:Zhaord.Utilities.Converts.DictionaryConverter.CreateAndPopulate(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.ICollection{Zhaord.Utilities.Converts.ConvertProblem}@)">
      <summary>
            The create and populate.
            </summary>
      <param name="targetType">
            The target type.
            目标类型
            </param>
      <param name="source">
            The source.
            来源类型
            </param>
      <param name="problems">
            The problems.
            </param>
      <returns>
            The <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Zhaord.Utilities.Converts.DictionaryConverter.SafeCreateAndPopulate(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            The safe create and populate.
            </summary>
      <param name="targetType">
            The target type.
            目标类型
            </param>
      <param name="source">
            The source.
            源类型
            </param>
      <returns>
            The <see cref="T:System.Object" />.
            </returns>
      <exception cref="T:Zhaord.Utilities.Converts.DictionaryConvertException">
            字典异常
            </exception>
    </member>
    <member name="M:Zhaord.Utilities.Converts.DictionaryConverter.SafeCreateAndPopulate``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            The safe create and populate.
            </summary>
      <param name="source">
            The source.
            源类型
            </param>
      <typeparam name="T">
            泛型
            </typeparam>
      <returns>
            The <see cref="!:T" />.
            </returns>
    </member>
    <member name="M:Zhaord.Utilities.Converts.DictionaryConverter.Populate(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,System.Object[])">
      <summary>
            The populate.
            </summary>
      <param name="source">
            The source.
            源类型
            </param>
      <param name="target">
            The target.
            目标类型
            </param>
      <param name="populated">
            The populated.
            </param>
      <exception cref="T:Zhaord.Utilities.Converts.DictionaryConvertException">
            字典异常
            </exception>
    </member>
    <member name="M:Zhaord.Utilities.Converts.DictionaryConverter.Populate(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,System.Collections.Generic.ICollection{Zhaord.Utilities.Converts.ConvertProblem}@,System.Object[])">
      <summary>
            The populate.
            </summary>
      <param name="source">
            The source.
            源类型
            </param>
      <param name="target">
            The target.
            目标类型
            </param>
      <param name="problems">
            The problems.
            </param>
      <param name="populated">
            The populated.
            </param>
    </member>
    <member name="M:Zhaord.Utilities.Converts.DictionaryConverter.RetrieveArrayValues(System.Reflection.PropertyInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.ICollection{Zhaord.Utilities.Converts.ConvertProblem})">
      <summary>
            The retrieve array values.
            </summary>
      <param name="arrayProp">
            The array prop.
            </param>
      <param name="source">
            The source.
            </param>
      <param name="problems">
            The problems.
            </param>
      <returns>
            The <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Zhaord.Utilities.Converts.DictionaryConverter.SetPropFromValue(System.Object,System.Object,System.Reflection.PropertyInfo,System.Collections.Generic.ICollection{Zhaord.Utilities.Converts.ConvertProblem})">
      <summary>
            The set prop from value.
            </summary>
      <param name="value">
            The value.
            </param>
      <param name="item">
            The item.
            </param>
      <param name="pi">
            The pi.
            </param>
      <param name="problems">
            The problems.
            </param>
    </member>
    <member name="M:Zhaord.Utilities.Converts.DictionaryConverter.WriteToProperty(System.Object,System.Reflection.PropertyInfo,System.Object,System.Collections.Generic.ICollection{Zhaord.Utilities.Converts.ConvertProblem})">
      <summary>
            The write to property.
            </summary>
      <param name="item">
            The item.
            </param>
      <param name="pi">
            The pi.
            </param>
      <param name="value">
            The value.
            </param>
      <param name="problems">
            The problems.
            </param>
    </member>
    <member name="T:Zhaord.Utilities.Converts.DictionaryConvertException">
      <summary>
            The dictionary convert exception.
            字典转换异常
            </summary>
    </member>
    <member name="M:Zhaord.Utilities.Converts.DictionaryConvertException.#ctor(System.Collections.Generic.ICollection{Zhaord.Utilities.Converts.ConvertProblem})">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.Utilities.Converts.DictionaryConvertException" /> class.
            初始化字典转换异常实例
            </summary>
      <param name="problems">
            The problems.
            问题
            </param>
    </member>
    <member name="M:Zhaord.Utilities.Converts.DictionaryConvertException.#ctor(System.String,System.Collections.Generic.ICollection{Zhaord.Utilities.Converts.ConvertProblem})">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.Utilities.Converts.DictionaryConvertException" /> class.
            初始化字典转换异常实例
            </summary>
      <param name="message">
            The message.
            消息
            </param>
      <param name="problems">
            The problems.
            问题
            </param>
    </member>
    <member name="M:Zhaord.Utilities.Converts.DictionaryConvertException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.Utilities.Converts.DictionaryConvertException" /> class.
            初始化字典转换异常实例
            </summary>
      <param name="info">
            The info.
            信息
            </param>
      <param name="context">
            The context.
            上下文
            </param>
    </member>
    <member name="M:Zhaord.Utilities.Converts.DictionaryConvertException.CreateMessage(System.Collections.Generic.IEnumerable{Zhaord.Utilities.Converts.ConvertProblem})">
      <summary>
            The create message.
            创建消息
            </summary>
      <param name="problems">
            The problems.
            问题
            </param>
      <returns>
            The <see><cref>string</cref></see>
                .
            </returns>
    </member>
    <member name="P:Zhaord.Utilities.Converts.DictionaryConvertException.Problems">
      <summary>
            Gets the problems.
            获取问题集合
            </summary>
    </member>
    <member name="T:Zhaord.Utilities.Threading.LockExtensions">
      <summary>
            The lock extensions.
            Lock扩展
            </summary>
    </member>
    <member name="M:Zhaord.Utilities.Threading.LockExtensions.GetReadLock(System.Threading.ReaderWriterLockSlim)">
      <summary>
            Acquires a disposable reader lock that can be used with a using statement.
            </summary>
      <param name="readerWriterLock">
            The rw Lock.
            </param>
      <returns>
            The <see cref="T:System.IDisposable" />.
            </returns>
    </member>
    <member name="M:Zhaord.Utilities.Threading.LockExtensions.GetReadLock(System.Threading.ReaderWriterLockSlim,System.Int32)">
      <summary>
            Acquires a disposable reader lock that can be used with a using statement.
            </summary>
      <param name="readerWriterLock">
            The rw Lock.
            </param>
      <param name="millisecondsTimeout">
            The number of milliseconds to wait, or -1 to wait indefinitely.
            </param>
      <returns>
            The <see cref="T:System.IDisposable" />.
            </returns>
    </member>
    <member name="M:Zhaord.Utilities.Threading.LockExtensions.GetUpgradeableReadLock(System.Threading.ReaderWriterLockSlim)">
      <summary>
            Acquires a disposable and upgradeable reader lock that can be used with a using statement.
            </summary>
      <param name="readerWriterLock">
            The rw Lock.
            </param>
      <returns>
            The <see cref="T:System.IDisposable" />.
            </returns>
    </member>
    <member name="M:Zhaord.Utilities.Threading.LockExtensions.GetUpgradeableReadLock(System.Threading.ReaderWriterLockSlim,System.Int32)">
      <summary>
            Acquires a disposable and upgradeable reader lock that can be used with a using statement.
            </summary>
      <param name="readerWriterLock">
            The rw Lock.
            </param>
      <param name="millisecondsTimeout">
            The number of milliseconds to wait, or -1 to wait indefinitely.
            </param>
      <returns>
            The <see cref="T:System.IDisposable" />.
            </returns>
    </member>
    <member name="M:Zhaord.Utilities.Threading.LockExtensions.GetWriteLock(System.Threading.ReaderWriterLockSlim)">
      <summary>
            Acquires a disposable writer lock that can be used with a using statement.
            </summary>
      <param name="readerWriterLock">
            The rw Lock.
            </param>
      <returns>
            The <see cref="T:System.IDisposable" />.
            </returns>
    </member>
    <member name="M:Zhaord.Utilities.Threading.LockExtensions.GetWriteLock(System.Threading.ReaderWriterLockSlim,System.Int32)">
      <summary>
            Tries to enter a disposable write lock that can be used with a using statement.
            </summary>
      <param name="readerWriterLock">
            The rw Lock.
            </param>
      <param name="millisecondsTimeout">
            The number of milliseconds to wait, or -1 to wait indefinitely.
            </param>
      <returns>
            The <see cref="T:System.IDisposable" />.
            </returns>
    </member>
    <member name="T:Zhaord.Utilities.Threading.ReadLockDisposable">
      <summary>
            The read lock disposable.
            </summary>
    </member>
    <member name="F:Zhaord.Utilities.Threading.ReadLockDisposable.readerWriterLock">
      <summary>
            The _rw lock.
            </summary>
    </member>
    <member name="M:Zhaord.Utilities.Threading.ReadLockDisposable.#ctor(System.Threading.ReaderWriterLockSlim)">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.Utilities.Threading.ReadLockDisposable" /> class.
            </summary>
      <param name="readerWriterLock">
            The rw lock.
            </param>
    </member>
    <member name="M:Zhaord.Utilities.Threading.ReadLockDisposable.System#IDisposable#Dispose">
      <summary>
            The dispose.
            </summary>
    </member>
    <member name="T:Zhaord.Utilities.Threading.UpgradeableReadLockDisposable">
      <summary>
            The upgradeable read lock disposable.
            </summary>
    </member>
    <member name="F:Zhaord.Utilities.Threading.UpgradeableReadLockDisposable.readerWriterLock">
      <summary>
            The _rw lock.
            </summary>
    </member>
    <member name="M:Zhaord.Utilities.Threading.UpgradeableReadLockDisposable.#ctor(System.Threading.ReaderWriterLockSlim)">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.Utilities.Threading.UpgradeableReadLockDisposable" /> class.
            </summary>
      <param name="readerWriterLock">
            The rw lock.
            </param>
    </member>
    <member name="M:Zhaord.Utilities.Threading.UpgradeableReadLockDisposable.System#IDisposable#Dispose">
      <summary>
            The dispose.
            </summary>
    </member>
    <member name="T:Zhaord.Utilities.Threading.WriteLockDisposable">
      <summary>
            The write lock disposable.
            </summary>
    </member>
    <member name="F:Zhaord.Utilities.Threading.WriteLockDisposable.readerWriterLock">
      <summary>
            The _rw lock.
            </summary>
    </member>
    <member name="M:Zhaord.Utilities.Threading.WriteLockDisposable.#ctor(System.Threading.ReaderWriterLockSlim)">
      <summary>
            Initializes a new instance of the <see cref="T:Zhaord.Utilities.Threading.WriteLockDisposable" /> class.
            </summary>
      <param name="readerWriterLock">
            The rw lock.
            </param>
    </member>
    <member name="M:Zhaord.Utilities.Threading.WriteLockDisposable.System#IDisposable#Dispose">
      <summary>
            The dispose.
            </summary>
    </member>
    <member name="M:Zhaord.ZhaordValidationException.#ctor">
      <summary>
            Constructor.
            </summary>
    </member>
    <member name="M:Zhaord.ZhaordValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for serializing.
            </summary>
    </member>
    <member name="M:Zhaord.ZhaordValidationException.#ctor(System.String)">
      <summary>
            Constructor.
            </summary>
      <param name="message">Exception message</param>
    </member>
    <member name="M:Zhaord.ZhaordValidationException.#ctor(System.String,System.Collections.Generic.List{System.ComponentModel.DataAnnotations.ValidationResult})">
      <summary>
            Constructor.
            </summary>
      <param name="message">Exception message</param>
      <param name="validationErrors">Validation errors</param>
    </member>
    <member name="M:Zhaord.ZhaordValidationException.#ctor(System.String,System.Exception)">
      <summary>
            Constructor.
            </summary>
      <param name="message">Exception message</param>
      <param name="innerException">Inner exception</param>
    </member>
    <member name="P:Zhaord.ZhaordValidationException.ValidationErrors">
      <summary>
            Detailed list of validation errors for this exception.
            </summary>
    </member>
    <member name="N:Zhaord">
      <summary />
    </member>
    <member name="N:Zhaord.Attributes">
      <summary />
    </member>
    <member name="N:Zhaord.Caching">
      <summary />
    </member>
    <member name="N:Zhaord.Collections">
      <summary />
    </member>
    <member name="N:Zhaord.Configuration">
      <summary />
    </member>
    <member name="N:Zhaord.Data">
      <summary />
    </member>
    <member name="N:Zhaord.Data.Notifies">
      <summary />
    </member>
    <member name="N:Zhaord.DependencyManagement">
      <summary />
    </member>
    <member name="N:Zhaord.Engines">
      <summary />
    </member>
    <member name="N:Zhaord.Expressions">
      <summary />
    </member>
    <member name="N:Zhaord.Extensions">
      <summary />
    </member>
    <member name="N:Zhaord.Localization">
      <summary />
    </member>
    <member name="N:Zhaord.Singletons">
      <summary />
    </member>
    <member name="N:Zhaord.TypeFinders">
      <summary />
    </member>
    <member name="N:Zhaord.Utilities">
      <summary />
    </member>
    <member name="N:Zhaord.Utilities.Converts">
      <summary />
    </member>
    <member name="N:Zhaord.Utilities.Threading">
      <summary />
    </member>
  </members>
</doc>